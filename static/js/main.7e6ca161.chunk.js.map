{"version":3,"sources":["assets/img/orbitBanner3000.png","variables/Variables.jsx","assets/sass/light-bootstrap-dashboard.css?v=1.2.0","app/restHelper.jsx","app/Logger.jsx","app/db/UsersTable.jsx","app/logInHelper.jsx","app/lang/dic.js","app/lang/lang.js","components/Header/HeaderLinks.jsx","app/adminHelper.jsx","components/Card/Card.jsx","app/db/TanksTable.jsx","components/StatsCard/StatsCard.jsx","app/notificationHelper.jsx","app/db/TankReadings.jsx","views/Notifications/TanksNotifications.jsx","app/db/CustomersTable.jsx","components/App/TankCard.jsx","views/Tanks/Tanks.jsx","views/Dashboard/RangeHelper.jsx","components/App/DateAndTime.jsx","views/Dashboard/DateAndTimeModal.jsx","views/Admin/TanksSelection.jsx","views/Dashboard/RangeView.jsx","components/App/VisGraph.jsx","app/readingsHelper.jsx","views/App/Spinner.jsx","views/Graph/Graph.jsx","views/TableList/TableList.jsx","views/TableList/PdfMaker.jsx","views/Data/Data.jsx","components/App/Map.jsx","views/Location/Locations.jsx","views/Dashboard/Dashboard.jsx","views/Admin/CustomerForm.jsx","views/Admin/UsersForm.jsx","views/Admin/TankForm.jsx","views/Admin/Customers.jsx","views/Admin/AlerstForm.jsx","views/Admin/Tanks.jsx","views/Admin/Users.jsx","views/Admin/Alerts.jsx","views/Admin/Logger.jsx","views/Icons/Icons.jsx","views/App/LogOut.jsx","routes/dashboard.jsx","components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","views/App/login.jsx","routes/index.jsx","layouts/Dashboard/Dashboard.jsx","service-worker.js","index.js","serviceWorkerConfig.js","assets/sass/lbd/_variables.scss"],"names":["module","exports","__webpack_require__","p","defaultWidth","window","screen","width","style","Wrapper","Containers","DefaultStyle","position","padding","zIndex","WebkitBoxSizing","MozBoxSizing","boxSizing","height","display","border","fontSize","WebkitFontSmoothing","fontFamily","fontWeight","color","tl","top","bottom","left","right","tr","tc","margin","marginLeft","bl","br","bc","NotificationItem","cursor","borderRadius","opacity","transition","WebkitTransform","transform","willChange","isHidden","isVisible","success","borderTop","backgroundColor","WebkitBoxShadow","MozBoxShadow","boxShadow","error","warning","info","Title","marginTop","MessageWrapper","marginRight","maxWidthwidth","Dismiss","float","lineHeight","outline","textAlign","Action","background","ActionWrapper","thArray","tdArray","iconsArray","dataPie","labels","series","legendPie","names","types","dataSales","optionsSales","low","high","showArea","axisX","showGrid","lineSmooth","showLine","showPoint","fullWidth","chartPadding","responsiveSales","labelInterpolationFnc","value","legendSales","dataBar","optionsBar","seriesBarDistance","responsiveBar","legendBar","primaryColor","primaryTextColor","primarySideColor","secondaryColor","menuTextColor","customers","users","levelMonitoring","getTankReadingStartEndUri","tankId","from","to","getCustomersUri","getUsersUri","logList","AppLogger","msg","d","Date","log","getHours","slice","getMinutes","getSeconds","unshift","length","splice","usersList","UsersTable","pop","callBack","this","clearUsers","uri","axios","get","then","response","console","data","index","push","catch","userName","name","sort","a","b","customer","pass","role","callback","user","passwd","customer_id","post","_this","delete","readUsers","password","forceRead","LogInHelper","Object","classCallCheck","logOutStr","userKey","createClass","key","getUser","getLogedInUser","localStorage","setItem","getItem","e","Cookies","set","isLogIn","industries","liquids","sensors","dictionary","en","tankName","buildingName","volume","leftInTank","lastUpdate","capacity","liquid","sensorLength","sensor","tankLocation","tanksLocations","volumeHistory","Last 6H","Last 12H","Last 24H","Last 2 Days","Last Week","Select Range","Custom Range","latestData","selectEn","selectEs","logOut","customerName","mailAddress","addNewCustomer","add","cancel","update","addingNewUser","industry","Residential buildings","Commercial buildings","Hospitals","Hotels","Agriculture","Food and drinks","Oils and fuels","Emergency services","Utility service provider","water","diesel","fertilizer","levelAlert","heartbeat","Level OK","Level Below","Connected","Not Connected","es","getLang","lang","setLang","translate","text","translated","Component","appIsready","swVersion","isAppReady","getPrimaryColor","variables","getPrimaryTextColor","getMenuTextColor","getBackgroundColor","getPrimarySideColor","getFormattedTime","time","moment","utc","format","isMobile","test","navigator","userAgent","Card","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","colorStyle","props","react_default","createElement","className","plain","hCenter","title","category","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","content","legend","statsIcon","stats","tankList","TanksTable","getImeiFromUrl","str","search","imei","addTank","formState","customerId","postJson","iccid","liquid_type","sensor_type","heartbeat_timeout","sampling_interval","phone","building","level_alerts","getNewServer","updateTank","tank","put","getTankSettingsUri","deleteTank","url","customersId","tanks","getTank","split","readTanks","NotificationHelper","start","notifications","getLoggedInCustomerId","getCustomerTanks","tankIndex","getLevelNotificationsOnTank","map","notification","lowestAlert","alertIndex","status","at_level","alertObj","level","getHeartBeatNotificationForTank","heartbeat_ok","lastLevelMonitoring","numberOfTanks","lastReadingTime","TanksReading","getLastReadingTime","updateTankReadings","tt","getTankName","sample_level","actual_level","server_time","tank_time","range","request","responseURL","fromToLevelMonitoring","numberOfreadings","sorted","parseInt","tanksInfoReady","isLast","list","getCapacity","getLiquidType","toLowerCase","getSortReading","setClassParams","levelAlertView","alerts","alert","Alert","bsStyle","data-notify","heartBeatView","hearBeatAlerts","heartBeatAlert","customerList","CustomersTable","addCustomerToCustomers","id","getCustomer","mailingList","mailing_list","json","readCustomers","timeout","TankCard","call","state","asAlerts","startColor","endColor","textColor","tick","bind","assertThisInitialized","timer","setInterval","clearInterval","setState","substring","factor","parseFloat","innerHeight","radius","getRadiusFromHeight","fillColor","interpolateRgb","interpolate","gradientStops","stopColor","darker","toString","stopOpacity","offset","brighter","lib_default","percent","textSize","textOffsetX","textOffsetY","textRenderer","Math","round","min","textPixels","valueStyle","percentStyle","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","circleStyle","fill","waveStyle","textStyle","waveTextStyle","onClick","renderTank","renderTanks","readings","nh","reading","asAlert","titleColor","Col","xs","sm","Card_Card","renderTanksParams","App_TankCard","isTankFiltered","filterStr","getCustomerId","getCustomerName","isAdmin","renderTableRow","t1","t2","renderTableRowForAlert","levelAlerts","Table","striped","bordered","condensed","hover","renderFilterTanksCard","caller","md","FormControl","type","placeholder","onChange","target","RangeHelper","getFirstRangeInHours","rangesValues","getRanges","ranges","getRangeInHour","getSelectedString","getRangeForHourse","timeInHours","forClass","getReadingFromTo","rangeReady","getRangeFromTo","defaultProps","onHide","autoFocus","autoFocusEndDate","initialStartDate","initialEndDate","startDateId","START_DATE","startDatePlaceholderText","endDateId","endDatePlaceholderText","disabled","required","screenReaderInputMessage","showClearDates","showDefaultInputIcon","customInputIcon","customArrowIcon","customCloseIcon","block","small","regular","renderMonthText","orientation","VERTIVAL_ORIENTATION","anchorDirection","ANCHOR_LEFT","horizontalMargin","withPortal","withFullScreenPortal","initialVisibleMonth","numberOfMonths","keepOpenOnDateSelect","reopenPickerOnClearDates","isRTL","navPrev","navNext","onPrevMonthClick","onNextMonthClick","onClose","renderCalendarDay","undefined","renderDayContents","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","isDayHighlighted","displayFormat","localeData","longDateFormat","monthFormat","phrases","DateRangePickerPhrases","stateDateWrapper","date","DateRangePickerWrapper","getNumberOfMonth","innerWidth","handelClose","startDate","toDate","endDate","focusedInput","END_DATE","onDatesChange","onFocusChange","_ref","_this2","_this$state","omit","react_dates","assign","React","DateAndTimeModal","createTimeArray","timeArray","hour","hourStr","dateSelected","end","closeModal","startTime","endTime","quickSelection","Modal","bsSize","aria-labelledby","Header","closeButton","Body","DateAndTime","DropdownButton","onSelect","MenuItem","eventKey","Footer","Button","TanksSelection","tankSelected","selectedTankName","getSelectedTank","ButtonGroup","borderColor","RangeView","rangeSelected","rangeInHour","showDateAndTimeModal","hoursSelected","getDate","minutes","setHours","setMinutes","dateAndTimeModalClose","getTime","ButtonToolbar","TanksSelection_TanksSelection","Dashboard_DateAndTimeModal","show","VisGraph","getData","maxPoints","stayIndex","i","myFormatter","t","splitted","x","dy","yFormatter","getLegendItems","items","obj","colors","getxValues","tickTotal","dataLen","ret","firstX","hours","jumps","crosshairValues","legenItems","xValues","stroke","tickValues","tickFormat","line","ticks","size","v","strokeColor","xType","curve","graphFilteredTank","dataFilteredTank","setGraphFilteredTank","setDataFilteredTank","isFiltered","getTanks","getFilteredReadings","readingsData","toConsumableArray","Spinner","react_loader_spinner_default","Graph","componentWillUnmount","rh","graphReadings","rangeIndex","retArray","maxX","maxCapacity","current","tmpData","currentIndex","levels","times","y","fromDashboard","components_Card_Card","Spinner_Spinner","rangeReadingToGraphData","selectedRange","Dashboard_RangeView","VisGraph_VisGraph","ver","TableList","componentDidMount","Promise","all","ExcelTable","excelTableReady","getHeader","createData","arrayForExcel","arrayForPdf","arrayForTable","tanksNames","rangeReadings","sample","samples","vol","row","creatPdfDocDefinition","array","table","headerRows","widths","body","pageBreak","exportToPdf","exportOrPrint","pdfDocDefinition","docDefinition","compress","pdfMake","tableLayouts","exampleLayout","hLineWidth","node","vLineWidth","hLineColor","paddingLeft","paddingRight","createPdf","download","print","makePdf","renderExport","rangeButtons","default","button","header","overflowY","prop","overflow","Data","tableReadings","views_TableList_TableList","MapContainer","onMarkerClick","marker","selectedPlace","activeMarker","showingInfoWindow","onMouseOver","activeMarkerTitle","onMapClicked","renderMarkers","markers","dist","onMouseover","lat","lng","getCenter","ignore","div","convertGpsPosition","pos","latSign","lngSign","floor","style1","google","zoom","onReady","mapIsReady","initialCenter","visible","GoogleApiWrapper","apiKey","Locations","lastTanksReadings","getLevelMonitoring","renderInfo","getMarkers","gps","long","contentHeight","Map","Dashboard","fastTimer","tickToggle","getLastReading","tanksReadingReady","dataIsReady","fastTick","logInHelper","lm","renderAlerts","getRangeReadingOnce","Grid","fluid","Row","views_Graph_Graph","Location_Locations","views_Data_Data","CustomerForm","_React$Component","restCallBack","message","hideButtons","formMessage","deleteMail","tmpMailingList","addMail","validateMail","mailAddrees","createMailForm","mail","align","validatCustomer","updateCustomer","FormGroup","controlId","validationState","ControlLabel","componentClass","renderFormCustomerFiled","deleteCustomer","_this3","addnewCustomerText","createForm","renderButtons","UsersForm","settingMessage","validate","indexOf","validatPass","validatUser","renderFormUsersFiled","addNewUser","SettingsModal","TankForm","_React$Component2","updateSettingsTimeOut","showSettingsModal","settingsModalText","updateSettingsModal","textArray","addTankCallBack","succedded","simConfigurationIndex","configureThingDone","configureThing","setServerIp","updateTankCallBack","samplingIntervalChanged","liquidSelected","sensorSelected","renderIccdAndPhone","iccidPh","phoneNumberPh","switchSimConfig","getToken","UserName","Password","token","sendSemsToThing","config","headers","Authorization","Message","From","nextFunction","setServerIpDone","setProtocol","smsTimeOut","setProtocolDone","updateData","liquidTypeIndex","sensorTypeIndex","imeiPh","namePh","buildingPh","capacityPh","highPh","sampleIntervalPh","runTimer","simConfigurationTitle","validateString","validateForm","renderFormTitle","renderTankFileds","addNewTank","TankForm_SettingsModal","Customers","customerInfoReady","getCustomers","operationCallBack","editCustomer","showCustomersModal","selectedCustomer","getFilteredCustomers","showTankForm","showUsersModal","buttonStyle","whiteSpace","confirmText","confirm","concat","addUser","divider","_this4","item","renderManageCustomersButton","_this5","_this6","renderFilterCard","renderAddCustomrtButton","renderCustomers","CustomerForm_CustomerForm","closeCustomersModal","UsersForm_UsersForm","closeUsersModal","TankForm_TankForm","closeTankForm","AlertsForm","addAlert","statusMessage","alertId","subject","numberOfAlerts","updateAlerts","updateAlertsCallBack","getFormTitle","Tanks","tanksReady","editAlert","showAlerstForm","closeAlertsForm","renderManageTankButton","editTank","AlerstForm_AlertsForm","Users","usersReadyCallBack","usersTable","getUsers","renderActions","deleteUser","custeomrName","remove","renderUsers","Alerts","appIsredy","counter","renderAlertsTanks","showAlertsForm","renderAlertsAndEdit","levelNotification","hearBeatNotification","Logger","Icons","rel","href","lg","defaultValue","LogOut","location","reload","Redirect","dashboardRoutes","path","icon","component","Alerst","redirect","mobileSidebarToggle","sidebarExists","preventDefault","document","documentElement","classList","toggle","collapse","views","pathname","showLogo","Navbar","Toggle","src","logo","alt","getBrand","Sidebar","checkIfAppIsReady","appIsReady","routeName","updateDimensions","addEventListener","logInUser","data-color","upgrade","activeRoute","NavLink","activeClassName","LogIn","usersTableReady","showButton","showAlert","debugMessage","handleChange","loginAlert","logInAlert","_this$setState","defineProperty","handleHide","container","handleLogIn","indexRoutes","userTableReady","tanksTableReady","customersTableReady","allIsReady","dbReady","appDbReady","_notificationSystem","history","action","scrollTop","scrollingElement","refs","mainPanel","components_Sidebar_Sidebar","ref","components_Header_Header","Switch","Route","render","routeProps","handleClick","handleNotificationClick","login_LogIn","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","onUpdate","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","HashRouter","packageJson","version","getElementById","URL","process","origin","fetch","contentType","ready","unregister","checkValidServiceWorker","sw"],"mappings":"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BACA,eACA,YACA,eACA,mBACA,aACA,kBACA,aACA,mBACA,aACA,cACA,eACA,qBACA,iBACA,cACA,cACA,eACA,kBACA,eACA,iBACA,eACA,cACA,YACA,eACA,aACA,qBACA,aACA,cACA,kBACA,uBACA,YACA,qBACA,WACA,iBACA,mBACA,wBACA,cACA,oBACA,eACA,2BACA,cACA,mBACA,oBACA,0BACA,iBACA,mBACA,eACA,0BACA,iBACA,eACA,aACA,gBACA,gBACA,kBACA,cACA,aACA,eACA,eACA,iBACA,cACA,cACA,cACA,eACA,eACA,YACA,cACA,kBACA,aACA,gBACA,eACA,gBACA,gBACA,cACA,eACA,eACA,aACA,gBACA,aACA,eACA,eACA,gBACA,iBACA,sBACA,kBACA,cACA,cACA,cACA,gBACA,aACA,aACA,cACA,cACA,kBACA,cACA,aACA,mBACA,aACA,YACA,cACA,YACA,sBACA,YACA,cACA,aACA,YACA,oBACA,oBACA,oBACA,cACA,qBACA,iBACA,aACA,aACA,mBACA,kBACA,cACA,cACA,aACA,aACA,gBACA,cACA,aACA,YACA,mBACA,aACA,kBACA,uBACA,eACA,aACA,aACA,aACA,gBACA,aACA,aACA,cACA,aACA,eACA,aACA,aACA,aACA,cACA,cACA,eACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,eACA,aACA,eACA,aACA,gBACA,gBACA,aACA,aACA,eACA,iBACA,iBACA,iBACA,iBACA,aACA,YACA,gBACA,aACA,eACA,kBACA,eACA,gBACA,gBACA,eACA,cACA,cACA,cACA,aACA,aACA,eACA,aACA,mBACA,gBACA,aACA,aACA,kBACA,gBACA,aACA,gBACA,aACA,aACA,kBACA,eACA,eACA,cACA,iBAwHAC,QA/GY,CACZC,OAAQ,CAAC,MAAO,MAAO,OACvBC,OAAQ,CAAC,GAAI,GAAI,KA8GjBC,UA5Gc,CACdC,MAAO,CAAC,OAAQ,SAAU,eAC1BC,MAAO,CAAC,OAAQ,SAAU,YA2G1BC,UAvGc,CACdL,OAAQ,CA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","file":"static/js/main.7e6ca161.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/orbitBanner3000.3c0e7c7f.png\";","//\n// //\n// // // For notifications\n// //\n//\nvar defaultWidth =\n  window.screen.width > 768 ? window.screen.width * 1 / 3 : window.screen.width;\n\nvar style = {\n  Wrapper: {},\n  Containers: {\n    DefaultStyle: {\n      position: \"fixed\",\n      width: defaultWidth,\n      padding: \"10px 10px 10px 20px\",\n      zIndex: 9998,\n      WebkitBoxSizing: \"\",\n      MozBoxSizing: \"\",\n      boxSizing: \"\",\n      height: \"auto\",\n      display: \"inline-block\",\n      border: \"0\",\n      fontSize: \"14px\",\n      WebkitFontSmoothing: \"antialiased\",\n      fontFamily: '\"Roboto\",\"Helvetica Neue\",Arial,sans-serif',\n      fontWeight: \"400\",\n      color: \"#FFFFFF\"\n    },\n\n    tl: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    tr: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    tc: {\n      top: \"0px\",\n      bottom: \"auto\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    },\n\n    bl: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    br: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    bc: {\n      top: \"auto\",\n      bottom: \"0px\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    }\n  },\n\n  NotificationItem: {\n    DefaultStyle: {\n      position: \"relative\",\n      width: \"100%\",\n      cursor: \"pointer\",\n      borderRadius: \"4px\",\n      fontSize: \"14px\",\n      margin: \"10px 0 0\",\n      padding: \"10px\",\n      display: \"block\",\n      WebkitBoxSizing: \"border-box\",\n      MozBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      opacity: 0,\n      transition: \"all 0.5s ease-in-out\",\n      WebkitTransform: \"translate3d(0, 0, 0)\",\n      transform: \"translate3d(0, 0, 0)\",\n      willChange: \"transform, opacity\",\n\n      isHidden: {\n        opacity: 0\n      },\n\n      isVisible: {\n        opacity: 1\n      }\n    },\n\n    success: {\n      borderTop: 0,\n      backgroundColor: \"#a1e82c\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    error: {\n      borderTop: 0,\n      backgroundColor: \"#fc727a\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    warning: {\n      borderTop: 0,\n      backgroundColor: \"#ffbc67\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    info: {\n      borderTop: 0,\n      backgroundColor: \"#63d8f1\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    }\n  },\n\n  Title: {\n    DefaultStyle: {\n      fontSize: \"30px\",\n      margin: \"0\",\n      padding: 0,\n      fontWeight: \"bold\",\n      color: \"#FFFFFF\",\n      display: \"block\",\n      left: \"15px\",\n      position: \"absolute\",\n      top: \"50%\",\n      marginTop: \"-15px\"\n    }\n  },\n\n  MessageWrapper: {\n    DefaultStyle: {\n      marginLeft: \"55px\",\n      marginRight: \"30px\",\n      padding: \"0 12px 0 0\",\n      color: \"#FFFFFF\",\n      maxWidthwidth: \"89%\"\n    }\n  },\n\n  Dismiss: {\n    DefaultStyle: {\n      fontFamily: \"inherit\",\n      fontSize: \"21px\",\n      color: \"#000\",\n      float: \"right\",\n      position: \"absolute\",\n      right: \"10px\",\n      top: \"50%\",\n      marginTop: \"-13px\",\n      backgroundColor: \"#FFFFFF\",\n      display: \"block\",\n      borderRadius: \"50%\",\n      opacity: \".4\",\n      lineHeight: \"11px\",\n      width: \"25px\",\n      height: \"25px\",\n      outline: \"0 !important\",\n      textAlign: \"center\",\n      padding: \"6px 3px 3px 3px\",\n      fontWeight: \"300\",\n      marginLeft: \"65px\"\n    },\n\n    success: {\n      // color: '#f0f5ea',\n      // backgroundColor: '#a1e82c'\n    },\n\n    error: {\n      // color: '#f4e9e9',\n      // backgroundColor: '#fc727a'\n    },\n\n    warning: {\n      // color: '#f9f6f0',\n      // backgroundColor: '#ffbc67'\n    },\n\n    info: {\n      // color: '#e8f0f4',\n      // backgroundColor: '#63d8f1'\n    }\n  },\n\n  Action: {\n    DefaultStyle: {\n      background: \"#ffffff\",\n      borderRadius: \"2px\",\n      padding: \"6px 20px\",\n      fontWeight: \"bold\",\n      margin: \"10px 0 0 0\",\n      border: 0\n    },\n\n    success: {\n      backgroundColor: \"#a1e82c\",\n      color: \"#ffffff\"\n    },\n\n    error: {\n      backgroundColor: \"#fc727a\",\n      color: \"#ffffff\"\n    },\n\n    warning: {\n      backgroundColor: \"#ffbc67\",\n      color: \"#ffffff\"\n    },\n\n    info: {\n      backgroundColor: \"#63d8f1\",\n      color: \"#ffffff\"\n    }\n  },\n\n  ActionWrapper: {\n    DefaultStyle: {\n      margin: 0,\n      padding: 0\n    }\n  }\n};\n\n//\n// //\n// // // For tables\n// //\n//\nconst thArray = [\"ID\", \"Name\", \"Salary\", \"Country\", \"City\"];\nconst tdArray = [\n  [\"1\", \"Dakota Rice\", \"$36,738\", \"Niger\", \"Oud-Turnhout\"],\n  [\"2\", \"Minerva Hooper\", \"$23,789\", \"Curaçao\", \"Sinaai-Waas\"],\n  [\"3\", \"Sage Rodriguez\", \"$56,142\", \"Netherlands\", \"Baileux\"],\n  [\"4\", \"Philip Chaney\", \"$38,735\", \"Korea, South\", \"Overland Park\"],\n  [\"5\", \"Doris Greene\", \"$63,542\", \"Malawi\", \"Feldkirchen in Kärnten\"],\n  [\"6\", \"Mason Porter\", \"$78,615\", \"Chile\", \"Gloucester\"]\n];\n\n//\n// //\n// // // For icons\n// //\n//\nconst iconsArray = [\n  \"pe-7s-album\",\n  \"pe-7s-arc\",\n  \"pe-7s-back-2\",\n  \"pe-7s-bandaid\",\n  \"pe-7s-car\",\n  \"pe-7s-diamond\",\n  \"pe-7s-door-lock\",\n  \"pe-7s-eyedropper\",\n  \"pe-7s-female\",\n  \"pe-7s-gym\",\n  \"pe-7s-hammer\",\n  \"pe-7s-headphones\",\n  \"pe-7s-helm\",\n  \"pe-7s-hourglass\",\n  \"pe-7s-leaf\",\n  \"pe-7s-magic-wand\",\n  \"pe-7s-male\",\n  \"pe-7s-map-2\",\n  \"pe-7s-next-2\",\n  \"pe-7s-paint-bucket\",\n  \"pe-7s-pendrive\",\n  \"pe-7s-photo\",\n  \"pe-7s-piggy\",\n  \"pe-7s-plugin\",\n  \"pe-7s-refresh-2\",\n  \"pe-7s-rocket\",\n  \"pe-7s-settings\",\n  \"pe-7s-shield\",\n  \"pe-7s-smile\",\n  \"pe-7s-usb\",\n  \"pe-7s-vector\",\n  \"pe-7s-wine\",\n  \"pe-7s-cloud-upload\",\n  \"pe-7s-cash\",\n  \"pe-7s-close\",\n  \"pe-7s-bluetooth\",\n  \"pe-7s-cloud-download\",\n  \"pe-7s-way\",\n  \"pe-7s-close-circle\",\n  \"pe-7s-id\",\n  \"pe-7s-angle-up\",\n  \"pe-7s-wristwatch\",\n  \"pe-7s-angle-up-circle\",\n  \"pe-7s-world\",\n  \"pe-7s-angle-right\",\n  \"pe-7s-volume\",\n  \"pe-7s-angle-right-circle\",\n  \"pe-7s-users\",\n  \"pe-7s-angle-left\",\n  \"pe-7s-user-female\",\n  \"pe-7s-angle-left-circle\",\n  \"pe-7s-up-arrow\",\n  \"pe-7s-angle-down\",\n  \"pe-7s-switch\",\n  \"pe-7s-angle-down-circle\",\n  \"pe-7s-scissors\",\n  \"pe-7s-wallet\",\n  \"pe-7s-safe\",\n  \"pe-7s-volume2\",\n  \"pe-7s-volume1\",\n  \"pe-7s-voicemail\",\n  \"pe-7s-video\",\n  \"pe-7s-user\",\n  \"pe-7s-upload\",\n  \"pe-7s-unlock\",\n  \"pe-7s-umbrella\",\n  \"pe-7s-trash\",\n  \"pe-7s-tools\",\n  \"pe-7s-timer\",\n  \"pe-7s-ticket\",\n  \"pe-7s-target\",\n  \"pe-7s-sun\",\n  \"pe-7s-study\",\n  \"pe-7s-stopwatch\",\n  \"pe-7s-star\",\n  \"pe-7s-speaker\",\n  \"pe-7s-signal\",\n  \"pe-7s-shuffle\",\n  \"pe-7s-shopbag\",\n  \"pe-7s-share\",\n  \"pe-7s-server\",\n  \"pe-7s-search\",\n  \"pe-7s-film\",\n  \"pe-7s-science\",\n  \"pe-7s-disk\",\n  \"pe-7s-ribbon\",\n  \"pe-7s-repeat\",\n  \"pe-7s-refresh\",\n  \"pe-7s-add-user\",\n  \"pe-7s-refresh-cloud\",\n  \"pe-7s-paperclip\",\n  \"pe-7s-radio\",\n  \"pe-7s-note2\",\n  \"pe-7s-print\",\n  \"pe-7s-network\",\n  \"pe-7s-prev\",\n  \"pe-7s-mute\",\n  \"pe-7s-power\",\n  \"pe-7s-medal\",\n  \"pe-7s-portfolio\",\n  \"pe-7s-like2\",\n  \"pe-7s-plus\",\n  \"pe-7s-left-arrow\",\n  \"pe-7s-play\",\n  \"pe-7s-key\",\n  \"pe-7s-plane\",\n  \"pe-7s-joy\",\n  \"pe-7s-photo-gallery\",\n  \"pe-7s-pin\",\n  \"pe-7s-phone\",\n  \"pe-7s-plug\",\n  \"pe-7s-pen\",\n  \"pe-7s-right-arrow\",\n  \"pe-7s-paper-plane\",\n  \"pe-7s-delete-user\",\n  \"pe-7s-paint\",\n  \"pe-7s-bottom-arrow\",\n  \"pe-7s-notebook\",\n  \"pe-7s-note\",\n  \"pe-7s-next\",\n  \"pe-7s-news-paper\",\n  \"pe-7s-musiclist\",\n  \"pe-7s-music\",\n  \"pe-7s-mouse\",\n  \"pe-7s-more\",\n  \"pe-7s-moon\",\n  \"pe-7s-monitor\",\n  \"pe-7s-micro\",\n  \"pe-7s-menu\",\n  \"pe-7s-map\",\n  \"pe-7s-map-marker\",\n  \"pe-7s-mail\",\n  \"pe-7s-mail-open\",\n  \"pe-7s-mail-open-file\",\n  \"pe-7s-magnet\",\n  \"pe-7s-loop\",\n  \"pe-7s-look\",\n  \"pe-7s-lock\",\n  \"pe-7s-lintern\",\n  \"pe-7s-link\",\n  \"pe-7s-like\",\n  \"pe-7s-light\",\n  \"pe-7s-less\",\n  \"pe-7s-keypad\",\n  \"pe-7s-junk\",\n  \"pe-7s-info\",\n  \"pe-7s-home\",\n  \"pe-7s-help2\",\n  \"pe-7s-help1\",\n  \"pe-7s-graph3\",\n  \"pe-7s-graph2\",\n  \"pe-7s-graph1\",\n  \"pe-7s-graph\",\n  \"pe-7s-global\",\n  \"pe-7s-gleam\",\n  \"pe-7s-glasses\",\n  \"pe-7s-gift\",\n  \"pe-7s-folder\",\n  \"pe-7s-flag\",\n  \"pe-7s-filter\",\n  \"pe-7s-file\",\n  \"pe-7s-expand1\",\n  \"pe-7s-exapnd2\",\n  \"pe-7s-edit\",\n  \"pe-7s-drop\",\n  \"pe-7s-drawer\",\n  \"pe-7s-download\",\n  \"pe-7s-display2\",\n  \"pe-7s-display1\",\n  \"pe-7s-diskette\",\n  \"pe-7s-date\",\n  \"pe-7s-cup\",\n  \"pe-7s-culture\",\n  \"pe-7s-crop\",\n  \"pe-7s-credit\",\n  \"pe-7s-copy-file\",\n  \"pe-7s-config\",\n  \"pe-7s-compass\",\n  \"pe-7s-comment\",\n  \"pe-7s-coffee\",\n  \"pe-7s-cloud\",\n  \"pe-7s-clock\",\n  \"pe-7s-check\",\n  \"pe-7s-chat\",\n  \"pe-7s-cart\",\n  \"pe-7s-camera\",\n  \"pe-7s-call\",\n  \"pe-7s-calculator\",\n  \"pe-7s-browser\",\n  \"pe-7s-box2\",\n  \"pe-7s-box1\",\n  \"pe-7s-bookmarks\",\n  \"pe-7s-bicycle\",\n  \"pe-7s-bell\",\n  \"pe-7s-battery\",\n  \"pe-7s-ball\",\n  \"pe-7s-back\",\n  \"pe-7s-attention\",\n  \"pe-7s-anchor\",\n  \"pe-7s-albums\",\n  \"pe-7s-alarm\",\n  \"pe-7s-airplay\"\n];\n\n//\n// //\n// // // // For dashboard's charts\n// //\n//\n// Data for Pie Chart\nvar dataPie = {\n  labels: [\"40%\", \"20%\", \"40%\"],\n  series: [40, 20, 40]\n};\nvar legendPie = {\n  names: [\"Open\", \"Bounce\", \"Unsubscribe\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Line Chart\nvar dataSales = {\n  labels: [\n    \"9:00AM\",\n    \"12:00AM\",\n    \"3:00PM\",\n    \"6:00PM\",\n    \"9:00PM\",\n    \"12:00PM\",\n    \"3:00AM\",\n    \"6:00AM\"\n  ],\n  series: [\n    [80, 90, 100, 22, 33, 44, 88, 80],\n    [80, 88, 44, 33, 0, 99, 90, 80],\n    [22, 100, 80, 90, 44, 88, 80, 90]\n  ]\n};\nvar optionsSales = {\n  low: 0,\n  high: 100,\n  showArea: false,\n  height: \"245px\",\n  axisX: {\n    showGrid: false\n  },\n  lineSmooth: true,\n  showLine: true,\n  showPoint: true,\n  fullWidth: true,\n  chartPadding: {\n    right: 50\n  }\n};\nvar responsiveSales = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendSales = {\n  names: [\"Tank1\", \"Tank2\", \"Tank3\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Bar Chart\nvar dataBar = {\n  labels: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"Mai\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ],\n  series: [\n    [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895],\n    [412, 243, 280, 580, 453, 353, 300, 364, 368, 410, 636, 695]\n  ]\n};\nvar optionsBar = {\n  seriesBarDistance: 10,\n  axisX: {\n    showGrid: false\n  },\n  height: \"245px\"\n};\nvar responsiveBar = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      seriesBarDistance: 5,\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendBar = {\n  names: [\"Tesla Model S\", \"BMW 5 Series\"],\n  types: [\"info\", \"danger\"]\n};\n\nmodule.exports = {\n  style, // For notifications (App container and Notifications view)\n  thArray,\n  tdArray, // For tables (TableList view)\n  iconsArray, // For icons (Icons view)\n  dataPie,\n  legendPie,\n  dataSales,\n  optionsSales,\n  responsiveSales,\n  legendSales,\n  dataBar,\n  optionsBar,\n  responsiveBar,\n  legendBar // For charts (Dashboard view)\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor\":\"white\",\"primaryTextColor\":\"#165B7D\",\"primarySideColor\":\"#165B7D\",\"secondaryColor\":\"#e9f5ff\",\"menuTextColor\":\"#e3e2e2\",\"backgroundColor\":\"#e2e3e4\"};","const positionMonitoring = \"/positionMonitoring\";\n//const tanksSettings = \"/tanksSettings\";\nconst customers = \"/customers\";\nconst users = \"/users\";\nconst levelMonitoring = \"/tanklevels\";\n\nfunction getServer(){\n    let debug = false;\n\n    return debug === false ? \n        'https://euhpo9j3yi.execute-api.us-west-2.amazonaws.com/api/tanks' : \n        'http://localhost:3000';\n}\n\nfunction getNewServer(){\n    return 'https://jx7ltqwdt6.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://wv6wvd40zb.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://x98na0g8vl.execute-api.us-east-1.amazonaws.com/dev'\n}\n\nexport function getTankReadingUri(tankId,isLast){\n    if (tankId){\n        if (isLast){\n            return getNewServer() + levelMonitoring + \"/\" + tankId + \"?last=true\";\n        }\n        else{\n            return getNewServer() + levelMonitoring + \"/\" + tankId;\n        }\n    }\n    else\n        return getNewServer() + levelMonitoring;\n}\n\nexport function getTankReadingStartEndUri(tankId,from,to){\n    return getNewServer() + levelMonitoring + \"/\" + tankId + \"?from=\"+from + \"&to=\"+to;\n}\n\nexport function getCustomersUri(){\n    return getNewServer() + customers;\n}\n\nexport function getUsersUri(){\n    return getNewServer() + users;\n}\n\nexport function getCustomerUri(customer){\n    return getNewServer() + \"/customers/\" + customer;\n}\n\nexport function getPositionMonitoringUri(tankId){\n    return getServer() + positionMonitoring + \"/\" + tankId;\n}\n\nexport function getTankSettingsUri(){\n    return getNewServer() + \"/tanks\";\n}","let logList=[];\n\nexport const AppLogger = (msg) => {\n    var d = new Date();\n    d = ('0' + d.getHours()).slice(-2) + \":\" + ('0' + d.getMinutes()).slice(-2) + \":\" + ('0' + d.getSeconds()).slice(-2);\n    var log = d + \": \" + msg;\n    logList.unshift(log);\n    if (logList.length>500){\n        logList.splice(logList.length-1-20,20);\n    }\n    return (log);\n }\n\n export const AppLogerMessages = () => {\n    return logList;\n }\n","import axios from \"axios\";\nimport { getUsersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"../Logger\";\n\nlet usersList = [];\n\nexport default class UsersTable {\n    //static myInstance = null;\n\n    //static getInstance() {\n    //    if (UsersTable.myInstance == null) {\n    //        UsersTable.myInstance = new UsersTable();\n    //    }\n\n    //    return UsersTable.myInstance;\n    //}\n\n    //constructor() {\n    //    this.users = [];\n    //}\n\n    clearUsers() {\n        while (usersList.length > 0) {\n            usersList.pop();\n        }\n    }\n\n    readUsers(callBack) {\n        this.clearUsers();\n        let uri = getUsersUri();\n        axios\n            .get(uri)\n            .then(response => {\n                console.log(AppLogger( \"Got users list - \" + response.data.length + \"\"));\n                for (let index = 0; index < response.data.length; index++) {\n                    usersList.push(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    getUser(userName) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                return usersList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getUsers() {\n        return usersList.sort((a,b)=>a.customer>b.customer?1:0);\n    }\n\n    add(userName, pass, customer, role, callback) {\n        //check if the user already exist\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                callback && callback(\"user name already exist in the system\");\n                return;\n            }\n        }\n\n        let user = { \"name\": userName, \"passwd\": pass, \"customer_id\": customer, \"role\": role };\n        let uri = getUsersUri();\n        axios\n            .post(uri, user)\n            .then(response => {\n                console.log(AppLogger( \"User added successfully\"));\n                //                this.readUsers(null);\n                callback && callback(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callback && callback(\"Failed to add user\");\n            }\n            );\n    }\n\n    remove(userName, callback) {\n        let uri = getUsersUri() + '/' + userName;\n        axios\n            .delete(uri)\n            .then(response => {\n                console.log(AppLogger( \"deleting user successfully\"));\n                this.readUsers(callback);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callback && callback();\n            }\n            );\n    }\n\n    update(userName, pass) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName.name) {\n                usersList[index].password = pass;\n                return;\n            }\n        }\n    }\n\n    start(callBack, forceRead) {\n\n        if (forceRead || usersList.length === 0) {\n            console.log(AppLogger( \"start - reading users\"));\n            this.readUsers(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import { Cookies } from 'react-cookie';\nimport UsersTable from './db/UsersTable';\n\nexport class LogInHelper {\n\n    constructor() {\n        this.logOutStr = 'logedOut';\n        this.userKey = 'user';\n    }\n\n    isAdmin() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user && user.role === 'admin') {\n            return true;\n        }\n\n        return false;\n    }\n\n    getLogedInUser() {\n        let user = \"\";\n        try{\n            // test local storage\n            window.localStorage.setItem(\"just\",\"just\");\n            user = window.localStorage.getItem(this.userKey);\n        }\n        catch(e){\n            let cookie = new Cookies();\n            user = cookie.get(this.userKey);\n        }\n\n\n        if (user && user !== this.logOutStr) {\n            return user;\n        }\n        return \"\";\n    }\n\n    isLogIn() {\n        let user = \"\";\n        try {\n            // test local storage\n            window.localStorage.setItem(\"just\",\"just\");\n            console.log(\"isLogIn getting user from local storage\");\n            user = window.localStorage.getItem(this.userKey);\n        }\n        catch (e){\n            console.log(\"isLogIn getting user from cookies\");\n            let cookie = new Cookies();\n            user = cookie.get(this.userKey);\n        }\n        console.log(\"isLogIn user is \" + user);\n\n        if (user && user !== this.logOutStr) {\n            return true;\n        }\n        return false;\n    }\n\n    logOut() {\n        try {\n            window.localStorage.setItem(this.userKey, this.logOutStr);\n        }\n        catch (e){\n            let cookie = new Cookies();\n            cookie.set(this.userKey, this.logOutStr);\n        }\n    }\n\n    getLoggedInCustomerId() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user) {\n            return user.customer_id;\n        }\n        else if (this.isLogIn()) {\n            return \"admin\";\n        }\n        else {\n            return \"\";\n        }\n    }\n}\n\nexport default LogInHelper;","export const industries = ['Residential buildings', 'Commercial buildings', 'Hospitals', 'Hotels', 'Agriculture', 'Food and drinks', 'Oils and fuels', 'Emergency services', 'Utility service provider'];\nexport const liquids = ['water', 'diesel', 'fertilizer'];\nexport const sensors = [3, 4, 5, 6, 7, 8, 9, 10];\n\nexport const dictionary = {\n    'en': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last Update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'Sensor',\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n        // Tank properties\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n\n        'selectEn': 'en - English',\n        'selectEs': 'es - Spanish',\n        'logOut': 'Log Out',\n        'customerName': 'Customer Name',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Add New Customer',\n        'add': 'Add',\n        'cancel': 'Cancel',\n        'update': 'Update',\n        'delete': 'Delete',\n        'addingNewUser': 'Adding New User',\n        // industries\n        'industry': 'Industry',\n        'Residential buildings': 'Residential buildings',\n        'Commercial buildings': 'Commercial buildings',\n        'Hospitals': 'Hospitals',\n        'Hotels': 'Hotels',\n        'Agriculture': 'Agriculture',\n        'Food and drinks': 'Food and drinks',\n        'Oils and fuels': 'Oils and fuels',\n        'Emergency services': 'Emergency services',\n        'Utility service provider': 'Utility service provider',\n        // liquid types\n        'water': 'Water',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizer',\n\n        // alerts and heartbeat\n        \"levelAlert\" : \"Level Alert\",\n        \"heartbeat\" : \"Device Health\",\n        \"Level OK\" : \"Level OK\",\n        \"Level Below\" : \"Level Below\",\n        \"Connected\" : \"Connected\",\n        \"Not Connected\" : \"Not Connected\",\n    },\n    'es': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'La Sensora',\n        // Tank properties\n\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n        'selectEn': 'en - Inglés',\n        'selectEs': 'es - Español',\n        'logOut': 'Cerrar sesión',\n        'customerName': 'Nombre del cliente',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Agregar nuevo cliente',\n        'add': 'Añadir',\n        'cancel': 'Cancelar',\n        'update': 'Actualización',\n        'delete': 'Borrar',\n        'addingNewUser': 'Agregando nuevo usuario',\n        // industries\n        'industry': 'Industria',\n        'Residential buildings': 'Edificios residenciales',\n        'Commercial buildings': 'Edificios comerciales',\n        'Hospitals': 'Hospitales',\n        'Hotels': 'Hoteles',\n        'Agriculture': 'Agricultura',\n        'Food and drinks': 'Alimentos y bebidas',\n        'Oils and fuels': 'Aceites y combustibles',\n        'Emergency services': 'Servicios de emergencia',\n        'Utility service provider': 'Proveedor de servicios públicos',\n        // liquid\n        'water': 'Agua',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizante',\n\n    }\n}\n\n","import { Cookies } from 'react-cookie';\nimport { dictionary } from 'app/lang/dic.js';\n\nconst langKey = 'lang';\n\nexport const getLang = () => {\n    let lang = null;\n    try {\n        // test local storage\n        window.localStorage.setItem(\"just\", \"just\");\n        window.localStorage.getItem(langKey);\n    }\n    catch (e) {\n        let cookie = new Cookies();\n        lang = cookie.get(langKey);\n    }\n\n    if (lang && (lang !== 'en' || lang !== 'es')) {\n        return lang;\n    }\n    return 'en';\n}\n\nexport const setLang = (lang) => {\n    try {\n        window.localStorage.setItem(langKey, lang);\n    }\n    catch (e) {\n        let cookie = new Cookies();\n        cookie.set(langKey, lang);\n    }\n}\n\nexport const translate = (text) => {\n    let translated = dictionary[getLang()][text];\n    if (translated) {\n        return translated\n    }\n    else {\n        return text + ' not fond in dic';\n    }\n}\n","import React, { Component } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { getLang, setLang } from '../../app/lang/lang.js'\nclass HeaderLinks extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lang: getLang() };\n  }\n\n  handleLogOut = () => {\n    let logIn = new LogInHelper();\n    logIn.logOut();\n    window.location.reload();\n  }\n\n  selectLang = (lang) => {\n    setLang(lang);\n    this.setState({ lang: lang });\n  }\n\n  render() {\n/*\n    let notificationList = new NotificationHelper().get();\n    const notification = (\n      <div style={{color:'with'}}>\n        <i className=\"fa fa-globe\" />\n        <b className=\"caret\" />\n        <span className=\"notification\">{notificationList.length !== 0 ? notificationList.length:\"\"}</span>\n        <p>Notification</p>\n      </div>\n    );\n*/\n    return (\n      <div>\n        <Nav>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            <i className=\"fa fa-dashboard\" />\n            <p className=\"hidden-lg hidden-md\">Dashboard</p>\n          </NavItem>\n          \n          \n          <NavDropdown\n            eventKey={2}\n            title={notification}\n            noCaret\n            id=\"basic-nav-dropdown\"\n          >\n            <MenuItem eventKey={2.1}>Notification 1</MenuItem>\n            <MenuItem eventKey={2.2}>Notification 2</MenuItem>\n            <MenuItem eventKey={2.3}>Notification 3</MenuItem>\n            <MenuItem eventKey={2.4}>Notification 4</MenuItem>\n            <MenuItem eventKey={2.5}>Another notifications</MenuItem>\n          </NavDropdown>\n          */\n          /*\n          <NavItem eventKey={3} href=\"#\">\n            <i className=\"fa fa-search\" />\n            <p className=\"hidden-lg hidden-md\">Search</p>\n          </NavItem>\n          */}\n        </Nav>\n        <Nav pullRight>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            Account\n          </NavItem>\n          \n            <NavDropdown\n              eventKey={2}\n              title={<div style={{color:'white'}}>{this.state.lang}</div>}\n              id=\"basic-nav-dropdown-right\"\n            >\n              <MenuItem eventKey={2.1} onClick={() => this.selectLang('en')}>{translate('selectEn')}</MenuItem>\n              <MenuItem eventKey={2.2} onClick={() => this.selectLang('es')}>{translate('selectEs')}</MenuItem>\n            </NavDropdown>*/\n          }\n          {/* \n          <NavItem eventKey={2} href=\"#\">\n            <div style={{color:'white'}}>{getVersion()}</div>\n          </NavItem>          \n          <NavItem eventKey={3} href=\"#\" onClick={() => this.handleLogOut()}>\n            <div style={{color:'white'}}>{translate('logOut')}</div>\n          </NavItem>\n          */}\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default HeaderLinks;\n","import moment from 'moment'\nimport variables from '../assets/sass/lbd/_variables.scss'\nlet appIsready = false;\nlet swVersion = \"not set\";\n\nexport function getVersion(){\n    return swVersion;\n}\nexport function setVersion(ver){\n    swVersion = ver;\n}\n\nexport function appIsReady(ready){\n    appIsready = ready;\n}\n\nexport function isAppReady(){\n    return appIsready;\n}\n\nexport function getPrimaryColor() {\n    return variables.primaryColor;\n}\n\nexport function getPrimaryTextColor(){\n    return variables.primaryTextColor;\n}\n\nexport function getMenuTextColor(){\n    return variables.menuTextColor;\n}\n\nexport function getBackgroundColor(){\n    return variables.backgroundColor;\n}\n\nexport function getPrimarySideColor(){\n    return variables.primarySideColor;\n}\n\nexport function getPrimaryColorStyle() {\n    return { color: getPrimaryColor() };\n}\n\nexport function getFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('MM/DD-HH:mm');\n}\nexport function getDetailedFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('hh:mm a Do of MMMM YYYY');\n}\n\nexport function isMobile() { \n    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nexport function isIos(){\n    if( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n        return true;\n    }\n    else{\n        return false;\n    }}","import React, { Component } from \"react\";\n\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nexport class Card extends Component {\n  render() {\n    let colorStyle = {color:getPrimaryTextColor()};\n    if (this.props.color){\n      colorStyle = {color:this.props.color};\n    }\n    return (\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")} >\n          <h4 className=\"title\" style={colorStyle}><u><b>{this.props.title}</b></u></h4>\n          <p className=\"category\" style={colorStyle}>{this.props.category}</p>\n        </div>\n        <div\n          className={\n            \"content\" +\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\n          }\n        >\n          {this.props.content}\n\n          {/*<div className=\"footer\">*/}\n          <div>\n            {this.props.legend}\n            {/*this.props.stats != null ? <hr /> : \"\"*/}\n            <div className=\"stats\">\n              <i className={this.props.statsIcon} style={colorStyle}/> \n                <div style={colorStyle}>&nbsp;{this.props.stats}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import axios from \"axios\";\nimport { getTankSettingsUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n\nlet tankList = [];\n\nexport default class TanksTable {\n\n    getTanks() {\n        return tankList;\n    }\n\n    getCustomerTanks(customersId) {\n        let debug = false;\n        let tanks = [];\n        for (let index in tankList) {\n            if (tankList[index].customer === customersId ||\n                customersId === \"admin\") {\n                tanks.push(tankList[index]);\n                if (debug === true) {\n                    break;\n                }\n            }\n        }\n\n        return tanks;\n    }\n\n    getTank(imei) {\n        for (let index in tankList) {\n            if (tankList[index].imei === imei) {\n                return tankList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getImeiFromUrl = (str) => {\n        for (let index in tankList) {\n            if (str.search(tankList[index].imei) !== -1) {\n                return tankList[index].imei;\n            }\n        }\n\n        return null;\n    }\n\n    getTankName(imei) {\n        return this.getTank(imei).name;\n    }\n\n    getCustomerId(imei) {\n        return this.getTank(imei).customer;\n    }\n\n    getCapacity(imei) {\n        return this.getTank(imei).capacity;\n    }\n\n    getLiquidType(imei){\n        return this.getTank(imei).liquid_type;\n    }\n\n\n    hasTanks(customerId) {\n        for (let index in tankList) {\n            if (tankList[index].customer === customerId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    addTank = (callBack, formState, customerId) => {\n        let postJson = {\n            'imei': formState.imei,\n            'customer': customerId,\n            'iccid': formState.iccid,\n            'liquid_type': formState.liquid_type,\n            'capacity': formState.capacity,\n            'high': formState.high,\n            'sensor_type':formState.sensor_type,\n            'heartbeat_timeout': formState.heartbeat_timeout,\n            'sampling_interval': formState.sampling_interval,\n            'phone': formState.phone,\n            'name': formState.name + '--building--' + formState.building,\n            'level_alerts': formState.level_alerts\n        };\n\n        axios.post(getTankSettingsUri(), postJson).then(response => {\n            console.log(AppLogger( \"adding new tank succedded\"));\n            callBack && callBack(true);\n        }).catch(error => {\n            console.log(AppLogger( error));\n            callBack && callBack(false);\n        });\n    }\n\n    updateTank = (callBack, tank, customerId) => {\n        let postJson = {\n            'imei': tank.imei,\n            'customer': customerId,\n            'iccid': tank.iccid,\n            'liquid_type': tank.liquid_type,\n            'capacity': tank.capacity,\n            'high': tank.high,\n            'sensor_type':tank.sensor_type,\n            'heartbeat_timeout': tank.heartbeat_timeout,\n            'sampling_interval': tank.sampling_interval,\n            'phone': tank.phone,\n            'name': tank.name + '--building--' + tank.building,\n            'level_alerts': tank.level_alerts\n        };\n\n        axios.put(getTankSettingsUri() + \"/\" + tank.imei, postJson).then(response => {\n            console.log(AppLogger(\"updating tank succedded\"));\n            callBack && callBack(true);\n        }).catch(error => {\n            console.log(AppLogger( error));\n            callBack && callBack(false);\n        }\n        );\n    }\n\n    deleteTank = (imei, callBack) => {\n        let url = getTankSettingsUri() + \"/\" + imei;\n        console.log(AppLogger( \"deleteTank \" + url));\n\n        axios\n            .delete(url)\n            .then(response => {\n                console.log(AppLogger(\"deleting tank succedded\"));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    readTanks(callBack) {\n        let uri = getTankSettingsUri();\n        console.log(AppLogger( \"readTanks \" + uri));\n        axios.get(uri)\n            .then(response => {\n                tankList = response.data;\n                //update building\n                for (let index in tankList){\n                    let names = tankList[index].name.split(\"--building--\");\n                    if (names.length === 1){\n                        tankList[index].building = '';\n                    }\n                    else{\n                        tankList[index].name = names[0];\n                        tankList[index].building = names[1];\n                    }\n                }\n                console.log(AppLogger( \"Got tanks list - \" + tankList.length));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    start(callBack, forceRead) {\n\n        if (forceRead || tankList.length === 0) {\n            console.log(AppLogger( \"Start Reading Tanks\"));\n            tankList = [];\n            this.readTanks(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport class StatsCard extends Component {\n  render() {\n    return (\n      <div className=\"card card-stats\">\n        <div className=\"content\">\n          <Row>\n            <Col xs={12}>\n              <div className=\"numbers\">\n                <center>\n                  {this.props.bigIcon}\n                  {this.props.statsText}\n                </center>\n              </div>\n              <div>\n                {this.props.statsValue}\n              </div>\n\n            </Col>\n          </Row>\n          <div className=\"footer\">\n            <hr />\n            <div className=\"stats\">\n              {this.props.statsIcon} {this.props.statsIconText}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatsCard;\n","import TanksTable from \"./db/TanksTable\";\nimport { LogInHelper } from \"./logInHelper\";\n\nexport default class NotificationHelper {\n\n    constructor() {\n        new TanksTable().start(null, false);\n    }\n\n    getLevelNotifications() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getLevelNotificationsOnTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getLevelNotificationsOnTank(tank){\n        let notifications = [];\n        let lowestAlert = 100;\n        for (let alertIndex in tank.level_alerts) {\n            let level_alerts = tank.level_alerts[alertIndex];\n            if (level_alerts.status === 'on') {\n                if (lowestAlert > level_alerts.at_level){\n                    lowestAlert = level_alerts.at_level;\n                }\n                //let alertObj = { name: tank.name, level: level_alerts.at_level }\n                //notifications.push(alertObj);\n            }\n        }\n\n        if (lowestAlert !== 100){\n            let alertObj = { name: tank.name, level: lowestAlert }\n            notifications.push(alertObj);\n        }\n        \n        return notifications;\n    }\n\n    getHeartBeatNotification() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getHeartBeatNotificationForTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getHeartBeatNotificationForTank(tank){\n        let notifications = [];\n        if (tank.heartbeat_ok !== true){\n            notifications.push({ name: tank.name });\n        }\n        return notifications;\n    }\n\n}","import axios from \"axios\";\nimport { getTankReadingUri, getTankReadingStartEndUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\nimport TanksTable from \"app/db/TanksTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nlet lastLevelMonitoring = [];\nlet numberOfTanks = 0;\nlet lastReadingTime = 0;\n\nexport default class TanksReading {\n\n    constructor() {\n        this.customer = null;\n        this.callBack = null;\n    }\n\n    getLastReadingTime = () => {\n        return lastReadingTime;\n    }\n\n    getSortReading(list, category) {\n        let tt = new TanksTable();\n        if (category === \"name\") {\n            return list.sort((a, b) =>\n                tt.getTankName(a.imei) > tt.getTankName(b.imei) ? 1 : -1);\n        }\n        else if (category === \"capacity\") {\n            return list.sort((a, b) =>\n                tt.getCapacity(a.imei) > tt.getCapacity(b.imei) ? 1 : -1);\n        }\n        else if (category === \"liquid_type\") {\n            return list.sort((a, b) =>\n                tt.getLiquidType(a.imei).toLowerCase() > tt.getLiquidType(b.imei).toLowerCase() ? 1 : -1);\n        }\n        else {\n            return null;\n        }\n    }\n\n    getLevelMonitoring(category) {\n        return this.getSortReading(lastLevelMonitoring, category);\n    }\n\n    getLevelMonitoringForTank(imei) {\n        let index = 0;\n        for (index in lastLevelMonitoring) {\n            if (lastLevelMonitoring[index].imei === imei) {\n                return lastLevelMonitoring[index];\n            }\n        }\n        return null;\n    }\n\n    updateTankReadings = (data) => {\n        if (data !== null) {\n            if (this.from === null) {\n                let tt = new TanksTable();\n                console.log(AppLogger( \"Readings from \" + tt.getTankName(data.data.imei)));\n                console.log(AppLogger( \"Sample \" + data.data.sample_level + \" Actual \" + data.data.actual_level +\n                    \" IMEI \" + data.data.imei + \" server time \" + data.data.server_time + \" tank time \" + data.data.tank_time));\n                lastLevelMonitoring.push(data.data);\n                if (lastReadingTime < data.data.server_time) {\n                    lastReadingTime = data.data.server_time;\n                }\n            }\n            else {\n                let range = data.data;\n                range['imei'] = new TanksTable().getImeiFromUrl(data.request.responseURL);\n                this.fromToLevelMonitoring.push(range);\n            }\n        }\n        this.numberOfreadings += 1;\n        // call after all reading done\n        if (numberOfTanks === this.numberOfreadings) {\n            //console.log(AppLogger( \"calling callback\");\n            if (this.from === null) {\n                this.callBack && this.callBack();\n            }\n            else {\n                let sorted = this.fromToLevelMonitoring.sort((a, b) => parseInt(a.imei, 16) - parseInt(b.imei, 16));\n                this.callBack && this.callBack(sorted);\n            }\n        }\n    }\n\n    tanksInfoReady = () => {\n        let tanks = new TanksTable().getCustomerTanks(this.customer);\n        numberOfTanks = tanks.length;\n        this.numberOfreadings = 0;\n\n        for (let index in tanks) {\n            let uri = getTankReadingUri(tanks[index].imei, true);\n            if (this.from != null && this.to != null && this.tank != null) {\n                numberOfTanks=1;\n                if (this.tank.imei === tanks[index].imei) { // get the readings only for the selected tank\n                    uri = getTankReadingStartEndUri(tanks[index].imei, this.from, this.to);\n                }\n                else{\n                    continue;\n                }\n            }\n            console.log(AppLogger( \"level monitoring uri = \" + uri));\n            axios\n                .get(uri)\n                .then(response => this.updateTankReadings(response))\n                .catch(error => {\n                    console.log(AppLogger( \"TanksReadings \" + error));\n                    this.updateTankReadings(null);\n                });\n        }\n    }\n\n    setClassParams(callBack, from, to, tank) {\n        this.callBack = callBack;\n        this.from = from;\n        this.to = to;\n        this.customer = new LogInHelper().getLoggedInCustomerId();\n        this.tank = tank\n        let tt = new TanksTable();\n        tt.start(this.tanksInfoReady, false);\n    }\n\n    getLastReading(callBack) {\n        console.log(AppLogger( \"Asking for last readings\"));\n        lastLevelMonitoring = [];\n        this.setClassParams(callBack, null, null, null);\n    }\n\n    getReadingFromTo(callBack, from, to, tank) {\n        console.log(AppLogger( \"getReadingFromTo \" + from  + \" \" + to));\n        this.fromToLevelMonitoring = [];\n        this.setClassParams(callBack, from, to, tank);\n    }\n}","import React from 'react';\nimport { Alert } from \"react-bootstrap\";\n\nexport function levelAlertView(alerts) {\n    if (alerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {alerts.map((alert, index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Level is below {alert.level}% on Tank: <q>{alert.name}</q></span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>\n    )\n}\n\nexport function heartBeatView(hearBeatAlerts) {\n    if (hearBeatAlerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {hearBeatAlerts.map((heartBeatAlert,index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Tank: <q>{heartBeatAlert.name}</q> is not responding</span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>)\n}\n","import axios from \"axios\";\nimport { getCustomersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n//import { LogInHelper } from \"app/logInHelper\";\n\nlet customerList = [];\n\nexport default class CustomersTable {\n\n    getCustomers() {\n        return customerList.sort((a, b) =>\n            a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0);\n    }\n/*\n    getCustomersIds() {\n        let customersNames = [];\n        let customer = new LogInHelper().getLoggedInCustomer();\n        if (customer === 'admin') { // get all customers\n            for (let index in customerList) {\n                customersNames.push(customerList[index].id);\n            }\n        }\n        else {\n            for (let index in customerList) {\n                if (customerList[index].name === customer) {\n                    customersNames.push(customerList[index].id);\n                    break;\n                }\n            }\n        }\n\n        return customersNames;\n    }\n*/\n    getCustomer(customerId) {\n        for (let index in customerList) {\n            if (customerList[index].id === customerId) {\n                return customerList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getCustomerName(customerId) {\n        let customer = this.getCustomer(customerId);\n        if (customer !== null){\n            return customer.name;\n        }\n        else{\n            return \"\";\n        }\n    }\n\n    addCustomerToCustomers = (customer) =>{\n        // check if the customer is in the table\n        for (let index in customerList){\n            if (customerList[index].name === customer.name){\n                return;\n            }\n        }\n        \n        customerList.push(customer);\n\n    }\n\n    readCustomers(callBack) {\n        let uri = getCustomersUri();\n        console.log(AppLogger( \"Customers \" + uri));\n        axios\n            .get(uri)\n            .then(response => {\n                console.log(AppLogger( \"Got customers list \" + response.data.length));\n                for (let index = 0; index < response.data.length; index++) {\n                    this.addCustomerToCustomers(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    addNewCustomer(name, industry, mailingList, callBack) {\n        console.log(AppLogger( \"add new customer \" + name));\n\n        // check if name is in the list\n        for (let index in customerList) {\n            if (customerList[index].name.toLowerCase() === name.toLowerCase()) {\n                callBack && callBack(\"Customer \" + name + \" already exist\");\n                return;\n            }\n        }\n\n        axios.post(getCustomersUri(),\n            { \"name\": name, \"industry\": industry, \"mailing_list\": mailingList })\n            .then(response => {\n                console.log(AppLogger(\"adding new customer succedded\"));\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callBack && callBack(\"failed to create new customer\");\n            });\n    }\n\n    updateCustomer(customer,callBack) {\n        let url = getCustomersUri() + \"/\" + customer.id;\n        console.log(AppLogger( \"updating customer \" + url));\n\n        let json = { \"name\": customer.name, \"industry\": customer.industry, \"mailing_list\": customer.mailing_list };\n\n        axios\n            .put(url,json)\n            .then(response => {\n                console.log(AppLogger( \"updating customer succedded\"));\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callBack && callBack(\"failed to create update customer\");\n            });\n    }\n\n    deleteCustomer(id, callBack) {\n        let url = getCustomersUri() + \"/\" + id;\n        console.log(AppLogger( \"deleteCustomer \" + url));\n\n        axios\n            .delete(url)\n            .then(response => {\n                console.log(AppLogger( \"deleting customer succedded\"));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    start(callBack, forceRead) {\n        if (forceRead || customerList.length === 0) {\n            console.log(AppLogger(\"start reading customers\"));\n            customerList = [];\n            this.readCustomers(callBack);\n        }\n        else {\n            callBack && callBack(); \n        }\n    }\n}","import React, { Component } from \"react\";\nimport { interpolateRgb } from 'd3-interpolate';\nimport LiquidFillGauge from 'react-liquid-gauge';\nimport { color } from 'd3-color';\n\nconst timeout = 5;\nexport class TankCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n\n    if (this.props.asAlerts===false){\n\n      let tankColor = '#00A4D5';\n      this.startColor = tankColor;\n      this.endColor =tankColor;\n      this.textColor = tankColor;\n    }\n    else{\n      this.startColor = 'red';\n      this.endColor = 'red';\n      this.textColor = 'red';\n    }\n\n    this.tick = this.tick.bind(this);\n\n    this.timeout = timeout;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  tick() {\n    this.timeout -= 1;\n    if (this.timeout === 0) {\n      this.setState({ value: 0 });\n    }\n\n    if (this.timeout === -1) {\n      this.timeout = timeout;\n      this.setState({ value: this.props.value });\n    }\n  }\n\n  getTankName() {\n    if (this.props.tank) {\n      return this.props.tank.name;\n    }\n\n    return null;\n  }\n\n  getRadiusFromHeight1() {\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    let factor = 3.5;\n    if (window.screen.width <= 330) {\n      factor = 2.2;\n    }\n    else if (window.screen.width <= 360) {\n      factor = 2.8;\n    }\n    else if (window.screen.width <= 375) {\n      factor = 2.7;\n    }\n\n    let retVal = parseFloat(height, 10) * factor\n    //console.log(AppLogger('retVal =' + retVal);\n    return retVal;\n  }\n\n  getRadiusFromHeight() {\n    //console.log(AppLogger('width  = ' + window.innerWidth);\n    //console.log(AppLogger('Height = ' + window.innerHeight);\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    //console.log(AppLogger('height ' + height);\n    //console.log(AppLogger('innerHeight ' + window.innerHeight);\n    return window.innerHeight * height / 350;\n\n    //if (window.innerWidth <= 375){\n    //  return 100;\n    // }\n    // else{\n    //   return 140;\n    // }\n  }\n\n  renderTank() {\n    const radius = this.getRadiusFromHeight();\n    //const radius = 150;\n    const interpolate = interpolateRgb(this.startColor, this.endColor);\n    const fillColor = interpolate(this.state.value / 100);\n    const gradientStops = [\n      {\n        key: '0%',\n        stopColor: color(fillColor).darker(0.5).toString(),\n        stopOpacity: 1,\n        offset: '0%'\n      },\n      {\n        key: '50%',\n        stopColor: fillColor,\n        stopOpacity: 0.75,\n        offset: '50%'\n      },\n      {\n        key: '100%',\n        stopColor: color(fillColor).brighter(0.5).toString(),\n        stopOpacity: 0.5,\n        offset: '100%'\n      }\n    ];\n\n    return (\n      <div>\n        <LiquidFillGauge\n          style={{ margin: '0 auto'/*,height:this.props.height*/ }}\n          width={radius * 2}\n          height={radius * 2}\n          value={this.state.value}\n          percent=\"%\"\n          textSize={1}\n          textOffsetX={0}\n          textOffsetY={0}\n          textRenderer={(props) => {\n            const value = Math.round(props.value);\n            const radius = Math.min(props.height / 2, props.width / 2);\n            const textPixels = (props.textSize * radius / 2);\n            const valueStyle = {\n              fontSize: textPixels\n            };\n            const percentStyle = {\n              fontSize: textPixels * 0.6\n            };\n\n            return (\n              <tspan>\n                <tspan className=\"value\" style={valueStyle}>{value}</tspan>\n                <tspan style={percentStyle}>{props.percent}</tspan>\n              </tspan>\n            );\n          }}\n          riseAnimation\n          waveAnimation\n          waveFrequency={1}\n          waveAmplitude={4}\n          gradient\n          gradientStops={gradientStops}\n          circleStyle={{\n            fill: fillColor\n          }}\n          waveStyle={{\n            fill: fillColor\n          }}\n          textStyle={{\n            fill: this.textColor,\n            fontFamily: 'Arial'\n          }}\n          waveTextStyle={{\n            fill: color('#fff').toString(),\n            fontFamily: 'Arial'\n          }}\n          onClick={() => {\n            //this.setState({ value: Math.random() * 100 });\n          }}\n        />\n        <center><h3 style={{color:this.startColor}}><b>{this.props.volume}</b></h3></center>\n      </div>);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderTank()}\n      </div>\n    );\n  }\n};\n\nexport default TankCard;\n","import React from 'react';\n\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport CustomersTable from \"../../app/db/CustomersTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { translate } from \"../../app/lang/lang\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport { getDetailedFormattedTime } from \"app/adminHelper.jsx\"\nimport { Col, FormControl, Table } from \"react-bootstrap\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { getPrimaryTextColor } from '../../app/adminHelper.jsx';\n\nexport function renderTanks(readings) {\n    let width = 6;\n    if (readings.length === 1){\n        width = 12;\n    }\n    let nh = new NotificationHelper();\n\n    return (\n        readings.map((reading, index) => {\n\n            let tt = new TanksTable();\n            let tank = tt.getTank(reading.imei);\n            if (tank === null) {\n                return null;\n            }\n            let tankName = tank.name;\n\n            let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n\n            let levelAlerts = nh.getLevelNotificationsOnTank(tank);\n            //let hearBeatAlerts = nh.getHeartBeatNotificationForTank(tank);\n            //let asAlert = (levelAlerts.length !==0 || hearBeatAlerts.length !==0)?true:false\n            let asAlert = (levelAlerts.length !== 0) ?true:false\n            let titleColor = getPrimaryTextColor();\n            if (asAlert){\n                titleColor = 'red'\n            }\n            return (\n                <Col xs={12} sm={width} key={index} >\n                    <Card \n                        hCenter={true}\n                        id=\"chartHours\"\n                        title={tankName} color={titleColor}\n                        stats={renderTanksParams(tank, reading, nh)}\n                        content={<TankCard\n                            value={reading.actual_level}\n                            height={\"40%\"}\n                            volume={volume}\n                            asAlerts={asAlert}\n                        />\n                        }\n                    />\n                </Col>\n            );\n        }\n        ));\n}\n\nexport function isTankFiltered(tank, filterStr) {\n    if (filterStr !== \"\") {\n        let tt = new TanksTable();\n        let customer = tt.getCustomerId(tank.imei);\n        let customerName = new CustomersTable().getCustomerName(customer);\n\n        if (tank.imei.search(filterStr) === -1 &&\n            tank.name.search(filterStr) === -1 &&\n            customerName.search(filterStr) === -1 &&\n            tank.capacity.toString().search(filterStr) === -1 &&\n            tank.liquid_type.search(filterStr) === -1)\n            return true;\n    }\n    return false;\n}\n\nfunction getCustomer(tank) {\n    if (new LogInHelper().isAdmin()) {\n        return new CustomersTable().getCustomerName(tank.customer);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction renderTableRow(t1, t2) {\n    return (\n        <tr>\n            <td><center>{t1}</center></td>\n            <td><center>{t2}</center></td>\n        </tr>\n    )\n}\nfunction renderTableRowForAlert(t1, t2, color) {\n    return (\n        <tr>\n            <td style={{color:color}}><center>{t1}</center></td>\n            <td style={{color:color}}><center>{t2}</center></td>\n        </tr>\n    )\n}\n\nexport function renderTanksParams(tank, readings, nh) {\n\n    let isAdmin = new LogInHelper().isAdmin();\n    let levelAlerts = nh.getLevelNotificationsOnTank(tank);\n    let hearBeatAlerts = nh.getHeartBeatNotificationForTank(tank);\n    return (\n        <div>\n            <Table striped bordered condensed hover>\n                <tbody>\n                    {renderTableRow(translate(\"tankName\"), tank.name)}\n                    {renderTableRow(translate(\"buildingName\"), tank.building)}\n                    {getCustomer(tank) !== null &&\n                        renderTableRow(\"Customer\", getCustomer(tank))\n                    }\n                    {renderTableRow(translate(\"capacity\"), tank.capacity + \" L\")}\n                    {readings !== null &&\n                        renderTableRow(translate(\"volume\"), parseInt(tank.capacity * readings.actual_level / 100, 10) + \" L\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"leftInTank\"), readings.actual_level + \"%\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"lastUpdate\"), getDetailedFormattedTime(readings.server_time))\n                    }\n                    {renderTableRow(translate(\"liquid\"), translate(tank.liquid_type))}\n                    {isAdmin && renderTableRow(translate(\"sensorLength\"), tank.sensor_type + \"M\")}\n                    {renderTableRowForAlert(translate(\"levelAlert\"), levelAlerts.length > 0 ? translate(\"Level Below\") + \" \" + levelAlerts[0].level + \"%\" : translate(\"Level OK\"), levelAlerts.length>0?'red':'black')}\n                    {isAdmin && renderTableRowForAlert(translate(\"heartbeat\"), hearBeatAlerts.length > 0 ? translate(\"Not Connected\") : translate(\"Connected\"), levelAlerts.length>0?'red':'black')}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport function renderFilterTanksCard(caller) {\n    //let logInHelper = new LogInHelper();\n    ///if (logInHelper.isAdmin() === false) {\n    //    return null\n    //}\n\n    return (\n        <Col md={4}>\n            <Card\n                id={\"filterTanks\"}\n                title=\"Filter Tanks\"\n                hCenter={true}\n                content={\n                    <FormControl\n                        type=\"text\"\n                        value={caller.state.value}\n                        placeholder=\"Tank / Customer / Capacity / IMEI\"\n                        onChange={(e) => caller.setState({ filterStr: e.target.value })}\n                    />\n                }\n            />\n        </Col>\n    );\n}","import { translate } from \"../../app/lang/lang\";\nimport TanksReading from \"../../app/db/TankReadings\";\n\nexport default class RangeHelper {\n    constructor() {\n        this.ranges = ['Last 6H','Last 12H', 'Last 24H', 'Last 2 Days', 'Select Range'];\n        this.rangesValues = [6, 12, 24, 24 * 2, null];\n    }\n\n    getFirstRangeInHours = () =>{\n        return this.rangesValues[0];\n    }\n\n    getRanges = () => {\n        return this.ranges;\n    }\n\n    getRangeInHour = (index) => {\n        return this.rangesValues[index];\n    }\n\n    getSelectedString = (index) => {\n        if (index === this.ranges.length - 1) {\n            return translate(\"Custom Range\");\n        }\n        else {\n            return translate(this.ranges[index]);\n        }\n    }\n\n    getRangeForHourse = (timeInHours, callback, forClass) => {\n        let tr = new TanksReading();\n        let from = tr.getLastReadingTime() - (timeInHours * 60 * 60 * 1000);\n        let to = tr.getLastReadingTime();\n        this.callback = callback;\n        tr.getReadingFromTo(this.rangeReady, from, to, forClass);\n    }\n\n    getRangeFromTo = (from, to, callback, tank) => {\n        this.callback = callback;\n        new TanksReading().getReadingFromTo(this.rangeReady, from, to, tank);\n    }\n\n    rangeReady = (range) => {\n        if (range.length !== 0) {\n            this.callback && this.callback(range);\n        }\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport momentPropTypes from 'react-moment-proptypes';\nimport moment from 'moment';\nimport omit from 'lodash/omit';\nimport { DateRangePickerShape, DateRangePickerPhrases, DateRangePicker, START_DATE, END_DATE, VERTIVAL_ORIENTATION, ANCHOR_LEFT } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n//import { AppLogger } from '../../app/Logger';\nconst propTypes = {\n  // example props for the demo\n  autoFocus: PropTypes.bool,\n  autoFocusEndDate: PropTypes.bool,\n  stateDateWrapper: PropTypes.func,\n  initialStartDate: momentPropTypes.momentObj,\n  initialEndDate: momentPropTypes.momentObj,\n\n  ...omit(DateRangePickerShape, [\n    'startDate',\n    'endDate',\n    'onDatesChange',\n    'focusedInput',\n    'onFocusChange',\n  ]),\n};\n\nconst defaultProps = {\n  // app props\n  onHide: null,\n  // example props for the demo\n  autoFocus: false,\n  autoFocusEndDate: false,\n  initialStartDate: new moment(),\n  initialEndDate: new moment(),\n\n  // input related props\n  startDateId: START_DATE,\n  startDatePlaceholderText: 'Start Date',\n  endDateId: null,\n  endDatePlaceholderText: 'End Date',\n  disabled: false,\n  required: false,\n  screenReaderInputMessage: '',\n  showClearDates: false,\n  showDefaultInputIcon: false,\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  block: false,\n  small: false,\n  regular: false,\n\n  // calendar presentation and interaction related props\n  renderMonthText: null,\n  orientation: VERTIVAL_ORIENTATION,\n  anchorDirection: ANCHOR_LEFT,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  isRTL: false,\n\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick() { },\n  onNextMonthClick() { },\n  onClose() { },\n\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  minimumNights: 0,\n  enableOutsideDays: false,\n  isDayBlocked: () => false,\n  isOutsideRange: () => false,\n  //isOutsideRange: day => !isInclusivelyAfterDay(day, moment()),\n  isDayHighlighted: () => false,\n\n  // internationalization\n  displayFormat: () => moment.localeData().longDateFormat('L'),\n  monthFormat: 'MMMM YYYY',\n  phrases: DateRangePickerPhrases,\n\n  stateDateWrapper: date => date,\n};\n\nclass DateRangePickerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let focusedInput = null;\n    if (props.autoFocus) {\n      focusedInput = START_DATE;\n    } else if (props.autoFocusEndDate) {\n      focusedInput = END_DATE;\n    }\n\n    this.state = {\n      focusedInput,\n      startDate: props.initialStartDate,\n      endDate: props.initialEndDate,\n      startDateId: 0\n    };\n\n    this.onDatesChange = this.onDatesChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  onDatesChange({ startDate, endDate }) {\n    const { stateDateWrapper } = this.props;\n    this.setState({\n      startDate: startDate && stateDateWrapper(startDate),\n      endDate: endDate && stateDateWrapper(endDate),\n    });\n  }\n\n  onFocusChange(focusedInput) {\n    this.setState({ focusedInput });\n  }\n\n  getNumberOfMonth = () => {\n    if (window.innerWidth <= 994) {\n      return 1;\n    }\n    else {\n      return 2;\n    }\n  }\n\n  handelClose = (startDate) => {\n    if (startDate) {\n      this.props.onHide(this.state.startDate.toDate(), startDate.endDate.toDate());\n    }\n  }\n\n  render() {\n    const { focusedInput, startDate, endDate } = this.state;\n\n    // autoFocus, autoFocusEndDate, initialStartDate and initialEndDate are helper props for the\n    // example wrapper but are not props on the SingleDatePicker itself and\n    // thus, have to be omitted.\n    const props = omit(this.props, [\n      'autoFocus',\n      'autoFocusEndDate',\n      'initialStartDate',\n      'initialEndDate',\n      'stateDateWrapper',\n    ]);\n\n    return (\n      <div>\n        <DateRangePicker\n          {...props}\n          numberOfMonths={this.getNumberOfMonth()}\n          onDatesChange={this.onDatesChange}\n          onFocusChange={this.onFocusChange}\n          focusedInput={focusedInput}\n          startDate={startDate}\n          endDate={endDate}\n          onClose={(startDate) => this.handelClose(startDate)}\n        />\n      </div>\n    );\n  }\n}\n\nDateRangePickerWrapper.propTypes = propTypes;\nDateRangePickerWrapper.defaultProps = defaultProps;\n\nexport default DateRangePickerWrapper;","\nimport React from \"react\";\nimport { Modal, Button } from 'react-bootstrap'\nimport DateRangePickerWrapper from \"components/App/DateAndTime.jsx\";\nimport { MenuItem, DropdownButton } from 'react-bootstrap';\n\n\nclass DateAndTimeModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // create time array\n        this.timeArray = this.createTimeArray();\n\n        this.state = { startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() }\n    }\n\n    createTimeArray = () => {\n        let timeArray = [];\n        for (let hour = 0; hour < 24; hour++) {\n            let hourStr = \"\" + hour;\n            if (hour < 10) {\n                hourStr = \"0\" + hour;\n            }\n\n            timeArray.push(hourStr + \":00\");\n            timeArray.push(hourStr + \":30\");\n        }\n\n        return timeArray;\n\n    }\n    dateSelected = (start, end) => {\n        this.setState({ startDate: start, endDate: end });\n    }\n\n    closeModal = () => {\n        this.props.onHide(\n            this.state.startDate, this.state.endDate,\n            this.state.startTime, this.state.endTime);\n        this.setState({ startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() });\n    }\n\n    quickSelection = (time) => {\n        this.props.onHide(null, null, time, null);\n    }\n\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                bsSize=\"small\"\n                aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">Date Range Selection</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <DateRangePickerWrapper onHide={this.dateSelected}\n                        startDateId={\"2\"} endDateId={\"2\"} />\n                </Modal.Body>\n                <div>\n                    <center>\n                        Select Start & End Time\n                    </center>\n                    <p />\n                </div>\n                <div><center>\n                    <DropdownButton title={this.state.startTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ startTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>&nbsp;&nbsp;\n                    <DropdownButton title={this.state.endTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ endTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>\n                </center></div>\n                <p />\n                <Modal.Footer>\n                    <Button onClick={this.closeModal}>Select</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default DateAndTimeModal;\n\n","import React from \"react\";\nimport {\n    DropdownButton, MenuItem, ButtonGroup\n} from \"react-bootstrap\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nexport default class TanksSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTankName: null\n        };\n\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        this.tanks = new TanksTable().getCustomerTanks(customerId);\n    }\n\n    tankSelected = (index) => {\n\n        this.setState({ selectedTankName: this.tanks[index].name });\n        this.props.tankSelected && this.props.tankSelected(this.tanks[index]);\n    }\n\n    getTankName = () => {\n        if (this.state.selectedTankName === null) { // not set yet\n            return this.props.getSelectedTank().name\n        }\n        else {\n            return this.state.selectedTankName\n        }\n    }\n\n    render() {\n        let tankName = this.getTankName()\n        return (\n            <ButtonGroup>\n                <DropdownButton title={\"Select Tank - \" + tankName} bsStyle=\"primary\" \n                style={{ margin: '3px' ,color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}} \n                id=\"bg-nested-dropdown\">\n                    {\n                        this.tanks.map((tank, index) => {\n                            return (\n                                <MenuItem eventKey={index} key={index} onClick={() => this.tankSelected(index)}>{tank.name}</MenuItem>\n                            )\n                        })\n                    }\n                </DropdownButton>\n            </ButtonGroup >\n        )\n    }\n}","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport DateAndTimeModal from \"./DateAndTimeModal\";\nimport { ButtonToolbar, ButtonGroup, Button } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksSelection from \"./../../views/Admin/TanksSelection\"\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nclass RangeView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { showDateAndTimeModal: false };\n    }\n\n    rangeSelected = (value) => {\n        console.log(AppLogger( \"rangeSelected \" + value));\n\n        let rangeInHour = new RangeHelper().getRangeInHour(value);\n        if (rangeInHour === null) {\n            this.setState({ showDateAndTimeModal: true });\n        }\n        else {\n            this.props.hoursSelected(rangeInHour, value);\n        }\n    }\n    getDate = (date, time) => {\n        let hour = parseInt(time.substring(0, 2), 10);\n        let minutes = parseInt(time.substring(3, 5), 10);\n        date.setHours(hour);\n        date.setMinutes(minutes);\n        return date;\n    }\n\n    dateAndTimeModalClose = (startDate = null, endDate = null, startTime = null, endTime = null) => {\n        if (startDate !== null && endDate !== null &&\n            startTime !== null && endTime !== null) {\n            let start = this.getDate(startDate, startTime);\n            let end = this.getDate(endDate, endTime);\n            this.props.rangeSelected(start.getTime(), end.getTime());\n        }\n        else {\n            this.props.hoursSelected(6, 0);\n        }\n\n        this.setState({ showDateAndTimeModal: false });\n    }\n\n    render() {\n        let ranges = new RangeHelper().getRanges();\n        return (\n            <div>\n                <ButtonToolbar>\n                    <ButtonGroup>\n\n                        <TanksSelection tankSelected={this.props.tankSelected}\n                            getSelectedTank={this.props.getSelectedTank} />\n                        <Button\n                            style={{ opacity: '0' }}>\n                            {\"spacer it\"}\n                        </Button>\n                    </ButtonGroup>\n                    <ButtonGroup>\n                        {\n                            ranges.map((range, index) => {\n                                return (\n                                    <Button\n                                        bsStyle=\"primary\"\n                                        value={index}\n                                        style={{ margin: '3px',color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}}\n                                        key={index}\n                                        onClick={() => this.rangeSelected(index)}\n                                        >\n                                        {range}\n                                    </Button>\n                                )\n                            })\n                        }\n                    </ButtonGroup>\n                </ButtonToolbar>\n                <DateAndTimeModal show={this.state.showDateAndTimeModal} onHide={this.dateAndTimeModalClose} />\n            </div>);\n    }\n}\n\nexport default RangeView;\n","import React from 'react';\n//import { curveCatmullRom } from 'd3-shape';\nimport \"../../../node_modules/react-vis/dist/style.css\"\nimport { getFormattedTime } from \"app/adminHelper.jsx\"\nimport {\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    FlexibleWidthXYPlot,\n    AreaSeries,\n    DiscreteColorLegend\n} from 'react-vis';\n\nexport default class VisGraph extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            crosshairValues: []\n        };\n        this.colors = ['87cefa', 'white', 'green', 'black', 'orange', 'grey'];\n    }\n\n    getData = (data) => {\n        if (this.props.maxPoints === undefined || this.props.maxPoints === null) {\n            return data;\n        }\n        else {\n            if (this.props.maxPoints > data.length) {\n                return data;\n            }\n            let stayIndex = parseInt(data.length / this.props.maxPoints, 10);\n            for (var i = data.length - 2; i > 0; i--) {\n                if (i % stayIndex !== 0) {\n                    data.splice(i, 1);\n                }\n            }\n            return data;\n        }\n    }\n\n    myFormatter = (t, i) => {\n        let formatedTime = getFormattedTime(t);\n        let splitted = formatedTime.split('-');\n\n        return (<tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[0]}</tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[1]}</tspan>\n        </tspan>);\n    }\n\n    yFormatter = (t,i) =>{\n\n        return (\n            <div>\n                 (t/1000).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\") + \"K L\"}\n\n            </div>\n        )\n\n    }\n\n    getLegendItems = () => {\n        let items = [];\n        for (let index in this.props.data) {\n            let data = this.props.data[index];\n            if (data.length !== 0) {\n                if (data[0].tankName !== \"\") { // not a real tank, helper points\n                    let obj = { title: data[0].tankName, color: this.colors[index % this.colors.length] };\n                    items.push(obj);\n                }\n            }\n        }\n        return items;\n    }\n\n    getxValues = (tickTotal) => {\n        // get the data array\n        for (let index in this.props.data) {\n            let dataLen = this.props.data[index].length;\n            if (dataLen > 2) {\n                let ret = [];\n                let data = this.props.data[index];\n                let firstX = data[0].x - (data[0].x % 3600000) + 3600000;\n                let hours = parseInt((data[dataLen - 1].x - data[0].x - 1000 * 60) / 1000 / 60 / 60, 10);\n                let hoursJump = parseInt(hours / 6, 10);\n                let jumps = 3600000 * (hoursJump + 1);\n                if (tickTotal > 5) {\n                    jumps /= 2;\n                    if (data[0].x < firstX - jumps) {\n                        firstX -= jumps;\n                    }\n                }\n                else {\n                    if (hours > 12) {\n                        tickTotal += 1;\n                    }\n                }\n                for (let index = 0; index < tickTotal; index++) {\n                    ret.push(firstX + index * jumps);\n                }\n                return ret;\n            }\n        }\n        return null\n    }\n\n    render() {\n        let tickTotal = (window.innerWidth <= 994) ? 5 : 12;\n        let legenItems = this.getLegendItems();\n        let xValues = this.getxValues(tickTotal);\n        //const configuredCurve = curveCatmullRom.alpha(0.5);\n        return (\n            <div>\n                <FlexibleWidthXYPlot\n                    height={360}\n                    margin={{ left: 50 }}>\n                    <DiscreteColorLegend\n                        items={legenItems}\n                        orientation=\"horizontal\" />\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis title=\"\" tickValues={xValues} tickFormat={this.myFormatter}\n                        style={{\n                            line: { stroke: '#ADDDE1' },\n                            ticks: { stroke: '#ADDDE1' },\n                            text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600 }\n                        }} />\n                    <YAxis title=\"\" tickTotal={15} style={{ size: 10 }} tickFormat={(v) => \n                    {\n                        if (v>1000){\n                            return (v/1000) + \"K L\";\n                            //return (v/1000).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\") + \"K L\";\n                        }\n                        else{\n                            return v + \" L\";\n                        }\n                    }}/>\n\n                    {this.props.data.map((data, index) => {\n                        let strokeColor = 'blue';\n                        if (index !== 0) {\n                            strokeColor = 'white';\n                        }\n                        return (\n                            <AreaSeries\n                                key={index}\n                                xType={'time'}\n                                className={\"series\" + { index }}\n                                color={this.colors[index % this.colors.length]}\n                                data={this.getData(data)}\n                                curve={\"curveNatural\"}\n                                stroke={strokeColor}\n                                size={0} />)\n                    })}\n                </FlexibleWidthXYPlot>\n            </div>\n        );\n    }\n}","    \n    import { isTankFiltered } from \"../views/Tanks/Tanks\"\n    import TanksTable from \"../app/db/TanksTable\"\n\n    let graphFilteredTank = null;\n    let dataFilteredTank = null;\n\n    export function setGraphFilteredTank(tank){\n      graphFilteredTank = tank;\n    }    \n    export function getGraphFilteredTank(){\n      return graphFilteredTank;\n    }    \n    \n    export function setDataFilteredTank(tank){\n      dataFilteredTank = tank;\n    }    \n    \n    export function getDataFilteredTank(){\n      return dataFilteredTank;\n    }\n\n    /// filter \n    export function isFiltered(imei,filterStr) {\n\n        if (filterStr !== \"\") {\n          let tanks = new TanksTable().getTanks();\n          for (let index in tanks) {\n            if (tanks[index].imei === imei) {\n              return isTankFiltered(tanks[index], filterStr)\n            }\n          }\n        }\n    \n        return false;\n      }\n    \n\n    export function getFilteredReadings(readingsData, filterStr){\n        if (filterStr !== \"\" && readingsData.length !== 0) {\n          let readings = [...readingsData];\n          for (let index = readings.length - 1; index >= 0; index--) {\n            if (isFiltered(readings[index].imei,filterStr)) {\n              readings.splice(index, 1);\n            }\n          }\n          return readings;\n        }\n        else {\n          return readingsData;\n        }\n      }\n    ","import React from \"react\";\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader \n        type=\"Oval\"\n        color=\"#00BFFF\"\n        height=\"100\"\t\n        width=\"100\"\n     />   \n    );\n   }\n}","import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport RangeView from \"./../Dashboard/RangeView\";\nimport Card from \"components/Card/Card\";\nimport VisGraph from \"components/App/VisGraph.jsx\"\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { setGraphFilteredTank, getGraphFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\n\nclass Graph extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { graphReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"graph\");\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n            clearInterval(this.timer);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            graphReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeReady = (range) => {\n        this.setState({ graphReadings: range, rangeReady: true });\n    }\n\n    rangeReadingToGraphData() {\n        let retArray = [];\n        let maxX = 0;\n        let readings = getFilteredReadings(this.state.graphReadings, \"\");\n        let tt = new TanksTable();\n        let maxCapacity = 0;\n        for (let index in readings) {\n            let current = readings[index];\n            let tmpData = [];\n            let tank = tt.getTank(readings[index].imei);\n            if (tank === null || tank.capacity === null) {\n                continue;\n            }\n            for (let currentIndex in current.levels) {\n                let obj = {\n                    x: current.times[currentIndex],\n                    y: current.levels[currentIndex] * tank.capacity / 100,\n                    tankName: tank.name\n                };\n                tmpData.push(obj);\n                if (current.times[currentIndex] > maxX) {\n                    maxX = current.times[currentIndex];\n                }\n\n                if (tank.capacity > maxCapacity) {\n                    maxCapacity = tank.capacity;\n                }\n            }\n            retArray.push(tmpData);\n        }\n\n        // add the max object - TODO fix\n        let tmpData = [];\n        tmpData.push({ x: maxX, y: maxCapacity * 1.2, tankName: \"\" }); // add 20% to the graph\n        retArray.push(tmpData);\n        tmpData = [];\n        tmpData.push({ x: maxX, y: 0, tankName: \"\" });\n        retArray.push(tmpData);\n\n        return retArray;\n    }\n\n    tankSelected = (tank) => {\n        setGraphFilteredTank(tank);\n        if (this.state.start === null) {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n        else {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getGraphFilteredTank();\n    }\n\n    render() {\n\n        let height = this.props.fromDashboard === true ? '' : '120%';\n        if (this.state.rangeReady === false) {\n            return (\n                <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                    <Card\n                        hCenter={true}\n                        title=\"Loading Graph...\"\n                        content={<center><Spinner /></center>}\n                    />\n                </div>\n            )\n        }\n\n        let cardId = \"visGraph\"\n        let data = this.rangeReadingToGraphData();\n        let rangeHelper = new RangeHelper();\n        let selectedRange = rangeHelper.getSelectedString(this.state.rangeIndex) + \" for tank: \" + this.getSelectedTank().name;\n\n        return (\n            <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                <Col md={12}>\n                    <Card\n                        id={cardId}\n                        title={translate(\"volumeHistory\")}\n                        category={selectedRange}\n                        hCenter={true}\n                        stats={<RangeView\n                            hoursSelected={this.hoursSelected}\n                            rangeSelected={this.rangeSelected}\n                            tankSelected={this.tankSelected}\n                            getSelectedTank={this.getSelectedTank} />}\n                        content={\n                            <div style={{ height: '380px' }}>\n                                <VisGraph\n                                    data={data}\n                                    maxPoints={40}\n                                />\n                            </div>\n                        }\n                    />\n                </Col>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport { Col, Table, Button } from \"react-bootstrap\";\nimport Card from \"components/Card/Card.jsx\";\nimport TanksTable from \"../../app/db/TanksTable\"\nimport { getFormattedTime } from \"app/adminHelper.jsx\"\nimport { makePdf } from \"./PdfMaker\"\nimport { getPrimaryTextColor, isMobile } from '../../app/adminHelper'\n\nclass TableList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.arrayForTable = [];\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.tanksNames = [];\n    this.state = { excelTableReady: false };\n  }\n\n  componentDidMount = () => {\n    import('./ExcelTable').then(ExcelTable => {\n      this.ExcelTable = ExcelTable;\n      this.setState({ excelTableReady: true });\n      console.log(\"excelTable Ready\");\n    })\n  }\n\n  getHeader = () => {\n    return [\"Tank\", \"Left in Tank (%)\", \"Volume\", \"Time\"];\n  }\n\n  createData = () => {\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.arrayForTable = [];\n    this.tanksNames = [];\n    let tt = new TanksTable();\n    for (let index in this.props.rangeReadings) {\n      let tank = tt.getTank(this.props.rangeReadings[index].imei);\n      let tankName = tank.name;\n      this.tanksNames.push(tankName);\n      this.arrayForExcel[index] = [];\n      this.arrayForPdf[index] = [];\n      this.arrayForPdf[index].push([tankName, 'Time', 'Left In Tank', 'Volume']);\n      for (let readings in this.props.rangeReadings[index].levels) {\n        let time = getFormattedTime(this.props.rangeReadings[index].times[readings]);\n        let level = this.props.rangeReadings[index].levels[readings];\n        let sample = this.props.rangeReadings[index].samples[readings];\n        let vol = parseInt(level * tank.capacity / 100000, 10);\n        let row = [\n          tankName,\n          level + \" %\",\n          vol + \"K L\",\n          time];\n        this.arrayForTable.push(row);\n        this.arrayForExcel[index].push({ time: time, level: level + \" %\", vol: vol + \"K L\", samples: sample });\n        this.arrayForPdf[index].push(['', time, level + \" %\", vol + \"K L\"]);\n      }\n      if (this.props.rangeReadings[index].levels.length === 0) {\n        // tank without readings history\n        let row = [\n          tankName,\n          \"No History For This Tank\",\n          \"!!!!!!!\",\n          \"!!!!!!!\"];\n        this.arrayForTable.push(row);\n      }\n    }\n  }\n\n  creatPdfDocDefinition = () => {\n    let array = [];\n    for (let index in this.arrayForPdf) {\n      let pb = { text: '', pageBreak: 'after', style: 'subheader' };\n\n      let obj = {\n        style: 'tableExample',\n        table: {\n          headerRows: 1,\n          widths: ['*', '*', '*', '*'],\n          body: this.arrayForPdf[index]\n        }\n      };\n      array.push(obj);\n      array.push(pb);\n    }\n\n    return array;\n  }\n\n  exportToPdf = (exportOrPrint) => {\n    makePdf(exportOrPrint, this.creatPdfDocDefinition());\n  }\n\n  renderExport = () => {\n    console.log(\"renderExport\");\n    return (\n      <div>\n        <div>\n          {this.props.rangeButtons}\n        </div>\n        {isMobile() === false &&\n          <div>\n            <this.ExcelTable.default button={<Button bsStyle=\"primary\" style={{ margin: '3px', color: getPrimaryTextColor(), borderColor: getPrimaryTextColor() }} >Export To Excel</Button>} data={this.arrayForExcel} tanksNames={this.tanksNames} />\n            <Button bsStyle=\"primary\" style={{ margin: '3px', color: getPrimaryTextColor(), borderColor: getPrimaryTextColor() }} onClick={() => this.exportToPdf('export')}>Export To PDF</Button>\n            {isMobile() === false &&\n              <Button bsStyle=\"primary\" style={{ margin: '3px', color: getPrimaryTextColor(), borderColor: getPrimaryTextColor() }} onClick={() => this.exportToPdf('print')}>Print</Button>\n            }\n          </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n\n    if (this.state.excelTableReady === false) {\n      return null;\n    }\n    console.log(\"render TableList \");\n\n    this.createData();\n    let header = this.getHeader();\n    return (\n      <Col md={12}>\n        <Card\n          title={this.props.title}\n          category={this.props.category}\n          hCenter={true}\n          ctTableFullWidth\n          stats={this.renderExport()}\n          content={\n            <div style={{ height: '50%', overflowY: 'auto' }}>\n              <Table striped hover >\n                <thead >\n                  <tr>\n                    {header.map((prop, key) => {\n                      return <th key={key}>{prop}</th>;\n                    })}\n                  </tr>\n                </thead>\n                <tbody style={{ overflow: 'auto' }}>\n                  {this.arrayForTable.map((prop, key) => {\n                    return (\n                      <tr key={key}>\n                        {prop.map((prop, key) => {\n                          return <td key={key}>{prop}</td>;\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          }\n        />\n      </Col>\n    );\n  }\n}\n\nexport default TableList;\n","\nexport function makePdf(exportOrPrint, pdfDocDefinition) {\n    var docDefinition = {\n        compress: true,\n        content: pdfDocDefinition\n    };\n    //window.pdfMake.vfs = window.vsf_fonts.pdfMake.vfs;\n    window.pdfMake.tableLayouts = {\n        exampleLayout: {\n            hLineWidth: function (i, node) {\n                if (i === 0 || i === node.table.body.length) {\n                    return 0;\n                }\n                return (i === node.table.headerRows) ? 2 : 1;\n            },\n            vLineWidth: function (i) {\n                return 0;\n            },\n            hLineColor: function (i) {\n                return i === 1 ? 'black' : '#aaa';\n            },\n            paddingLeft: function (i) {\n                return i === 0 ? 0 : 8;\n            },\n            paddingRight: function (i, node) {\n                return (i === node.table.widths.length - 1) ? 0 : 8;\n            }\n        }\n    };\n\n    // download the PDF\n    if (exportOrPrint === 'export') {\n        window.pdfMake.createPdf(docDefinition).download('NTCL-MonitoringData.pdf');\n    }\n    if (exportOrPrint === 'print') {\n        window.pdfMake.createPdf(docDefinition).print({},window);\n    }\n}","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport TableList from \"../TableList/TableList\"\nimport RangeView from \"./../Dashboard/RangeView\";\nimport { setDataFilteredTank, getDataFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\nimport Card from \"components/Card/Card\";\nimport { Col } from \"react-bootstrap\";\n\nclass Data extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tableReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"data\");\n            clearInterval(this.timer);\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            tableReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    tankSelected = (tank) => {\n        setDataFilteredTank(tank);\n        // update the data according to the last selection\n        if (this.state.start !== null) {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n        else {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getDataFilteredTank();\n    }\n\n    rangeReady = (range) => {\n        this.setState({ tableReadings: range, rangeReady: true });\n    }\n\n    render() {\n        let height = this.props.fromDashboard === true ? '' : '120%';\n\n        if (this.state.rangeReady === false) {\n\n            return (\n                <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                    <Col md={12}>\n                        <Card\n                            hCenter={true}\n                            title=\"Loading Data...\"\n                            content={<center><Spinner /></center>}\n                        /></Col>\n                </div>\n            )\n        }\n\n        return (\n\n            <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                <TableList\n                    rangeReadings={getFilteredReadings(this.state.tableReadings, \"\")}\n                    title={translate(\"latestData\")}\n                    rangeButtons={<RangeView\n                        hoursSelected={this.hoursSelected}\n                        rangeSelected={this.rangeSelected}\n                        tankSelected={this.tankSelected}\n                        getSelectedTank={this.getSelectedTank} />}\n                    category={new RangeHelper().getSelectedString(this.state.rangeIndex)} />\n            </div>\n        )\n    }\n}\n\nexport default Data;\n","import React, { Component } from 'react'\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n        };\n\n        this.activeMarkerTitle = \"\";\n    }\n\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMouseOver = (props, marker, e) => {\n        if (this.activeMarkerTitle === marker.title) {\n            return;\n        }\n        else {\n            this.activeMarkerTitle = marker.title;\n        }\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n\n        this.activeMarkerTitle = \"\";\n    };\n\n    renderMarkers = (markers) => {\n        return (\n            markers.map((marker, index) => {\n                return <Marker\n                    onClick={this.onMarkerClick}\n                    onMouseover={this.onMouseOver}\n                    title={\"\" + index}\n                    info={marker.info} key={index}\n                    position={{ lat: marker.lat, lng: marker.lng }} />\n            }\n            ));\n    }\n\n    getCenter = (markers) => {\n        let lat = 0;\n        let lng = 0;\n        let ignore = 0;\n        for (let index in markers) {\n            if (markers[index].lat === 0 || markers[index].lng === 0){\n                ignore+=1;\n            }\n            lat += markers[index].lat;\n            lng += markers[index].lng;\n        }\n\n        // make sure we not dividing by 0\n        let div = (markers.length-ignore)!==0?(markers.length-ignore):1\n\n        return { lat: lat / div, lng: lng / div };\n    }\n\n    convertGpsPosition = (pos) => {\n        let lat = parseFloat(pos.lat.substring(0, 9), 10);\n        let lng = parseFloat(pos.lng.substring(0, 10), 10);\n\n        let latSign = (pos.lat[9] === \"N\") ? 1 : -1;\n        let lngSign = (pos.lng[10] === \"E\") ? 1 : -1;\n\n        return {\n            info: pos.info,\n            lat: (Math.floor(lat / 100) + ((lat % 100) / 60))*latSign,\n            lng: (Math.floor(lng / 100) + ((lng % 100) / 60))*lngSign\n        };\n    }\n\n    render() {\n        const style1 = {\n            height: this.props.height,\n            position: 'relative'\n        }\n        const style2 = {\n            width: '90%',\n            height: '90%',\n            position: 'relative'\n\n        }\n\n        let markers = [];\n        for (let index in this.props.markers) {\n            markers.push(this.convertGpsPosition(this.props.markers[index]));\n        }\n\n        return (\n            <div style={style1}>\n                <center><Map google={window.google}\n                    zoom={this.props.zoom} style={style2}\n                    onClick={this.onMapClicked}\n                    onReady={this.mapIsReady}\n                    initialCenter={this.getCenter(markers)}>\n\n                    {this.renderMarkers(markers)}\n\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}>\n                        <div>\n                            {this.state.selectedPlace.info}\n                        </div>\n                    </InfoWindow>\n                </Map></center>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyAugb6uKPRiLYNHII5GEgQxHVSTL73IUVk')\n})(MapContainer)","import React, { Component } from \"react\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport MapContainer from \"../../components/App/Map\"\nimport { Card } from \"../../components/Card/Card\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport { Col, Table } from \"react-bootstrap\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport Spinner from \"../App/Spinner\"\n\nclass Locations extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lastTanksReadings: [] };\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  tick = () => {\n    if (isAppReady()) {\n      this.setState({ lastTanksReadings: new TanksReading().getLevelMonitoring(\"name\") });\n      clearInterval(this.timer);\n    }\n  }\n\n  renderInfo = (reading) => {\n    let tt = new TanksTable();\n    let tank = tt.getTank(reading.imei);\n\n    return (\n      <Table striped bordered condensed hover>\n        <tbody>\n          <tr>\n            <td><center>Tank Name</center></td>\n            <td><center>{tank.name}</center></td>\n          </tr>\n          <tr>\n            <td><center>Building</center></td>\n            <td><center>{tank.building}</center></td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  }\n\n  getMarkers = () => {\n    let filterStr = this.props.filterStr;\n    if (filterStr === null || filterStr === undefined) {\n      filterStr = \"\";\n    }\n    let markers = [];\n    let readings = getFilteredReadings(this.state.lastTanksReadings, filterStr);\n    for (let index in readings) {\n      let info = this.renderInfo(readings[index]);\n      markers.push({\n        info: info,\n        lat: readings[index].gps.lat,\n        lng: readings[index].gps.long\n      })\n    }\n\n    return markers;\n  }\n\n  render() {\n\n    let markers = this.getMarkers();\n    let contentHeight = this.props.fromDashboard === true ? '' : '120%';\n\n    if (markers.length === 0) {\n      return (\n        <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: contentHeight }}>\n\n          <Col md={12}>\n            <Card\n              hCenter={true}\n              title=\"Loading Location...\"\n              content={<center><Spinner /></center>}\n            /></Col>\n        </div>\n      )\n    }\n\n    let title = translate(\"tankLocation\");\n    if (markers.length > 1) {\n      title = translate(\"tanksLocations\")\n    }\n\n    let height = this.props.fromDashboard === true ? '40%' : '70%';\n    contentHeight = this.props.fromDashboard === true ? '' : '110%';\n\n    return (\n      <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: contentHeight }}>\n        <Col xs={12}>\n          <Card\n            hCenter={true}\n            statsIcon=\"fa fa-history\"\n            id=\"chartHours\"\n            title={title}\n            stats=\"Updated\"\n            content={<MapContainer height={height} markers={markers} zoom={13} />}\n          />\n        </Col>\n      </div>\n    );\n  }\n}\n\nexport default Locations;\n","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\"\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport { renderTanks, renderFilterTanksCard } from \"../Tanks/Tanks.jsx\"\nimport Graph from \"../Graph/Graph\";\nimport Data from \"../Data/Data\";\nimport Locations from \"../Location/Locations\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\"\nimport Spinner from \"../App/Spinner\"\n//import logo from \"assets/img/orbitBanner.png\";\nimport { AppLogger } from \"app/Logger\";\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tanks: [],\n      lastTanksReadings: [],\n      filterStr: \"\"\n    }\n    this.getRangeReadingOnce = true;\n    this.tickToggle = true;\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 35000);\n    this.fastTimer = setInterval(this.fastTick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n    clearInterval(this.fastTimer);\n  }\n\n  tick = () => {\n    if (this.tickToggle) {\n      // update the last readings\n      new TanksReading().getLastReading(this.tanksReadingReady);\n    }\n    else {\n      // read the tanks table for alers\n      console.log(AppLogger(\"tick\"));\n      new TanksTable().start(this.dataIsReady, true);\n    }\n    this.tickToggle = this.tickToggle ? false : true;\n  }\n\n  fastTick = () => {\n    if (isAppReady()) {\n      this.dataIsReady();\n      clearInterval(this.fastTimer);\n    }\n  }\n\n  dataIsReady = () => {\n    // check is this is admin user or regulare\n    let tt = new TanksTable();\n    let logInHelper = new LogInHelper();\n    let customerId = logInHelper.getLoggedInCustomerId();\n    if (logInHelper.isAdmin()) {\n      this.setState({ tanks: tt.getTanks() });\n    }\n    else {\n      this.setState({ tanks: tt.getCustomerTanks(customerId) });\n    }\n\n    this.tanksReadingReady();\n\n  }\n\n  tanksReadingReady = () => {\n    let lm = new TanksReading().getLevelMonitoring(\"name\");\n    if (lm) {\n      this.setState({ lastTanksReadings: lm });\n    }\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n\n  renderTanks() {\n\n    let readings = getFilteredReadings(this.state.lastTanksReadings, this.state.filterStr);\n\n    return renderTanks(readings, false);\n  }\n\n\n  renderAlerts = () => {\n\n    // disabled for now\n    if (true){\n      return null;\n    }\n    let nh = new NotificationHelper();\n\n    let levelAlerts = nh.getLevelNotifications();\n    let hearBeatAlerts = nh.getHeartBeatNotification();\n\n    if (levelAlerts.length === 0 && hearBeatAlerts.length === 0) {\n      return null;\n    }\n\n    return (\n      <Col xs={12} onClick={() => this.props.history.push(`alerts`)}>\n        <StatsCard\n          statsText={\n            <div style={{ animation: 'scale 0.5s linear infinite alternate', color: 'red' }}>\n              <i className=\"pe-7s-gleam text-danger\">Alerts</i>\n            </div>}\n          statsValue={<div>\n            <br />\n            {levelAlertView(levelAlerts)}\n            {heartBeatView(hearBeatAlerts)}\n          </div>}\n          statsIcon={<i className=\"fa fa-clock-o\" />}\n          statsIconText=\"Click for more info\"\n        />\n      </Col>\n    );\n  }\n\n  render() {\n    if (this.state.tanks.length === 0) {\n      return (\n        <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: '120%' }}>\n\n          <Card\n            hCenter={true}\n            title=\"Loading ...\"\n            content={<center><Spinner /></center>}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"content\" style={{ backgroundColor: getBackgroundColor() }}>\n        {/*<center><img src={logo} alt=\"logo_image\" style={{ height: '8.5%' }} /></center>\n        <p />*/}\n        <Grid fluid >\n          {new LogInHelper().isAdmin() &&\n            <Row>\n              {renderFilterTanksCard(this)}\n            </Row>\n          }\n          <Row>\n            {this.renderAlerts()}\n          </Row>\n          <Row>\n            {this.renderTanks()}\n          </Row>\n          <Row>\n            <Graph fromDashboard={true} />\n          </Row>\n          <Row>\n            <Locations filterStr={this.state.filterStr} fromDashboard={true} />\n          </Row>\n          <Row>\n            <Data fromDashboard={true} />\n          </Row>\n          {/*\n          <Row>\n            <Col md={12}>\n              <Card\n                hCenter={true}\n                title=\"Monitoring Tanks Is Active\"\n                content={<center><Spinner /></center>}\n              />\n            </Col>\n          </Row>\n */}\n          {/*<Row>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-server text-warning\" />}\n                statsText=\"Capacity\"\n                statsValue=\"105GB\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-wallet text-success\" />}\n                statsText=\"Revenue\"\n                statsValue=\"$1,345\"\n                statsIcon={<i className=\"fa fa-calendar-o\" />}\n                statsIconText=\"Last day\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-graph1 text-danger\" />}\n                statsText=\"Errors\"\n                statsValue=\"23\"\n                statsIcon={<i className=\"fa fa-clock-o\" />}\n                statsIconText=\"In the last hour\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"fa fa-twitter text-info\" />}\n                statsText=\"Followers\"\n                statsValue=\"+45\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            \n            <Col md={4}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Email Statistics\"\n                category=\"Last Campaign Performance\"\n                stats=\"Campaign sent 2 days ago\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={dataPie} type=\"Pie\" />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendPie)}</div>\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <Card\n                id=\"chartActivity\"\n                title=\"2014 Sales\"\n                category=\"All products including Taxes\"\n                stats=\"Data information certified\"\n                statsIcon=\"fa fa-check\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataBar}\n                      type=\"Bar\"\n                      options={optionsBar}\n                      responsiveOptions={responsiveBar}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendBar)}</div>\n                }\n              />\n            </Col>\n\n            <Col md={6}>\n              <Card\n                title=\"Tasks\"\n                category=\"Backend development\"\n                stats=\"Updated 3 minutes ago\"\n                statsIcon=\"fa fa-history\"\n                content={\n                  <div className=\"table-full-width\">\n                    <table className=\"table\">\n                      <Tasks />\n                    </table>\n                  </div>\n                }\n              />\n            </Col>\n          </Row>\n              \n          </Row>*/}\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from 'app/lang/lang.js'\nimport { industries } from 'app/lang/dic.js'\n\nexport class CustomerForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customerName: \"\", hideButtons: false, formMessage: null,\n            mailingList: [],\n            industry: industries[0]\n        };\n\n        this.style = { 'color': getPrimaryTextColor() };\n\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, formMessage: message });\n        }\n        else {\n            this.props.onHide();\n            this.setState({ hideButtons: false, formMessage: '' });\n        }\n    }\n\n    addNewCustomer() {\n        if (this.validatCustomer() === 'error'){\n            this.setState({ formMessage: 'Invalid customer name' });\n            return;\n        }\n        this.setState({ hideButtons: true, formMessage: 'Adding New Customer...' });\n        let customrtTable = new CustomersTable();\n        customrtTable.addNewCustomer(\n            this.state.customerName,\n            this.state.industry,\n            this.state.mailingList,\n            this.restCallBack);\n    }\n\n    updateCustomer() {\n        console.log(AppLogger( \"updating \" + this.props.customer.name));\n        let customrtTable = new CustomersTable();\n        customrtTable.updateCustomer(this.props.customer, this.restCallBack);\n    }\n\n    validateMail(mail) {\n        var re = /\\S+@\\S+\\.\\S+/;\n        if (mail && mail.length !== 0 && re.test(mail) === false) {\n            return 'error';\n        }\n\n        return 'success';\n    }\n\n    validatCustomer() {\n        if (this.state.customerName.length > 2) {\n            return 'success'\n        }\n        return 'error'\n    }\n\n    deleteMail = (index) => {\n        let tmpMailingList = this.state.mailingList;\n        if (this.props.customer) {\n            tmpMailingList = this.props.customer.mailing_list;\n        }\n        tmpMailingList.splice(index, 1);\n        this.setState({ mailingList: tmpMailingList });\n        if (this.props.customer) {\n            this.props.customer.mailing_list = tmpMailingList;\n        }\n    }\n\n    addMail = () => {\n        if (this.validateMail(this.state.mailAddrees) === 'error') {\n            this.setState({ formMessage: \"Mail is not valid\" });\n        }\n        else {\n            let tmpMailingList = this.state.mailingList;\n            tmpMailingList.push(this.state.mailAddrees);\n            this.setState({ mailingList: tmpMailingList, formMessage: null });\n            if (this.props.customer) {\n                this.props.customer.mailing_list = tmpMailingList;\n            }\n        }\n    }\n\n    createMailForm = (mail, index) => {\n\n        return (\n            <div align=\"left\" key={index}>\n                <Button style={{ margin: '3px' }} value={index}\n                    onClick={(e) => this.deleteMail(e.target.value)}>\n                    Remove\n                </Button>\n                &nbsp; {mail}\n            </div>\n        );\n    }\n\n    renderFormCustomerFiled() {\n\n        let mailingList = this.state.mailingList;\n        if (this.props.customer) {\n            mailingList = [...this.props.customer.mailing_list];\n        }\n\n        return (\n            <div>\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\"\n                        validationState={this.validatCustomer()}>\n                        <center><ControlLabel style={this.style}>{translate('customerName')}</ControlLabel></center>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={translate('customerName')}\n                            onChange={(e) => { this.setState({ customerName: e.target.value, formMessage: null }) }}\n                        />\n                    </FormGroup>\n                }\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\">\n                        <center><ControlLabel style={this.style}>{translate('industry')}</ControlLabel></center>\n                        <FormControl componentClass=\"select\" onChange={(e) => this.setState({ industry: e.target.value })}>\n                            {industries.map(function (name, index) {\n                                return <option key={index} value={name}>\n                                    {translate(name)}\n                                </option>\n                            })}\n                        </FormControl>\n                    </FormGroup>\n                }\n                {\n                    mailingList.length > 0 && <center><ControlLabel style={this.style}>Alerts Mails</ControlLabel></center>\n                }\n                {\n                    mailingList.map((mail, index) => this.createMailForm(mail, index))\n                }\n                <hr/>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validateMail()}>\n                    <center><ControlLabel style={this.style}>{translate('mailAddress')}</ControlLabel></center>\n                    <FormControl\n                        type=\"email\"\n                        placeholder={translate('mailAddress')}\n                        onChange={(e) => { this.setState({ mailAddrees: e.target.value, formMessage: null }) }}\n                    />\n                </FormGroup>\n                <center><Button\n                    onClick={(index) => this.addMail(index)}>{\"Add Alerts Mail\"}\n                </Button></center>\n            </div>\n        )\n    }\n\n    createForm() {\n\n        return (\n            <form>\n                {this.renderFormCustomerFiled()}\n                <center><div>{this.state.formMessage}</div></center>\n            </form>\n        );\n    }\n\n    deleteCustomer() {\n        console.log(AppLogger( \"deleteCustomer \" + this.props.customer.id));\n\n        let customrtTable = new CustomersTable();\n        customrtTable.deleteCustomer(this.props.customer.id);\n        this.props.onHide();\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>{translate('cancel')}</Button>\n                {this.props.customer == null ?\n                    <Button onClick={() => this.addNewCustomer()}>{translate('add')}</Button> :\n                    <Button onClick={() => this.updateCustomer()}>{translate('update')}</Button>}\n            </div>\n        );\n    }\n\n    render() {\n        let addnewCustomerText = translate('addNewCustomer');\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        {this.props.customer ?\n                            \"Manage Customer - \" + this.props.customer.name :\n                            addnewCustomerText}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default CustomerForm;","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport UsersTable from \"../../app/db/UsersTable\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\n\nexport class UsersForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { userName: \"\",password:\"\", hideButtons: false, settingMessage: null };\n\n        this.style = { 'color': getPrimaryTextColor() };\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, settingMessage: message });\n        }\n        else {\n            this.setState({ hideButtons: false, settingMessage: \"done\" });\n            this.props.onHide();\n        }\n    }\n\n    addNewUser() {\n        this.setState({ hideButtons: true, settingMessage: translate('addingNewUser') });\n        let usersTable = new UsersTable();\n        usersTable.add(\n            this.state.userName,\n            this.state.password,\n            this.props.customer.id,\n            this.props.customer.name,\n            this.restCallBack);\n    }\n\n    validate = (str) => {\n        if ((str.length > 2) && (str.indexOf(' ')) === -1) {\n            return 'success'\n        }\n        else{\n            return 'error';\n        }\n    }\n\n    validatUser() {\n        return this.validate(this.state.userName);\n    }\n\n    validatPass = () => {\n        return this.validate(this.state.password);\n    }\n\n    renderFormUsersFiled() {\n\n        return (\n            <div>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatUser()}>\n                    <center><ControlLabel style={this.style}>User Name</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                        onChange={(e) => { this.setState({ userName: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatPass()}>\n                    <center><ControlLabel style={this.style}>Password</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"Password\"\n                        onChange={(e) => { this.setState({ password: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n            </div>\n        )\n    }\n\n    createForm() {\n        return (\n            <form>\n                {this.renderFormUsersFiled()}\n                <center><div>{this.state.settingMessage}</div></center>\n            </form>\n        );\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>Cancel</Button>\n                {this.validatUser() === 'success' && this.validatPass() === 'success' &&\n                    <Button onClick={() => this.addNewUser()}>Add</Button>\n                }\n            </div>\n        );\n    } \n\n    render() {\n        console.log(AppLogger( \"render\"));\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        Add New User\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default UsersForm;","import React from \"react\";\nimport {\n    Modal, Button, FormGroup, FormControl, ControlLabel,\n    DropdownButton, MenuItem\n} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AppLogger } from \"../../app/Logger\";\nimport { liquids, sensors } from 'app/lang/dic.js'\nimport { translate } from \"../../app/lang/lang\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nclass SettingsModal extends React.Component {\n\n    render() {\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.props.text.map((text, index) =>\n                        <div key={index}>{text}</div>\n                    )}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport class TankForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imei: \"\",\n            phone: '0000',\n            name: \"\",\n            building: \"\",\n            liquid_type: liquids[0],\n            sensor_type: sensors[0],\n            capacity: 0,\n            high: 0,\n            iccid: '12345', //default\n            sampling_interval: 0,\n            heartbeat_timeout: (60 * 60000),\n\n            // settings modal\n            showSettingsModal: false,\n            settingsModalText: [],\n            level_alerts: [],\n\n            simConfigurationIndex: 0 // 0 for local sim 1 for monogoto\n        };\n\n        this.message = null;\n\n        // form place holders\n        this.imeiPh = \"Tank ID (IMEI)\";\n        this.iccidPh = \"Thing ICCID\";\n        this.phoneNumberPh = \"Tank Phone number\";\n        this.namePh = \"Tank Name\";\n        this.buildingPh = \"Building Name\"\n        this.capacityPh = \"Capacity\";\n        this.highPh = \"Hight\";\n        this.sampleIntervalPh = \"Sample Interval\";\n\n        this.runTimer = true;\n\n        // sim config\n        this.simConfigurationTitle = [\n            \"Configuring Local SIM \",\n            \"Configuring Monogoto SIM \"];\n    }\n\n    validateForm() {\n        if (this.state.imei.length !== 15 && this.state.imei.length !== 16) {\n            return \"Invalid IMEI - length must be 15 or 16 current length is \" + this.state.imei.length;\n        }\n\n        if (this.state.simConfigurationIndex === 1 && this.state.iccid.length < 5) {\n            return \"Invalid iccid length, current length \" + this.state.iccid.length;\n        }\n\n        if (this.state.sampling_interval < 60) {\n            return \"Invalid Sampling Interval - value is less the 60 seconds\";\n        }\n\n        if (this.state.name === \"\") {\n            return \"Invalid tank name - name can't be empty\";\n        }\n\n        if (this.state.capacity === 0) {\n            return \"Invalid tank capacity - capacity can't be 0\";\n        }\n\n        if (this.state.high === 0) {\n            return \"Invalid tank high - high can't be 0\";\n        }\n\n        return null;\n    }\n\n    updateSettingsTimeOut = () => {\n        this.setState({ showSettingsModal: false, settingsModalText: [] });\n        this.props.onHide();\n        clearInterval(this.timer);\n    }\n\n    updateSettingsModal = (show, text) => {\n        console.log(AppLogger( \"updateSettingsModal \" + show));\n        console.log(AppLogger( \"updateSettingsModal \" + this.state.settingsModalText));\n        console.log(AppLogger( \"updateSettingsModal \" + text));\n        let textArray = this.state.settingsModalText.slice(0, this.state.settingsModalText.length);\n        textArray.push(text);\n        if (!show) { // close the modal after 2 seconds\n            this.setState({ settingsModalText: textArray });\n            this.timer = setInterval(this.updateSettingsTimeOut, 5000);\n        }\n        else {\n            this.setState({ showSettingsModal: show, settingsModalText: textArray });\n        }\n    }\n\n    addTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"done.\");\n            if (this.state.simConfigurationIndex === 0) {\n                this.configureThingDone();\n            }\n            else {\n                this.configureThing(this.setServerIp);\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Failed to add tank\");\n        }\n    }\n\n    addNewTank() {\n        console.log(AppLogger( \"addNewTank\"));\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.addTank(this.addTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Adding Tank to DB...\");\n    }\n\n    updateTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"Updating Tank DB...Done\");\n            if (this.samplingIntervalChanged) { // update if interval changed\n                this.configureThing(this.setInterval);// update the thing\n            }\n            else {\n                this.updateSettingsModal(false, \"Setting thing done.\");\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Fail to update tank\");\n        }\n    }\n\n    updateTank() {\n        console.log(AppLogger( \"updateTank \"));\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.updateTank(this.updateTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Updating Tank DB...\");\n    }\n\n    liquidSelected = (value) => {\n        let liquid = liquids[value]\n        this.setState({ liquid_type: liquid });\n    }\n\n    sensorSelected = (value) => {\n        let sensor = sensors[value]\n        this.setState({ sensor_type: sensor });\n    }\n\n    renderIccdAndPhone = () => {\n        if (this.state.simConfigurationIndex === 1) {\n            return (\n                <div>\n                    <ControlLabel>Tank ICCID</ControlLabel>\n                    {\n                        !this.props.tank &&\n                        <div>\n                            <FormControl\n                                type=\"text\"\n                                placeholder={this.iccidPh}\n                                onChange={(e) => this.setState({ iccid: e.target.value })}\n                            />\n                        </div>\n                    }\n                    {this.props.tank && <p> {this.props.tank.iccid}</p>}\n                    <ControlLabel>Phone number</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={this.phoneNumberPh}\n                        onChange={(e) => this.setState({ phone: e.target.value })}\n                    />\n                </div>)\n        }\n        else {\n            return null;\n        }\n    }\n\n    renderTankFileds() {\n        if (this.props.customer === null) {\n            return null;\n        }\n\n        return (\n            <FormGroup controlId=\"formBasicText\">\n                <ControlLabel>Tank ID (IMEI)</ControlLabel>\n                {!this.props.tank &&\n                    <div>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={this.imeiPh}\n                            onChange={(e) => this.setState({ imei: e.target.value })}\n                        />\n                    </div>\n                }\n                {this.props.tank && <p> {this.props.tank.imei}</p>}\n                {this.renderIccdAndPhone()}\n                <ControlLabel>Tank Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.namePh}\n                    onChange={(e) => this.setState({ name: e.target.value })}\n                />\n                <ControlLabel>Building Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.buildingPh}\n                    onChange={(e) => this.setState({ building: e.target.value })}\n                />\n                <ControlLabel>Tank Capacity (in liters)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.capacityPh}\n                    onChange={(e) => this.setState({ capacity: parseInt(e.target.value, 10) })}\n                />\n                <ControlLabel>Tank Hight (cm)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.highPh}\n                    onChange={(e) => this.setState({ high: parseFloat(e.target.value, 10) })}\n                />\n                <ControlLabel>Sample Interval (in second, min 60)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.sampleIntervalPh}\n                    onChange={(e) => {\n                        this.setState({ sampling_interval: parseInt(e.target.value, 10) });\n                        this.samplingIntervalChanged = true;\n                    }}\n                />\n                <div></div>\n                <ControlLabel style={this.style}>{translate('liquid')}</ControlLabel>\n                <br />\n                <DropdownButton\n                    title={translate(this.state.liquid_type)}\n                    id=\"liquidType\">\n                    {liquids.map((liquid, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.liquidSelected}>{translate(liquid)}</MenuItem>\n                    )}\n                </DropdownButton>\n                <br/>\n                <ControlLabel style={this.style}>{translate('sensor')}</ControlLabel>\n                <br/>\n                <DropdownButton\n                    title={this.state.sensor_type + 'M'}\n                    id=\"sensorType\">\n                    {sensors.map((sensor, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.sensorSelected}>{sensor}M</MenuItem>\n                    )}\n                </DropdownButton>\n            </FormGroup>\n        )\n    }\n\n    switchSimConfig = () => {\n        this.setState({ simConfigurationIndex: this.state.simConfigurationIndex === 0 ? 1 : 0 })\n    }\n\n    renderFormTitle() {\n        if (this.props.customer) {\n            let title = \"Adding new tank to - \" + this.props.customer.name;\n            if (this.props.tank) {\n                return \"Updating Tank - \" + this.props.tank.name;\n            }\n\n            return (\n                <div>\n                    <div>\n                        {title}\n                    </div>\n                    <div>\n                        {this.simConfigurationTitle[this.state.simConfigurationIndex]}\n                        <Button onClick={this.switchSimConfig}>Switch</Button>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    getToken = (callback) => {\n        let json = {\n            \"UserName\": \"guy@orbitmonitoring.com\", \"Password\": \"mono123!\"\n        };\n\n        let uri = 'https://console.monogoto.io/Auth';\n\n        axios.post(uri, json).then(response => {\n            console.log(AppLogger( \"getToken succedded\"));\n            this.updateSettingsModal(true, \"done.\");\n            this.token = response.data.token;\n            callback && callback();\n        }).catch(error => {\n            console.log(AppLogger( error));\n            this.updateSettingsModal(false, \"Error on getting token\");\n        });\n    }\n\n    sendSemsToThing = (message, callback) => {\n        var config = {\n            headers: { 'Authorization': \"Bearer \" + this.token }\n        };\n\n        let json = {\n            \"Message\": message, \"From\": this.state.phone\n        };\n\n        let uri = \"https://console.monogoto.io/thing/ThingId_ICCID_\" + this.state.iccid + \"/sms\";\n\n        console.log(AppLogger( \"Sending thing API - \" + json.Message + \" \" + json.From));\n\n        axios.post(uri, json, config).then(response => {\n            console.log(AppLogger( \"testApi succedded\"));\n            this.updateSettingsModal(true, \"done.\");\n            callback && callback();\n        }).catch(error => {\n            console.log(AppLogger( error));\n            this.updateSettingsModal(false, \"error on configure Modem\");\n        }\n        );\n    }\n\n    configureThing = (nextFunction) => {\n        console.log(AppLogger( \"configureThing\"));\n        this.updateSettingsModal(true, \"getting token...\");\n        // first get the token\n        this.getToken(nextFunction);\n    }\n\n    setServerIp = () => {\n        console.log(AppLogger( \"setServerIp\"));\n        this.updateSettingsModal(true, \"Setting server IP...\");\n        // configure the server IP\n        this.sendSemsToThing(\"pw123456,server=18.214.154.46,5005\", this.setServerIpDone);\n    }\n\n    setServerIpDone = () => {\n        console.log(AppLogger( \"setServerIpDone\"));\n        this.nextFunction = this.setProtocol;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setProtocol = () => {\n        this.updateSettingsModal(true, \"Setting protocol...\");\n        this.sendSemsToThing(\"pw123456,protocol=udp\", this.setProtocolDone);\n    }\n\n    setProtocolDone = () => {\n        console.log(AppLogger( \"setProtocolDone\"));\n        this.nextFunction = this.setInterval;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setInterval = () => {\n        console.log(AppLogger( \"setInterval\"));\n        this.updateSettingsModal(true, \"Setting interval...\");\n        this.sendSemsToThing(\"pw123456,interval=\" + this.state.sampling_interval + \"s,\" + this.state.sampling_interval + \"s,0m,0d\", this.configureThingDone);\n    }\n\n    configureThingDone = () => {\n        console.log(AppLogger( \"configureThingDone\"));\n        this.updateSettingsModal(false, \"Setting thing done.\");\n    }\n\n    smsTimeOut = () => {\n        clearInterval(this.timer);\n        this.nextFunction && this.nextFunction();\n    }\n\n\n    updateData = () => {\n        if (this.props.tank) {\n            let liquidTypeIndex = 0;\n            let sensorTypeIndex = 0;\n            if (this.props.tank) {\n                this.imeiPh = this.props.tank.imei;\n                this.iccidPh = this.props.tank.iccid;\n                this.phoneNumberPh = this.props.tank.phone;\n                this.namePh = this.props.tank.name;\n                this.buildingPh = this.props.tank.building;\n                this.capacityPh = this.props.tank.capacity;\n                this.highPh = this.props.tank.high;\n                this.sampleIntervalPh = this.props.tank.sampling_interval;\n                for (let index in liquids) {\n                    if (liquids[index] === this.props.tank.liquid_type) {\n                        liquidTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                for (let index in sensors) {\n                    if (sensors[index] === this.props.tank.sensor_type) {\n                        sensorTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                this.setState({\n                    imei: this.imeiPh,\n                    phone: this.phoneNumberPh,\n                    name: this.namePh,\n                    building: this.buildingPh,\n                    capacity: this.capacityPh,\n                    high: this.highPh,\n                    iccid: this.iccidPh,\n                    sampling_interval: this.sampleIntervalPh,\n                    liquid_type: liquids[liquidTypeIndex],\n                    sensor_type: sensors[sensorTypeIndex]\n                })\n            }\n        }\n        clearInterval(this.timer);\n    }\n\n    render() {\n        console.log(AppLogger( \"render\"));\n\n        if (this.props.show === true) {\n            if (this.runTimer) {\n                this.timer = setInterval(this.updateData, 1000);\n                this.runTimer = false;\n                this.samplingIntervalChanged = false;\n            }\n        }\n        else {\n            this.runTimer = true;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.renderFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form>\n                        {this.renderTankFileds()}\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Cancel</Button>\n                    {this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.updateTank()}>Update</Button>}\n                    {!this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.addNewTank()}>Add</Button>}\n                </Modal.Footer>\n                <SettingsModal\n                    show={this.state.showSettingsModal}\n                    title={\"Setting Tank\"}\n                    text={this.state.settingsModalText} />\n            </Modal>\n        );\n    }\n}\n\nexport default TankForm;\n","import React from \"react\";\nimport { Grid, Row, Col, Button, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { CustomerForm } from \"views/Admin/CustomerForm\"\nimport { UsersForm } from \"views/Admin/UsersForm\"\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\nimport { TankForm } from \"views/Admin/TankForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nexport default class Customers extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customers: [],\n            showCustomersModal: false,\n            showTankForm: false,\n            showUsersModal: false,\n            selectedCustomer: null,\n            filterStr: \"\"\n        };\n\n        let color = getPrimaryTextColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal', 'margin': '3px' };\n    }\n\n    componentDidMount() {\n        this.readCustomers();\n    }\n\n    customerInfoReady = () => {\n        console.log(AppLogger( \"customerInfoReady\"));\n        this.setState({ customers: new CustomersTable().getCustomers() });\n    }\n\n    readCustomers() {\n        new CustomersTable().start(this.customerInfoReady, true);\n    }\n\n    readTanks = () => {\n        console.log(AppLogger(\"readTanks\"));\n        new TanksTable().start(null, true);\n    }\n\n    operationCallBack = () => {\n        this.readCustomers();\n    }\n\n    closeCustomersModal() {\n        this.readCustomers();\n        this.setState({ showCustomersModal: false, selectedCustomer: null });\n    }\n\n    closeUsersModal() {\n        this.setState({ showUsersModal: false, selectedCustomer: null });\n    }\n\n    closeTankForm() {\n        this.readTanks();\n        this.setState({ showTankForm: false, selectedCustomer: null });\n    }\n\n    deleteCustomer(customer) {\n        let confirmText = 'Deleting Customrt: Are you sure you want to delete ' + customer.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            console.log(AppLogger( \"deleteCustomer \" + customer.name));\n\n            let customrtTable = new CustomersTable();\n            customrtTable.deleteCustomer(customer.id, this.operationCallBack);\n        }\n    }\n\n    addUser(customer) {\n        this.setState({ showUsersModal: true, selectedCustomer: customer });\n    }\n\n    addTank(customer) {\n        this.setState({ showTankForm: true, selectedCustomer: customer });\n    }\n\n    editCustomer = (customer) => {\n        this.setState({ showCustomersModal: true, selectedCustomer: customer })\n    }\n\n    renderManageCustomersButton(customer, index) {\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={\"Settings\"}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" style={this.buttonStyle} onClick={() => this.addUser(customer)}>Add User</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.addTank(customer)}>Add Tank</MenuItem>\n                <MenuItem eventKey=\"3\" onClick={() => this.editCustomer(customer)}>Edit Customer</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"4\" onClick={() => this.deleteCustomer(customer)}>Delete Customer</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col xs={6}>\n                <Card\n                    id={\"filterCustomers\"}\n                    title=\"Filter Customers\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"Customer Name\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n    getFilteredCustomers = () => {\n        if (this.state.customers.length === 0 || this.state.filterStr.length === 0) {\n            return this.state.customers;\n        }\n\n        let customers = [...this.state.customers];\n        for (let index = customers.length - 1; index >= 0; index--) {\n            //console.log(AppLogger(\"getFilteredCustomers index \" + index);\n            let name = customers[index].name;\n            //console.log(AppLogger(\"getFilteredCustomers name \" + name);\n            //console.log(AppLogger(\"getFilteredCustomers filter \" + this.state.filterStr);\n            if (name.search(this.state.filterStr) === -1) {\n                customers.splice(index, 1);\n            }\n        }\n\n        return customers;\n    }\n\n    renderCustomers() {\n        //console.log(AppLogger( \"rendring customers\");\n\n        let filteredCustomers = this.getFilteredCustomers();\n\n        return (\n            filteredCustomers.map((item, index) =>\n                <Col xs={6} md={3} key={index}>\n                    <Card\n                        hCenter={true}\n                        statsIcon=\"fa\"\n                        id=\"ManageCustomer\"\n                        title={\n                            <div>\n                                <div>{item.name}</div>\n                            </div>}\n                        category={\n                            <object>\n                                {translate('industry')}\n                                <br />\n                                {item.industry}\n                            </object>\n                        }\n                        stats={null}\n                        content={<center>{this.renderManageCustomersButton(item, index)}</center>}\n                    />\n                </Col>\n            )\n        );\n    }\n\n    renderAddCustomrtButton() {\n        return (\n            <center>\n                <Button bsSize=\"large\" bsStyle=\"primary\" style={this.buttonStyle} className=\"pe-7s-add-user\"\n                    onClick={() => this.setState({ showCustomersModal: true, customer: null })}>\n                    {\" \"}Add New Customer\n                </Button>\n            </center>\n        );\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"addCustomer\"\n                                title=\"New Customer\"\n                                category=\"\"\n                                stats={null}\n                                content={this.renderAddCustomrtButton()}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        {this.renderCustomers()}\n                    </Row>\n                </Grid>\n                <CustomerForm show={this.state.showCustomersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeCustomersModal()} />\n                <UsersForm show={this.state.showUsersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeUsersModal()} />\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    customer={this.state.selectedCustomer} />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksTable from \"../../app/db/TanksTable\";\n//import { translate } from \"../../app/lang/lang\";\n\nexport class AlertsForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            at_level: -1,\n            alert: 0,\n            subject: \"\",\n            body: \"\",\n\n            numberOfAlerts: 0,\n            statusMessage: \"\"\n        };\n    }\n\n    createForm() {\n        return (\n            <form>\n                <FormGroup controlId=\"formBasicText\">\n                    <ControlLabel>Alert Level</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Alert Level in %\"}\n                        onChange={(e) => this.setState({ at_level: parseInt(e.target.value, 10), statusMessage:\"\" })}\n                    />\n                    <ControlLabel>Mail Subject</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Subject\"}\n                        onChange={(e) => this.setState({ subject: e.target.value , statusMessage:\"\"})}\n                    />\n                    <ControlLabel>Mail Body</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Body\"}\n                        onChange={(e) => this.setState({ body: e.target.value, statusMessage:\"\" })}\n                    />\n                </FormGroup>\n                <Button bsStyle=\"success\" style={{ margin: '3px' }} onClick={() => this.addAlert()}>Add New Alert</Button>\n                {this.state.statusMessage}\n            </form>\n        );\n    }\n\n    addAlert = () => {\n        let validate = this.validate()\n        if (validate !== 'ok') {\n            this.setState({ statusMessage: validate });\n            return;\n        }\n        else {\n            this.setState({ statusMessage: \"\" });\n        }\n\n        // find empty alert id\n        let alertId = 0;\n        for (let index = 1; index < 2000; index++) {\n            for (let alertIndex in this.props.level_alerts) {\n                if (this.props.level_alerts[alertIndex].alert === index){\n                    break;\n                }\n            }\n            alertId = index;\n        }\n\n        let alert = {\n            \"alert\": alertId,\n            \"at_level\": this.state.at_level,\n            \"mail\": {\n                \"subject\": this.state.subject,\n                \"body\": this.state.body\n            }\n        }\n        this.props.tank.level_alerts.push(alert);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n\n    getFormTitle() {\n        if (this.props.tank) {\n            return \"Tanks Alerts - \" + this.props.tank.name;\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    delete = (index) => {\n        this.props.tank.level_alerts.splice(index, 1);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n    renderAlerts = () => {\n        return (\n            <div>\n                {this.props.tank.level_alerts.length > 0 && <ControlLabel>Alerts</ControlLabel>}\n                {this.props.tank.level_alerts.map((alert, index) =>\n                    <div>\n                        Level - {alert.at_level}% Subject - {alert.mail.subject} Body - {alert.mail.body}\n                        <Button bsStyle=\"warning\" style={{ margin: '3px' }} value={index}\n                            onClick={(e) => this.delete(e.target.value)}>Delete</Button>\n                    </div>\n                )}\n                {this.props.tank.level_alerts.length > 0 && <hr />}\n            </div>\n        );\n    }\n\n    validate = () => {\n        if (this.state.at_level < 0 || this.state.at_level > 100) {\n            return 'invalid level - must be a number 0-100';\n        }\n        // check if this we have alert with the same level\n        for (let index in this.props.tank.level_alerts){\n            if (this.props.tank.level_alerts[index].at_level === this.state.at_level){\n                return \"invalid level - tank allready has alert in level \" + this.state.at_level + \"%\";\n            }\n        }\n\n        if (this.state.body.length === 0) {\n            return \"invalid body - body is empty\";\n        }\n        if (this.state.subject.length < 2) {\n            return \"invalid subject - subject is empty\";\n        }\n        return 'ok';\n    }\n\n    updateAlerts = () => {\n        let tt = new TanksTable();\n        let customer = this.props.tank.customer;\n        tt.updateTank(this.updateAlertsCallBack, this.props.tank, customer);\n    }\n\n    updateAlertsCallBack = (success) => {\n        if (success){\n            this.setState({statusMessage:\"Updating alerts succedded\"});\n        }\n        else{\n            this.setState({statusMessage:\"Updating alerts failed\"});\n        }\n        //this.props.onHide && this.props.onHide();\n    }\n\n    render() {\n        console.log(AppLogger( \"render\"));\n        if (this.props.tank === null) {\n            return null;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.getFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderAlerts()}\n                    {this.createForm()}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Done</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default AlertsForm;","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryTextColor, isAppReady } from 'app/adminHelper'\nimport TanksTable from \"../../app/db/TanksTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { TankForm } from \"views/Admin/TankForm\";\nimport { renderTanksParams } from \"views/Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\nimport { AppLogger } from \"app/Logger\";\n\nexport default class Tanks extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTankForm: false,\n            showAlerstForm: false,\n            filterStr: \"\",\n            tank: null,\n            customer: null,\n            tanks: []\n        };\n        let color = getPrimaryTextColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal' };\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            this.tanksReady();\n            clearInterval(this.timer);\n        }\n    }\n\n    readTanks = () => {\n        let forceRead = true;\n        if (this.state.tanks.length === 0) {\n            forceRead = false;\n        }\n        console.log(AppLogger(\"readTanks\"));\n        TanksTable().start(this.tanksReady, forceRead);\n    }\n\n    tanksReady = () => {\n        let tt = new TanksTable();\n        this.setState({ tanks: tt.getTanks().sort((a,b)=>a.name>b.name?1:-1) });\n    }\n\n    closeTankForm() {\n        this.setState({ showTankForm: false, tank: null, customer: null, tanks: [] });\n        TanksTable().start(this.tanksReady, true);\n    }\n\n    editTank(tank) {\n        let ct = new CustomersTable();\n        let customer = ct.getCustomer(tank.customer);\n        this.setState({ showTankForm: true, tank: tank, customer: customer });\n    }\n\n    editAlert = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    deleteTank = (tank) => {\n        let confirmText = 'Deleting Tank: Are you sure you want to delete this tanks?';\n        if (window.confirm(confirmText)) {\n            let tt = new TanksTable();\n            tt.deleteTank(tank.imei, this.readTanks);\n        }\n    }\n\n    renderManageTankButton(tank, index) {\n        let title =\n            <div>\n                <div>{\"Settings\"}</div>\n            </div>;\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.editTank(tank)}>Edit Tank</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.editAlert(tank)}>Edit Alerts</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"3\" onClick={() => this.deleteTank(tank)}>Delete Tank</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderTanks = () => {\n        return (\n            this.state.tanks.map((tank, index) => {\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={renderTanksParams(tank, null, false)}\n                                content={<center>{this.renderManageTankButton(tank, index)}</center>}\n                            />\n                        </Col >\n                    )\n                }\n            }\n            )\n        )\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    tank={this.state.tank}\n                    customer={this.state.customer} />\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()}/>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport UsersTable from \"../../app/db/UsersTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nexport default class Users extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { users: [], filterStr: \"\" };\n    }\n\n    componentDidMount() {\n        new UsersTable().start(this.usersReadyCallBack, true);\n    }\n\n    usersReadyCallBack = () => {\n        let usersTable = new UsersTable();\n        this.setState({ users: usersTable.getUsers() });\n    }\n\n    deleteUser(user) {\n        let confirmText = 'Deleting User: Are you sure you want to delete ' + user.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            let usersTable = new UsersTable();\n            usersTable.remove(user.name, this.usersReadyCallBack);\n        }\n    }\n\n    renderActions = (user, index) => {\n        let title = \" User Settings \";\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                bsSize=\"large\"\n                className=\"pe-7s-settings\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.deleteUser(user)}>Delete User</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    isFiltered = (user, custeomrName) => {\n        if (this.state.filterStr.length !== 0 &&\n            user.name.search(this.state.filterStr) === -1 &&\n            custeomrName.search(this.state.filterStr) === -1\n        ) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    renderUsers() {\n        return (\n            this.state.users.map((user, index) => {\n                let custeomrName = new CustomersTable().getCustomerName(user.customer_id);\n                if (this.isFiltered(user, custeomrName)) {\n                    return null;\n                }\n                else if (user.role.toLowerCase() !== 'admin') {\n                    return (\n                        <Col xs={12} sm={6} key={index}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"ManageUser\"\n                                title={\n                                    <div>{user.name}</div>\n                                }\n                                category=\"\"\n                                stats={\"Customer - \" + custeomrName}\n                                content={<center>{this.renderActions(user, index)}</center>}\n                            />\n                        </Col>\n                    )\n                }\n                else {\n                    return null;\n                }\n            }\n            ));\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col md={4}>\n                <Card\n                    id={\"filterUsers\"}\n                    title=\"Filter Users\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"User / Customer\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n\n    render() {\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        {this.renderUsers()}\n                    </Row>\n                </Grid>\n            </div>)\n    }\n}\n\n","import React from \"react\";\nimport { Grid, Row, Col, Button, Alert } from \"react-bootstrap\";\nimport { renderTanks } from \"../Tanks/Tanks.jsx\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { isAppReady, getPrimaryTextColor } from 'app/adminHelper'\nimport { Card } from \"../../components/Card/Card\"\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport Spinner from \"../App/Spinner\";\n\nexport default class Alerts extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { appIsredy: false , showAlerstForm: false, tank: null };\n        this.counter = 1;\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(this.isAppReady, 1000);\n        this.isAppReady();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    isAppReady = () => {\n        if (isAppReady()) {\n            this.setState({ appIsredy: true });\n        }\n        \n        if (this.state.showAlerstForm === false && this.counter++ % 60 === 0) { // refresh view to show new alerts\n            this.setState({ appIsredy: false });\n        }\n    }\n\n    renderAlertsTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        return renderTanks(readings, true);\n    }\n\n    showAlertsForm = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    renderAlertsAndEdit = (tank) => {\n        console.log(\"renderAlertsAndEdit\");\n        let nh = new NotificationHelper();\n        let levelNotification = nh.getLevelNotificationsOnTank(tank);\n        let hearBeatNotification = nh.getHeartBeatNotificationForTank(tank);\n        let editAlert = <center><Button bsStyle=\"danger\" style={{ margin: '3px', color:getPrimaryTextColor() }} onClick={() => this.showAlertsForm(tank)}>Edit Alerts</Button></center>;\n        if (levelNotification.length === 0 && hearBeatNotification.length === 0) {\n            return (\n                <div>\n                    <Alert bsStyle=\"info\" className=\"alert-with-icon\">\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">No Alerts On This Tank<q>{alert.name}</q></span>\n                        </center>\n                    </Alert>\n                    {editAlert}\n                </div>\n            );\n        }\n        else {\n            return (\n                <div>\n                    {levelAlertView(levelNotification)}\n                    {heartBeatView(hearBeatNotification)}\n                    {editAlert}\n                </div>\n            )\n        }\n    }\n    \n\n    renderTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        console.log(\"renderTanks\");\n        let nh = new NotificationHelper();\n        return (\n            readings.map((reading, index) => {\n                let tt = new TanksTable();\n                let tank = tt.getTank(reading.imei);\n                if (tank === null) {\n                    return null;\n                }\n                let asAlerts = nh.getLevelNotificationsOnTank(tank).length!==0?true:false\n\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={this.renderAlertsAndEdit(tank)}\n                                content={<TankCard\n                                    value={reading.actual_level}\n                                    height={\"40%\"}\n                                    volume={volume}\n                                    asAlerts={asAlerts} />}\n                            />\n                        </Col>\n                    )\n                }\n            }\n            )\n        )\n    }\n\n\n    render() {\n        if (this.state.appIsredy === false) {\n            return (\n                <Card\n                    hCenter={true}\n                    title=\"Loading ...\"\n                    content={<center><Spinner/></center>}\n                />\n            );\n        }\n\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()} />\n            </div>\n        );\n        /*\n                return (\n                    <div className=\"content\">\n                        <Grid fluid>\n                            <Row>\n                                {this.renderAlertsTanks()}\n                            </Row>\n                        </Grid>\n                    </div>) */\n    }\n\n}\n\n","import React from \"react\";\nimport {AppLogerMessages} from \"app/Logger\"\n\nexport default class Logger extends React.Component{\n    \n    render(){\n        return (\n            <div>\n                {AppLogerMessages().map((msg, index) => \n                    <div key={index}>\n                        { msg }\n                    </div>)\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\n\nimport Card from \"components/Card/Card\";\nimport { iconsArray } from \"variables/Variables.jsx\";\n\nclass Icons extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"202 Awesome Stroke Icons\"\n                ctAllIcons\n                category={\n                  <span>\n                    Handcrafted by our friends from{\" \"}\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"http://themes-pixeden.com/font-demos/7-stroke/index.html\"\n                    >\n                      Pixeden\n                    </a>\n                  </span>\n                }\n                content={\n                  <Row>\n                    {iconsArray.map((prop, key) => {\n                      return (\n                        <Col\n                          lg={2}\n                          md={3}\n                          sm={4}\n                          xs={6}\n                          className=\"font-icon-list\"\n                          key={key}\n                        >\n                          <div className=\"font-icon-detail\">\n                            <i className={prop} />\n                            <input type=\"text\" defaultValue={prop} />\n                          </div>\n                        </Col>\n                      );\n                    })}\n                  </Row>\n                }\n              />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Icons;\n","\nimport React from \"react\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { Redirect } from 'react-router-dom'\n\nexport default class LogOut extends React.Component {\n\n    componentDidMount() {\n        let logIn = new LogInHelper();\n        logIn.logOut();\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div>\n                <Redirect to='/dashboard' />\n            </div>\n        );\n    }\n}","import Dashboard from \"views/Dashboard/Dashboard\";\nimport Customers from \"views/Admin/Customers\"\nimport Tanks from \"views/Admin/Tanks\"\nimport Users from \"views/Admin/Users\"\nimport Alerst from \"views/Admin/Alerts\"\nimport Logger from \"../views/Admin/Logger\";\nimport Icons from \"../views/Icons/Icons\"\nimport Graph from \"../views/Graph/Graph\"\nimport Data from \"../views/Data/Data\"\nimport Locations from \"../views/Location/Locations\"\nimport LogOut from \"./../views/App/LogOut\"\n\nconst dashboardRoutes = [\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"pe-7s-graph\",\n    component: Dashboard\n  },\n  {\n    path: \"/graph\",\n    name: \"Graph\",\n    icon: \"pe-7s-graph1\",\n    component: Graph\n  },\n  {\n    path: \"/data\",\n    name: \"Data\",\n    icon: \"pe-7s-note2\",\n    component: Data\n  },\n  {\n    path: \"/locations\",\n    name: \"Locations\",\n    icon: \"pe-7s-map-2\",\n    component: Locations\n  },\n  {\n    path: \"/logout\",\n    name: \"Log Out\",\n    icon: \"pe-7s-power\",\n    component: LogOut\n  },\n  //{\n  //  path: \"/user\",\n  //  name: \"User Profile\",\n  //  icon: \"pe-7s-user\",\n  //  component: UserProfile\n  //},\n  //{\n  //  path: \"/table\",\n  //  name: \"Table List\",\n  //  icon: \"pe-7s-note2\",\n  //  component: TableList\n  //},\n  //{\n  //  path: \"/typography\",\n  //  name: \"Typography\",\n  //  icon: \"pe-7s-news-paper\",\n  //  component: Typography\n  //},\n\n\n\n  {\n    path: \"/customers\",\n    name: \"Admin - Customers\",\n    icon: \"pe-7s-users\",\n    component: Customers,\n    show: \"admin\"\n  },\n  {\n    path: \"/tanks\",\n    name: \"Admin - Tanks\",\n    icon: \"pe-7s-server\",\n    component: Tanks,\n    show: \"admin\"\n  },\n  {\n    path: \"/users\",\n    name: \"Admin - Users\",\n    icon: \"pe-7s-users\",\n    component: Users,\n    show: \"admin\"\n  },\n  {\n    path: \"/alerts\",\n    name: \"Admin - Alerts\",\n    icon: \"pe-7s-gleam\",\n    component: Alerst,\n    show: 'admin'\n  },\n  {\n    path: \"/logger\",\n    name: \"Admin - logs\",\n    icon: \"pe-7s-rocket\",\n    component: Logger,\n    show: \"admin\"\n  },\n  { \n   path: \"/icons\", \n    name: \"Icons\", \n    icon: \"pe-7s-science\", \n    component: Icons,\n    show:\"admin\" \n   },\n  //{ path: \"/maps\", name: \"Maps\", icon: \"pe-7s-map-marker\", component: Maps },\n  //{\n  //  path: \"/notifications\",\n  //  name: \"Notifications\",\n  //  icon: \"pe-7s-bell\",\n  //  component: Notifications\n  //},\n  //{\n  //  upgrade: true,\n  ///  path: \"/upgrade\",\n  //  name: \"Upgrade to PRO\",\n  //  icon: \"pe-7s-rocket\",\n  //  component: Upgrade\n  //},\n  { redirect: true, path: \"/\", to: \"/dashboard\", name: \"Dashboard\" }\n];\n\nexport default dashboardRoutes;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nimport HeaderLinks from \"./HeaderLinks.jsx\";\nimport { getPrimaryColor, getPrimarySideColor } from \"../../app/adminHelper\"\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport logo from \"assets/img/orbitBanner3000.png\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.mobileSidebarToggle = this.mobileSidebarToggle.bind(this);\n    this.state = {\n      sidebarExists: false\n    };\n  }\n  mobileSidebarToggle(e) {\n    if (this.state.sidebarExists === false) {\n      this.setState({\n        sidebarExists: true\n      });\n    }\n    e.preventDefault();\n    document.documentElement.classList.toggle(\"nav-open\");\n    //    var node = document.createElement(\"div\");\n    //    node.id = \"bodyClick\";\n    //    node.onclick = function() {\n    //      this.parentElement.removeChild(this);\n    //      document.documentElement.classList.toggle(\"nav-open\");\n    //    };\n    //    document.body.appendChild(node);\n  }\n  getBrand() {\n    var name;\n    dashboardRoutes.map((prop, key) => {\n      if (prop.collapse) {\n        prop.views.map((prop, key) => {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n          return null;\n        });\n      } else {\n        if (prop.redirect) {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        } else {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        }\n      }\n      return null;\n    });\n    return name;\n  }\n  render() {\n    let width = window.innerWidth;\n    let headerHeigth = '11.2%';\n    let showLogo = false;\n    let imageHeigth = '80%';\n    if (width < 991) {\n      showLogo = true;\n    }\n\n    if (true) {\n      return (\n        <Navbar fluid style={{ backgroundColor: getPrimaryColor() }} >\n          <Navbar.Toggle onClick={this.mobileSidebarToggle} />\n          {showLogo === true &&\n            <center style={{height: headerHeigth}}>\n              <a href=\"#pablo\">\n                <img src={logo} alt=\"logo_image\" style={{ height: imageHeigth, marginLeft:'10%', marginTop:'2%' }} />\n              </a>\n            </center>\n          }\n          {showLogo === false &&\n            <center style={{height: headerHeigth}}>\n              <a href=\"#pablo\" style={{ color: getPrimarySideColor() }}><b>{this.getBrand()}</b></a>\n            </center>\n          }\n        </Navbar>\n      );\n    }\n\n    return (\n      <Navbar fluid style={{ backgroundColor: getPrimaryColor() }} >\n        <Navbar.Header style={{ textAlign: 'center', width: '100%', float: 'none', display: 'inlineBlock' }}>\n          <Navbar.Brand>\n            <div >&nbsp;&nbsp;&nbsp;&nbsp;</div>\n          </Navbar.Brand>\n          <Navbar.Brand>\n            <a href=\"#pablo\" style={{ color: getPrimarySideColor(), height: headerHeigth }}><b>{this.getBrand()}</b></a>\n          </Navbar.Brand>\n          <Navbar.Brand style={{ position: 'absolute', width: '100%', left: '0', textAlign: 'center', margin: '0 auto' }}>\n            {showLogo === true && <img src={logo} alt=\"logo_image\" style={{ height: '10%' }} />}\n          </Navbar.Brand>\n          <Navbar.Toggle onClick={this.mobileSidebarToggle} />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <HeaderLinks />\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"assets/img/orbitBanner3000.png\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { isAppReady } from 'app/adminHelper'\nimport { getMenuTextColor } from 'app/adminHelper'\nimport { getVersion } from '../../app/adminHelper'\n\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      appIsReady: false\n    };\n  }\n  componentDidMount = () => {\n    this.timer = setInterval(this.checkIfAppIsReady, 1000);\n    this.checkIfAppIsReady();\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  checkIfAppIsReady = () => {\n    if (isAppReady()) {\n      this.setState({ appIsReady: true });\n      clearInterval(this.timer);\n    }\n  }\n\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  updateDimensions() {\n    this.setState({ width: window.innerWidth });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    //const sidebarBackground = {\n    //  backgroundImage: \"url(\" + imagine + \")\"\n    //};\n    let logInHelper = new LogInHelper();\n    let isAdmin = logInHelper.isAdmin();\n    let logInUser = logInHelper.getLogedInUser();\n\n    return (\n      <div\n        id=\"sidebar\"\n        className=\"sidebar\"\n        data-color={'primarySide'}\n      >\n        <div className=\"sidebar-background\" />\n        <div className=\"logo\" style={{ backgroundColor: 'white' }}>\n          <img src={logo} alt=\"logo_image\" style={{ height: '8.4%' }} />\n        </div>\n        <div className=\"sidebar-wrapper\">\n          <ul className=\"nav\">\n            {dashboardRoutes.map((prop, key) => {\n              let show = true;\n              if ((prop.show && prop.show === 'admin' && !isAdmin) ||\n                (prop.redirect && prop.redirect === true)) {\n                show = false;\n              }\n              if (show)\n                return (\n                  <li\n                    className={\n                      prop.upgrade\n                        ? \"active active-pro\"\n                        : this.activeRoute(prop.path)\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                    >\n                      <i className={prop.icon} style={{\n                        display: 'block',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        width: '100%',\n                        color: getMenuTextColor()\n                      }} />\n                      <div>\n                        <center><h4 style={{ color: getMenuTextColor() }}><b>{prop.name}</b></h4></center>\n                      </div>\n                    </NavLink>\n                  </li>\n                );\n              return null;\n            })}\n            <center>\n              <hr />\n              <div style={{ color: getMenuTextColor() }}><b>{getVersion()}</b></div>\n              <br />\n              <div style={{ color: getMenuTextColor() }}><b>User Name - {logInUser}</b></div>\n              <hr />\n            </center>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import { AppLogger } from \"app/Logger\";\nimport UsersTable from '../../app/db/UsersTable'\nimport { Cookies } from 'react-cookie';\nimport React from \"react\";\nimport { Modal, FormControl, Button } from 'react-bootstrap';\nimport { LogInHelper } from '../../app/logInHelper.jsx'\n\nexport default class LogIn extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { isLogIn: false, showAlert: false, showButton: false, debugMessage: \"start\" }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (new LogInHelper().isLogIn()) {\n            this.setState({ isLogIn: true });\n        }\n\n        new UsersTable().start(this.usersTableReady, true);\n    }\n\n    usersTableReady = () => {\n        this.setState({ showButton: true });\n    }\n\n    handleLogIn() {\n        console.log(AppLogger(\"handleLogIn\"));\n        console.log(AppLogger(this.state.userName));\n        console.log(AppLogger(this.state.password));\n\n        let ut = new UsersTable();\n        let user = ut.getUser(this.state.userName);\n\n        let loginAlert = null;\n        if (user) {\n            if (user.passwd === this.state.password) {\n                console.log(AppLogger(\"handleLogIn 1111\"));\n                try {\n                    console.log(AppLogger(\"handleLogIn22222\"));\n                    window.localStorage.setItem('user', this.state.userName);\n                    console.log(AppLogger(\"handleLogIn33333\"));\n                }\n                catch (e){\n                    console.log(AppLogger(\"handleLogIn4444\"));\n                    let cookie = new Cookies();\n                    cookie.set('user', this.state.userName);\n                }\n\n                this.setState({ isLogIn: true, logInAlert: null });\n                window.location.reload();\n                return;\n            }\n            else {\n                loginAlert = \"the password for \" + this.state.userName + \" is incorrect\";\n            }\n        }\n        else {\n            loginAlert = this.state.userName + \" not found\";\n        }\n        this.setState({ isLogIn: false, logInAlert: loginAlert });\n    }\n\n    handleChange(e) {\n        const target = e.target;\n\n        this.setState({\n            [target.name]: target.value,\n            logInAlert: null\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLogIn === false &&\n                    <Modal\n                        show={true}\n                        bsSize='lg'\n                        onHide={this.handleHide}\n                        container={this}\n                        aria-labelledby=\"contained-modal-title\"\n                    >\n                        <Modal.Header closeButton>\n                            <Modal.Title id=\"contained-modal-title\">\n                                LogIn\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            User Name:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"user name\"\n                                onChange={this.handleChange}\n                                name=\"userName\"\n                            />\n                            Password:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"password\"\n                                onChange={this.handleChange}\n                                name=\"password\"\n                            />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            {this.state.logInAlert &&\n                                <center>\n                                    Failed to Login: {this.state.logInAlert}\n                                </center>\n                            }\n                            {\n                                this.state.showButton &&\n                                <Button onClick={() => this.handleLogIn()}>LogIn</Button>\n                            }\n                        </Modal.Footer>\n                    </Modal>\n                }\n            </div>\n        );\n    }\n\n}","import Dashboard from \"layouts/Dashboard/Dashboard.jsx\";\n\nvar indexRoutes = [{ path: \"/\", name: \"Home\", component: Dashboard }];\n\nexport default indexRoutes;\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Header from \"components/Header/Header\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport LogIn from \"../../views/App/login.jsx\"\nimport UsersTable from \"../../app/db/UsersTable\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport {appIsReady} from \"../../app/adminHelper\"\nimport {setGraphFilteredTank, setDataFilteredTank} from \"../../app/readingsHelper\"\nimport { AppLogger } from \"app/Logger\";\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _notificationSystem: null,\n      appDbReady: 0\n    };\n  }\n\n  componentDidMount = () => {\n    // read mandatory tables \n    new UsersTable().start(this.userTableReady,false);\n  }\n\n  userTableReady = () => {\n    console.log(AppLogger(\"userTableReady\"));\n    new TanksTable().start(this.tanksTableReady,false);\n  }\n\n  tanksTableReady = () => {\n    new CustomersTable().start(this.customersTableReady,false);\n  }\n\n  customersTableReady = () => {\n    new TanksReading().getLastReading(this.allIsReady);\n  }\n\n  allIsReady = () => {\n    let tanks = new TanksTable().getCustomerTanks(new LogInHelper().getLoggedInCustomerId());\n\n    if (tanks.length > 0){\n      setGraphFilteredTank(tanks[0]);\n      setDataFilteredTank(tanks[0]);\n    }\n\n    appIsReady(true);\n  }\n\n  dbReady = () => {\n    this.setState({appDbReady:this.state.appDbReady+1});\n  }\n\n  /*\nhandleNotificationClick(position) {\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  this.state._notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: position,\n    autoDismiss: 15\n  });\n}\n\ncomponentDidMount() {\n  this.setState({ _notificationSystem: this.refs.notificationSystem });\n  var _notificationSystem = this.refs.notificationSystem;\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  _notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: \"tr\",\n    autoDismiss: 15\n  });\n}\n*/\n  componentDidUpdate(e) {\n    if (\n      window.innerWidth < 993 &&\n      e.history.location.pathname !== e.location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    }\n    if (e.history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n  }\n  render() {\n    let logInHelper = new LogInHelper();\n    if (!logInHelper.isLogIn()) {\n      return (<LogIn />);\n    }\n    else {\n      return (\n        <div className=\"wrapper\">\n          {/*<NotificationSystem ref=\"notificationSystem\" style={style} />*/}\n          <Sidebar {...this.props} />\n          <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n            <Header {...this.props} />\n            <Switch>\n              {dashboardRoutes.map((prop, key) => {\n                if (prop.name === \"Notifications\")\n                  return (\n                    <Route\n                      path={prop.path}\n                      key={key}\n                      render={routeProps => (\n                        <prop.component\n                          {...routeProps}\n                          handleClick={this.handleNotificationClick}\n                        />\n                      )}\n                    />\n                  );\n                if (prop.redirect)\n                  return <Redirect from={prop.path} to={prop.to} key={key} />;\n                return (\n                  <Route path={prop.path} component={prop.component} key={key} />\n                );\n              })}\n            </Switch>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(update) {\n  console.log(\"register \" + process.env.NODE_ENV);\n  if ('serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    console.log(\"addEventListener - load\");\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      console.log('load ' + swUrl + \" \" + isLocalhost);\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, update);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, update);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, onUpdate) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (onUpdate) {\n                onUpdate('New content is available',registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (onUpdate) {\n                onUpdate('Content is cached for offline use.', registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport indexRoutes from \"routes/index.jsx\";\nimport \"./assets/css/animate.min.css\";\nimport \"./assets/sass/light-bootstrap-dashboard.css?v=1.2.0\"; \nimport \"./assets/css/demo.css\";\nimport \"./assets/css/pe-icon-7-stroke.css\";\nimport packageJson from '../package.json';\nimport {setVersion} from \"./../src/app/adminHelper\"\nimport * as sw from './service-worker';\nimport {onUpdate} from './serviceWorkerConfig'\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n    {setVersion(packageJson.version)}\n    {console.log(\"Version - \" + packageJson.version)}\n      {indexRoutes.map((prop, key) => {\n        return <Route to={prop.path} component={prop.component} key={key} />;\n      })}\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\nsw.register(onUpdate);\n","\n\nexport function onUpdate(str, registration){\n        console.log(\"onUpdate \" + str);\n        console.log(registration);\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor\":\"white\",\"primaryTextColor\":\"#165B7D\",\"primarySideColor\":\"#165B7D\",\"secondaryColor\":\"#e9f5ff\",\"menuTextColor\":\"#e3e2e2\",\"backgroundColor\":\"#e2e3e4\"};"],"sourceRoot":""}