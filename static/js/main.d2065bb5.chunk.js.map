{"version":3,"sources":["assets/img/orbitBanner.png","variables/Variables.jsx","assets/img/orbitNewLogo2.png","app/restHelper.jsx","app/Logger.jsx","app/db/UsersTable.jsx","app/logInHelper.jsx","app/lang/dic.js","app/lang/lang.js","components/Header/HeaderLinks.jsx","app/adminHelper.jsx","components/Card/Card.jsx","components/StatsCard/StatsCard.jsx","app/db/TanksTable.jsx","app/notificationHelper.jsx","app/db/TankReadings.jsx","views/Notifications/TanksNotifications.jsx","app/db/CustomersTable.jsx","components/App/TankCard.jsx","views/Tanks/Tanks.jsx","views/Dashboard/RangeHelper.jsx","components/App/DateAndTime.jsx","views/Dashboard/DateAndTimeModal.jsx","views/Admin/TanksSelection.jsx","views/Dashboard/RangeView.jsx","components/App/VisGraph.jsx","app/readingsHelper.jsx","views/App/Spinner.jsx","views/Graph/Graph.jsx","views/TableList/TableList.jsx","views/TableList/PdfMaker.jsx","views/Data/Data.jsx","components/App/Map.jsx","views/Location/Locations.jsx","views/Dashboard/Dashboard.jsx","views/Admin/CustomerForm.jsx","views/Admin/UsersForm.jsx","views/Admin/TankForm.jsx","views/Admin/Customers.jsx","views/Admin/AlerstForm.jsx","views/Admin/Tanks.jsx","views/Admin/Users.jsx","views/Admin/Alerts.jsx","views/Admin/Logger.jsx","views/Icons/Icons.jsx","views/App/LogOut.jsx","routes/dashboard.jsx","components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","views/App/login.jsx","routes/index.jsx","layouts/Dashboard/Dashboard.jsx","index.js"],"names":["module","exports","__webpack_require__","p","defaultWidth","window","screen","width","style","Wrapper","Containers","DefaultStyle","position","padding","zIndex","WebkitBoxSizing","MozBoxSizing","boxSizing","height","display","border","fontSize","WebkitFontSmoothing","fontFamily","fontWeight","color","tl","top","bottom","left","right","tr","tc","margin","marginLeft","bl","br","bc","NotificationItem","cursor","borderRadius","opacity","transition","WebkitTransform","transform","willChange","isHidden","isVisible","success","borderTop","backgroundColor","WebkitBoxShadow","MozBoxShadow","boxShadow","error","warning","info","Title","marginTop","MessageWrapper","marginRight","maxWidthwidth","Dismiss","float","lineHeight","outline","textAlign","Action","background","ActionWrapper","thArray","tdArray","iconsArray","dataPie","labels","series","legendPie","names","types","dataSales","optionsSales","low","high","showArea","axisX","showGrid","lineSmooth","showLine","showPoint","fullWidth","chartPadding","responsiveSales","labelInterpolationFnc","value","legendSales","dataBar","optionsBar","seriesBarDistance","responsiveBar","legendBar","customers","users","levelMonitoring","getTankReadingStartEndUri","tankId","from","to","getCustomersUri","getUsersUri","logList","AppLogger","caller","msg","d","Date","log","getHours","slice","getMinutes","getSeconds","constructor","name","unshift","length","splice","console","usersList","UsersTable","pop","callBack","_this","this","clearUsers","uri","axios","get","then","response","data","index","push","catch","userName","sort","a","b","customer","pass","role","callback","_this2","user","passwd","customer_id","post","_this3","delete","readUsers","password","forceRead","LogInHelper","Object","classCallCheck","logOutStr","userKey","createClass","key","getUser","getLogedInUser","Cookies","set","isLogIn","industries","liquids","sensors","dictionary","en","tankName","buildingName","volume","leftInTank","lastUpdate","capacity","liquid","sensorLength","sensor","tankLocation","tanksLocations","volumeHistory","Last 6H","Last 12H","Last 24H","Last 2 Days","Last Week","Select Range","Custom Range","latestData","selectEn","selectEs","logOut","customerName","mailAddress","addNewCustomer","add","cancel","update","addingNewUser","industry","Residential buildings","Commercial buildings","Hospitals","Hotels","Agriculture","Food and drinks","Oils and fuels","Emergency services","Utility service provider","water","diesel","fertilizer","es","getLang","lang","setLang","translate","text","translated","HeaderLinks","props","possibleConstructorReturn","getPrototypeOf","call","handleLogOut","location","reload","selectLang","setState","state","react_default","createElement","Nav","pullRight","Component","appIsready","isAppReady","getFormattedTime","time","moment","utc","format","Card","_Component","apply","arguments","inherits","colorStyle","className","plain","hCenter","title","category","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","content","legend","statsIcon","stats","StatsCard","Row","Col","xs","bigIcon","statsText","statsValue","statsIconText","tankList","TanksTable","getImeiFromUrl","str","search","imei","addTank","formState","customerId","postJson","iccid","liquid_type","sensor_type","heartbeat_timeout","sampling_interval","phone","building","level_alerts","getNewServer","updateTank","tank","put","getTankSettingsUri","deleteTank","url","customersId","tanks","getTank","split","readTanks","NotificationHelper","start","notifications","getLoggedInCustomerId","getCustomerTanks","tankIndex","getLevelNotificationsOnTank","map","notification","alertIndex","status","alertObj","level","at_level","getHeartBeatNotificationForTank","heartbeat_ok","lastLevelMonitoring","numberOfTanks","lastReadingTime","TanksReading","getLastReadingTime","updateTankReadings","tt","getTankName","sample_level","actual_level","server_time","tank_time","range","request","responseURL","fromToLevelMonitoring","numberOfreadings","sorted","parseInt","tanksInfoReady","isLast","list","getCapacity","getLiquidType","toLowerCase","getSortReading","setClassParams","levelAlertView","alerts","alert","Alert","bsStyle","data-notify","heartBeatView","hearBeatAlerts","heartBeatAlert","customerList","CustomersTable","addCustomerToCustomers","id","getCustomer","mailingList","mailing_list","json","_this4","readCustomers","timeout","TankCard","asAlerts","startColor","endColor","textColor","toString","tick","bind","assertThisInitialized","timer","setInterval","clearInterval","substring","factor","parseFloat","innerHeight","radius","getRadiusFromHeight","fillColor","interpolateRgb","interpolate","gradientStops","stopColor","darker","stopOpacity","offset","brighter","lib_default","percent","textSize","textOffsetX","textOffsetY","textRenderer","Math","round","min","textPixels","valueStyle","percentStyle","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","circleStyle","fill","waveStyle","textStyle","waveTextStyle","onClick","renderTank","renderTanks","readings","reading","asAlert","titleColor","sm","Card_Card","renderTanksParams","App_TankCard","isTankFiltered","filterStr","getCustomerId","getCustomerName","isAdmin","renderTableRow","t1","t2","Table","striped","bordered","condensed","hover","renderFilterTanksCard","md","FormControl","type","placeholder","onChange","e","target","RangeHelper","getFirstRangeInHours","rangesValues","getRanges","ranges","getRangeInHour","getSelectedString","getRangeForHourse","timeInHours","forClass","getReadingFromTo","rangeReady","getRangeFromTo","defaultProps","onHide","autoFocus","autoFocusEndDate","initialStartDate","initialEndDate","startDateId","START_DATE","startDatePlaceholderText","endDateId","endDatePlaceholderText","disabled","required","screenReaderInputMessage","showClearDates","showDefaultInputIcon","customInputIcon","customArrowIcon","customCloseIcon","block","small","regular","renderMonthText","orientation","VERTIVAL_ORIENTATION","anchorDirection","ANCHOR_LEFT","horizontalMargin","withPortal","withFullScreenPortal","initialVisibleMonth","numberOfMonths","keepOpenOnDateSelect","reopenPickerOnClearDates","isRTL","navPrev","navNext","onPrevMonthClick","onNextMonthClick","onClose","renderCalendarDay","undefined","renderDayContents","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","isDayHighlighted","displayFormat","localeData","longDateFormat","monthFormat","phrases","DateRangePickerPhrases","stateDateWrapper","date","DateRangePickerWrapper","getNumberOfMonth","innerWidth","handelClose","startDate","toDate","endDate","focusedInput","END_DATE","onDatesChange","onFocusChange","_ref","_this$state","omit","react_dates","assign","React","DateAndTimeModal","createTimeArray","timeArray","hour","hourStr","dateSelected","end","closeModal","startTime","endTime","quickSelection","Modal","bsSize","aria-labelledby","Header","closeButton","Body","DateAndTime","DropdownButton","onSelect","MenuItem","eventKey","Footer","Button","TanksSelection","tankSelected","selectedTankName","getSelectedTank","ButtonGroup","RangeView","rangeSelected","rangeInHour","showDateAndTimeModal","hoursSelected","getDate","minutes","setHours","setMinutes","dateAndTimeModalClose","getTime","ButtonToolbar","TanksSelection_TanksSelection","Dashboard_DateAndTimeModal","show","VisGraph","getData","maxPoints","stayIndex","i","myFormatter","t","splitted","x","dy","getLegendItems","items","obj","colors","getxValues","tickTotal","dataLen","ret","firstX","hours","jumps","crosshairValues","legenItems","xValues","stroke","tickValues","tickFormat","line","ticks","v","replace","size","xType","graphFilteredTank","dataFilteredTank","setGraphFilteredTank","setDataFilteredTank","isFiltered","getTanks","getFilteredReadings","readingsData","toConsumableArray","Spinner","react_loader_spinner_default","Graph","componentWillUnmount","rh","graphReadings","rangeIndex","retArray","maxX","maxCapacity","current","tmpData","currentIndex","levels","times","y","components_Card_Card","Spinner_Spinner","rangeReadingToGraphData","selectedRange","Dashboard_RangeView","VisGraph_VisGraph","TableList","componentDidMount","Promise","all","ExcelTable","excelTableReady","getHeader","createData","arrayForExcel","arrayForPdf","arrayForTable","tanksNames","count","rangeReadings","sample","samples","vol","row","rowForExcel","creatPdfDocDefinition","array","table","headerRows","widths","body","pageBreak","exportToPdf","exportOrPrint","pdfDocDefinition","pdfMake","docDefinition","compress","pdfFonts","vfs","tableLayouts","exampleLayout","hLineWidth","node","vLineWidth","hLineColor","paddingLeft","paddingRight","createPdf","download","print","err","makePdf","renderExport","rangeButtons","default","button","test","navigator","userAgent","header","overflowY","prop","overflow","Data","tableReadings","views_TableList_TableList","MapContainer","onMarkerClick","marker","selectedPlace","activeMarker","showingInfoWindow","onMouseOver","activeMarkerTitle","onMapClicked","renderMarkers","markers","dist","onMouseover","lat","lng","getCenter","ignore","div","convertGpsPosition","pos","latSign","lngSign","floor","style1","google","zoom","onReady","mapIsReady","initialCenter","visible","GoogleApiWrapper","apiKey","Locations","lastTanksReadings","getLevelMonitoring","renderInfo","getMarkers","gps","long","fromDashbord","Map","Dashboard","fastTimer","tickToggle","getLastReading","tanksReadingReady","dataIsReady","fastTick","logInHelper","lm","renderAlerts","nh","levelAlerts","getLevelNotifications","getHeartBeatNotification","history","StatsCard_StatsCard","animation","getRangeReadingOnce","src","logo","alt","Grid","fluid","views_Graph_Graph","Location_Locations","views_Data_Data","CustomerForm","_React$Component","restCallBack","message","hideButtons","formMessage","deleteMail","tmpMailingList","addMail","validateMail","mailAddrees","createMailForm","mail","align","validatCustomer","updateCustomer","FormGroup","controlId","validationState","ControlLabel","componentClass","renderFormCustomerFiled","deleteCustomer","addnewCustomerText","createForm","renderButtons","UsersForm","settingMessage","validate","indexOf","validatPass","validatUser","renderFormUsersFiled","addNewUser","SettingsModal","TankForm","_React$Component2","updateSettingsTimeOut","showSettingsModal","settingsModalText","updateSettingsModal","textArray","addTankCallBack","succedded","simConfigurationIndex","configureThingDone","configureThing","setServerIp","updateTankCallBack","samplingIntervalChanged","liquidSelected","sensorSelected","renderIccdAndPhone","iccidPh","phoneNumberPh","switchSimConfig","getToken","UserName","Password","token","sendSemsToThing","config","headers","Authorization","Message","From","nextFunction","setServerIpDone","setProtocol","smsTimeOut","setProtocolDone","updateData","liquidTypeIndex","sensorTypeIndex","imeiPh","namePh","buildingPh","capacityPh","highPh","sampleIntervalPh","runTimer","simConfigurationTitle","validateString","validateForm","renderFormTitle","renderTankFileds","addNewTank","TankForm_SettingsModal","Customers","customerInfoReady","getCustomers","operationCallBack","editCustomer","showCustomersModal","selectedCustomer","getFilteredCustomers","showTankForm","showUsersModal","buttonStyle","borderColor","whiteSpace","confirmText","confirm","concat","addUser","divider","item","renderManageCustomersButton","_this5","_this6","renderFilterCard","renderAddCustomrtButton","renderCustomers","CustomerForm_CustomerForm","closeCustomersModal","UsersForm_UsersForm","closeUsersModal","TankForm_TankForm","closeTankForm","AlertsForm","addAlert","statusMessage","alertId","subject","numberOfAlerts","updateAlerts","updateAlertsCallBack","getFormTitle","Tanks","tanksReady","editAlert","showAlerstForm","closeAlertsForm","renderManageTankButton","editTank","AlerstForm_AlertsForm","Users","usersReadyCallBack","usersTable","getUsers","renderActions","deleteUser","custeomrName","remove","renderUsers","Alerts","appIsredy","counter","renderAlertsTanks","showAlertsForm","renderAlertsAndEdit","levelNotification","hearBeatNotification","Logger","Icons","rel","href","lg","defaultValue","LogOut","Redirect","dashboardRoutes","path","icon","component","Alerst","redirect","mobileSidebarToggle","sidebarExists","preventDefault","document","documentElement","classList","toggle","collapse","views","pathname","Navbar","Brand","getBrand","Toggle","Collapse","Header_HeaderLinks","Sidebar","checkIfAppIsReady","appIsReady","routeName","updateDimensions","addEventListener","logInUser","data-color","upgrade","activeRoute","NavLink","activeClassName","LogIn","usersTableReady","showButton","showAlert","handleChange","loginAlert","logInAlert","_this$setState","defineProperty","handleHide","container","handleLogIn","indexRoutes","userTableReady","tanksTableReady","customersTableReady","allIsReady","dbReady","appDbReady","_notificationSystem","action","scrollTop","scrollingElement","refs","mainPanel","components_Sidebar_Sidebar","ref","components_Header_Header","Switch","Route","render","routeProps","handleClick","handleNotificationClick","login_LogIn","ReactDOM","HashRouter","packageJson","version","getElementById"],"mappings":"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ACA,eACA,YACA,eACA,mBACA,aACA,kBACA,aACA,mBACA,aACA,cACA,eACA,qBACA,iBACA,cACA,cACA,eACA,kBACA,eACA,iBACA,eACA,cACA,YACA,eACA,aACA,qBACA,aACA,cACA,kBACA,uBACA,YACA,qBACA,WACA,iBACA,mBACA,wBACA,cACA,oBACA,eACA,2BACA,cACA,mBACA,oBACA,0BACA,iBACA,mBACA,eACA,0BACA,iBACA,eACA,aACA,gBACA,gBACA,kBACA,cACA,aACA,eACA,eACA,iBACA,cACA,cACA,cACA,eACA,eACA,YACA,cACA,kBACA,aACA,gBACA,eACA,gBACA,gBACA,cACA,eACA,eACA,aACA,gBACA,aACA,eACA,eACA,gBACA,iBACA,sBACA,kBACA,cACA,cACA,cACA,gBACA,aACA,aACA,cACA,cACA,kBACA,cACA,aACA,mBACA,aACA,YACA,cACA,YACA,sBACA,YACA,cACA,aACA,YACA,oBACA,oBACA,oBACA,cACA,qBACA,iBACA,aACA,aACA,mBACA,kBACA,cACA,cACA,aACA,aACA,gBACA,cACA,aACA,YACA,mBACA,aACA,kBACA,uBACA,eACA,aACA,aACA,aACA,gBACA,aACA,aACA,cACA,aACA,eACA,aACA,aACA,aACA,cACA,cACA,eACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,eACA,aACA,eACA,aACA,gBACA,gBACA,aACA,aACA,eACA,iBACA,iBACA,iBACA,iBACA,aACA,YACA,gBACA,aACA,eACA,kBACA,eACA,gBACA,gBACA,eACA,cACA,cACA,cACA,aACA,aACA,eACA,aACA,mBACA,gBACA,aACA,aACA,kBACA,gBACA,aACA,gBACA,aACA,aACA,kBACA,eACA,eACA,cACA,iBAwHAC,QA/GY,CACZC,OAAQ,CAAC,MAAO,MAAO,OACvBC,OAAQ,CAAC,GAAI,GAAI,KA8GjBC,UA5Gc,CACdC,MAAO,CAAC,OAAQ,SAAU,eAC1BC,MAAO,CAAC,OAAQ,SAAU,YA2G1BC,UAvGc,CACdL,OAAQ,CAC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","file":"static/js/main.d2065bb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/orbitBanner.13e59aff.png\";","//\n// //\n// // // For notifications\n// //\n//\nvar defaultWidth =\n  window.screen.width > 768 ? window.screen.width * 1 / 3 : window.screen.width;\n\nvar style = {\n  Wrapper: {},\n  Containers: {\n    DefaultStyle: {\n      position: \"fixed\",\n      width: defaultWidth,\n      padding: \"10px 10px 10px 20px\",\n      zIndex: 9998,\n      WebkitBoxSizing: \"\",\n      MozBoxSizing: \"\",\n      boxSizing: \"\",\n      height: \"auto\",\n      display: \"inline-block\",\n      border: \"0\",\n      fontSize: \"14px\",\n      WebkitFontSmoothing: \"antialiased\",\n      fontFamily: '\"Roboto\",\"Helvetica Neue\",Arial,sans-serif',\n      fontWeight: \"400\",\n      color: \"#FFFFFF\"\n    },\n\n    tl: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    tr: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    tc: {\n      top: \"0px\",\n      bottom: \"auto\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    },\n\n    bl: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    br: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    bc: {\n      top: \"auto\",\n      bottom: \"0px\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    }\n  },\n\n  NotificationItem: {\n    DefaultStyle: {\n      position: \"relative\",\n      width: \"100%\",\n      cursor: \"pointer\",\n      borderRadius: \"4px\",\n      fontSize: \"14px\",\n      margin: \"10px 0 0\",\n      padding: \"10px\",\n      display: \"block\",\n      WebkitBoxSizing: \"border-box\",\n      MozBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      opacity: 0,\n      transition: \"all 0.5s ease-in-out\",\n      WebkitTransform: \"translate3d(0, 0, 0)\",\n      transform: \"translate3d(0, 0, 0)\",\n      willChange: \"transform, opacity\",\n\n      isHidden: {\n        opacity: 0\n      },\n\n      isVisible: {\n        opacity: 1\n      }\n    },\n\n    success: {\n      borderTop: 0,\n      backgroundColor: \"#a1e82c\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    error: {\n      borderTop: 0,\n      backgroundColor: \"#fc727a\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    warning: {\n      borderTop: 0,\n      backgroundColor: \"#ffbc67\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    info: {\n      borderTop: 0,\n      backgroundColor: \"#63d8f1\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    }\n  },\n\n  Title: {\n    DefaultStyle: {\n      fontSize: \"30px\",\n      margin: \"0\",\n      padding: 0,\n      fontWeight: \"bold\",\n      color: \"#FFFFFF\",\n      display: \"block\",\n      left: \"15px\",\n      position: \"absolute\",\n      top: \"50%\",\n      marginTop: \"-15px\"\n    }\n  },\n\n  MessageWrapper: {\n    DefaultStyle: {\n      marginLeft: \"55px\",\n      marginRight: \"30px\",\n      padding: \"0 12px 0 0\",\n      color: \"#FFFFFF\",\n      maxWidthwidth: \"89%\"\n    }\n  },\n\n  Dismiss: {\n    DefaultStyle: {\n      fontFamily: \"inherit\",\n      fontSize: \"21px\",\n      color: \"#000\",\n      float: \"right\",\n      position: \"absolute\",\n      right: \"10px\",\n      top: \"50%\",\n      marginTop: \"-13px\",\n      backgroundColor: \"#FFFFFF\",\n      display: \"block\",\n      borderRadius: \"50%\",\n      opacity: \".4\",\n      lineHeight: \"11px\",\n      width: \"25px\",\n      height: \"25px\",\n      outline: \"0 !important\",\n      textAlign: \"center\",\n      padding: \"6px 3px 3px 3px\",\n      fontWeight: \"300\",\n      marginLeft: \"65px\"\n    },\n\n    success: {\n      // color: '#f0f5ea',\n      // backgroundColor: '#a1e82c'\n    },\n\n    error: {\n      // color: '#f4e9e9',\n      // backgroundColor: '#fc727a'\n    },\n\n    warning: {\n      // color: '#f9f6f0',\n      // backgroundColor: '#ffbc67'\n    },\n\n    info: {\n      // color: '#e8f0f4',\n      // backgroundColor: '#63d8f1'\n    }\n  },\n\n  Action: {\n    DefaultStyle: {\n      background: \"#ffffff\",\n      borderRadius: \"2px\",\n      padding: \"6px 20px\",\n      fontWeight: \"bold\",\n      margin: \"10px 0 0 0\",\n      border: 0\n    },\n\n    success: {\n      backgroundColor: \"#a1e82c\",\n      color: \"#ffffff\"\n    },\n\n    error: {\n      backgroundColor: \"#fc727a\",\n      color: \"#ffffff\"\n    },\n\n    warning: {\n      backgroundColor: \"#ffbc67\",\n      color: \"#ffffff\"\n    },\n\n    info: {\n      backgroundColor: \"#63d8f1\",\n      color: \"#ffffff\"\n    }\n  },\n\n  ActionWrapper: {\n    DefaultStyle: {\n      margin: 0,\n      padding: 0\n    }\n  }\n};\n\n//\n// //\n// // // For tables\n// //\n//\nconst thArray = [\"ID\", \"Name\", \"Salary\", \"Country\", \"City\"];\nconst tdArray = [\n  [\"1\", \"Dakota Rice\", \"$36,738\", \"Niger\", \"Oud-Turnhout\"],\n  [\"2\", \"Minerva Hooper\", \"$23,789\", \"Curaçao\", \"Sinaai-Waas\"],\n  [\"3\", \"Sage Rodriguez\", \"$56,142\", \"Netherlands\", \"Baileux\"],\n  [\"4\", \"Philip Chaney\", \"$38,735\", \"Korea, South\", \"Overland Park\"],\n  [\"5\", \"Doris Greene\", \"$63,542\", \"Malawi\", \"Feldkirchen in Kärnten\"],\n  [\"6\", \"Mason Porter\", \"$78,615\", \"Chile\", \"Gloucester\"]\n];\n\n//\n// //\n// // // For icons\n// //\n//\nconst iconsArray = [\n  \"pe-7s-album\",\n  \"pe-7s-arc\",\n  \"pe-7s-back-2\",\n  \"pe-7s-bandaid\",\n  \"pe-7s-car\",\n  \"pe-7s-diamond\",\n  \"pe-7s-door-lock\",\n  \"pe-7s-eyedropper\",\n  \"pe-7s-female\",\n  \"pe-7s-gym\",\n  \"pe-7s-hammer\",\n  \"pe-7s-headphones\",\n  \"pe-7s-helm\",\n  \"pe-7s-hourglass\",\n  \"pe-7s-leaf\",\n  \"pe-7s-magic-wand\",\n  \"pe-7s-male\",\n  \"pe-7s-map-2\",\n  \"pe-7s-next-2\",\n  \"pe-7s-paint-bucket\",\n  \"pe-7s-pendrive\",\n  \"pe-7s-photo\",\n  \"pe-7s-piggy\",\n  \"pe-7s-plugin\",\n  \"pe-7s-refresh-2\",\n  \"pe-7s-rocket\",\n  \"pe-7s-settings\",\n  \"pe-7s-shield\",\n  \"pe-7s-smile\",\n  \"pe-7s-usb\",\n  \"pe-7s-vector\",\n  \"pe-7s-wine\",\n  \"pe-7s-cloud-upload\",\n  \"pe-7s-cash\",\n  \"pe-7s-close\",\n  \"pe-7s-bluetooth\",\n  \"pe-7s-cloud-download\",\n  \"pe-7s-way\",\n  \"pe-7s-close-circle\",\n  \"pe-7s-id\",\n  \"pe-7s-angle-up\",\n  \"pe-7s-wristwatch\",\n  \"pe-7s-angle-up-circle\",\n  \"pe-7s-world\",\n  \"pe-7s-angle-right\",\n  \"pe-7s-volume\",\n  \"pe-7s-angle-right-circle\",\n  \"pe-7s-users\",\n  \"pe-7s-angle-left\",\n  \"pe-7s-user-female\",\n  \"pe-7s-angle-left-circle\",\n  \"pe-7s-up-arrow\",\n  \"pe-7s-angle-down\",\n  \"pe-7s-switch\",\n  \"pe-7s-angle-down-circle\",\n  \"pe-7s-scissors\",\n  \"pe-7s-wallet\",\n  \"pe-7s-safe\",\n  \"pe-7s-volume2\",\n  \"pe-7s-volume1\",\n  \"pe-7s-voicemail\",\n  \"pe-7s-video\",\n  \"pe-7s-user\",\n  \"pe-7s-upload\",\n  \"pe-7s-unlock\",\n  \"pe-7s-umbrella\",\n  \"pe-7s-trash\",\n  \"pe-7s-tools\",\n  \"pe-7s-timer\",\n  \"pe-7s-ticket\",\n  \"pe-7s-target\",\n  \"pe-7s-sun\",\n  \"pe-7s-study\",\n  \"pe-7s-stopwatch\",\n  \"pe-7s-star\",\n  \"pe-7s-speaker\",\n  \"pe-7s-signal\",\n  \"pe-7s-shuffle\",\n  \"pe-7s-shopbag\",\n  \"pe-7s-share\",\n  \"pe-7s-server\",\n  \"pe-7s-search\",\n  \"pe-7s-film\",\n  \"pe-7s-science\",\n  \"pe-7s-disk\",\n  \"pe-7s-ribbon\",\n  \"pe-7s-repeat\",\n  \"pe-7s-refresh\",\n  \"pe-7s-add-user\",\n  \"pe-7s-refresh-cloud\",\n  \"pe-7s-paperclip\",\n  \"pe-7s-radio\",\n  \"pe-7s-note2\",\n  \"pe-7s-print\",\n  \"pe-7s-network\",\n  \"pe-7s-prev\",\n  \"pe-7s-mute\",\n  \"pe-7s-power\",\n  \"pe-7s-medal\",\n  \"pe-7s-portfolio\",\n  \"pe-7s-like2\",\n  \"pe-7s-plus\",\n  \"pe-7s-left-arrow\",\n  \"pe-7s-play\",\n  \"pe-7s-key\",\n  \"pe-7s-plane\",\n  \"pe-7s-joy\",\n  \"pe-7s-photo-gallery\",\n  \"pe-7s-pin\",\n  \"pe-7s-phone\",\n  \"pe-7s-plug\",\n  \"pe-7s-pen\",\n  \"pe-7s-right-arrow\",\n  \"pe-7s-paper-plane\",\n  \"pe-7s-delete-user\",\n  \"pe-7s-paint\",\n  \"pe-7s-bottom-arrow\",\n  \"pe-7s-notebook\",\n  \"pe-7s-note\",\n  \"pe-7s-next\",\n  \"pe-7s-news-paper\",\n  \"pe-7s-musiclist\",\n  \"pe-7s-music\",\n  \"pe-7s-mouse\",\n  \"pe-7s-more\",\n  \"pe-7s-moon\",\n  \"pe-7s-monitor\",\n  \"pe-7s-micro\",\n  \"pe-7s-menu\",\n  \"pe-7s-map\",\n  \"pe-7s-map-marker\",\n  \"pe-7s-mail\",\n  \"pe-7s-mail-open\",\n  \"pe-7s-mail-open-file\",\n  \"pe-7s-magnet\",\n  \"pe-7s-loop\",\n  \"pe-7s-look\",\n  \"pe-7s-lock\",\n  \"pe-7s-lintern\",\n  \"pe-7s-link\",\n  \"pe-7s-like\",\n  \"pe-7s-light\",\n  \"pe-7s-less\",\n  \"pe-7s-keypad\",\n  \"pe-7s-junk\",\n  \"pe-7s-info\",\n  \"pe-7s-home\",\n  \"pe-7s-help2\",\n  \"pe-7s-help1\",\n  \"pe-7s-graph3\",\n  \"pe-7s-graph2\",\n  \"pe-7s-graph1\",\n  \"pe-7s-graph\",\n  \"pe-7s-global\",\n  \"pe-7s-gleam\",\n  \"pe-7s-glasses\",\n  \"pe-7s-gift\",\n  \"pe-7s-folder\",\n  \"pe-7s-flag\",\n  \"pe-7s-filter\",\n  \"pe-7s-file\",\n  \"pe-7s-expand1\",\n  \"pe-7s-exapnd2\",\n  \"pe-7s-edit\",\n  \"pe-7s-drop\",\n  \"pe-7s-drawer\",\n  \"pe-7s-download\",\n  \"pe-7s-display2\",\n  \"pe-7s-display1\",\n  \"pe-7s-diskette\",\n  \"pe-7s-date\",\n  \"pe-7s-cup\",\n  \"pe-7s-culture\",\n  \"pe-7s-crop\",\n  \"pe-7s-credit\",\n  \"pe-7s-copy-file\",\n  \"pe-7s-config\",\n  \"pe-7s-compass\",\n  \"pe-7s-comment\",\n  \"pe-7s-coffee\",\n  \"pe-7s-cloud\",\n  \"pe-7s-clock\",\n  \"pe-7s-check\",\n  \"pe-7s-chat\",\n  \"pe-7s-cart\",\n  \"pe-7s-camera\",\n  \"pe-7s-call\",\n  \"pe-7s-calculator\",\n  \"pe-7s-browser\",\n  \"pe-7s-box2\",\n  \"pe-7s-box1\",\n  \"pe-7s-bookmarks\",\n  \"pe-7s-bicycle\",\n  \"pe-7s-bell\",\n  \"pe-7s-battery\",\n  \"pe-7s-ball\",\n  \"pe-7s-back\",\n  \"pe-7s-attention\",\n  \"pe-7s-anchor\",\n  \"pe-7s-albums\",\n  \"pe-7s-alarm\",\n  \"pe-7s-airplay\"\n];\n\n//\n// //\n// // // // For dashboard's charts\n// //\n//\n// Data for Pie Chart\nvar dataPie = {\n  labels: [\"40%\", \"20%\", \"40%\"],\n  series: [40, 20, 40]\n};\nvar legendPie = {\n  names: [\"Open\", \"Bounce\", \"Unsubscribe\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Line Chart\nvar dataSales = {\n  labels: [\n    \"9:00AM\",\n    \"12:00AM\",\n    \"3:00PM\",\n    \"6:00PM\",\n    \"9:00PM\",\n    \"12:00PM\",\n    \"3:00AM\",\n    \"6:00AM\"\n  ],\n  series: [\n    [80, 90, 100, 22, 33, 44, 88, 80],\n    [80, 88, 44, 33, 0, 99, 90, 80],\n    [22, 100, 80, 90, 44, 88, 80, 90]\n  ]\n};\nvar optionsSales = {\n  low: 0,\n  high: 100,\n  showArea: false,\n  height: \"245px\",\n  axisX: {\n    showGrid: false\n  },\n  lineSmooth: true,\n  showLine: true,\n  showPoint: true,\n  fullWidth: true,\n  chartPadding: {\n    right: 50\n  }\n};\nvar responsiveSales = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendSales = {\n  names: [\"Tank1\", \"Tank2\", \"Tank3\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Bar Chart\nvar dataBar = {\n  labels: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"Mai\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ],\n  series: [\n    [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895],\n    [412, 243, 280, 580, 453, 353, 300, 364, 368, 410, 636, 695]\n  ]\n};\nvar optionsBar = {\n  seriesBarDistance: 10,\n  axisX: {\n    showGrid: false\n  },\n  height: \"245px\"\n};\nvar responsiveBar = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      seriesBarDistance: 5,\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendBar = {\n  names: [\"Tesla Model S\", \"BMW 5 Series\"],\n  types: [\"info\", \"danger\"]\n};\n\nmodule.exports = {\n  style, // For notifications (App container and Notifications view)\n  thArray,\n  tdArray, // For tables (TableList view)\n  iconsArray, // For icons (Icons view)\n  dataPie,\n  legendPie,\n  dataSales,\n  optionsSales,\n  responsiveSales,\n  legendSales,\n  dataBar,\n  optionsBar,\n  responsiveBar,\n  legendBar // For charts (Dashboard view)\n};\n","module.exports = __webpack_public_path__ + \"static/media/orbitNewLogo2.c3b9401f.png\";","const positionMonitoring = \"/positionMonitoring\";\n//const tanksSettings = \"/tanksSettings\";\nconst customers = \"/customers\";\nconst users = \"/users\";\nconst levelMonitoring = \"/tanklevels\";\n\nfunction getServer(){\n    let debug = false;\n\n    return debug === false ? \n        'https://euhpo9j3yi.execute-api.us-west-2.amazonaws.com/api/tanks' : \n        'http://localhost:3000';\n}\n\nfunction getNewServer(){\n    return 'https://jx7ltqwdt6.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://wv6wvd40zb.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://x98na0g8vl.execute-api.us-east-1.amazonaws.com/dev'\n}\n\nexport function getTankReadingUri(tankId,isLast){\n    if (tankId){\n        if (isLast){\n            return getNewServer() + levelMonitoring + \"/\" + tankId + \"?last=true\";\n        }\n        else{\n            return getNewServer() + levelMonitoring + \"/\" + tankId;\n        }\n    }\n    else\n        return getNewServer() + levelMonitoring;\n}\n\nexport function getTankReadingStartEndUri(tankId,from,to){\n    return getNewServer() + levelMonitoring + \"/\" + tankId + \"?from=\"+from + \"&to=\"+to;\n}\n\nexport function getCustomersUri(){\n    return getNewServer() + customers;\n}\n\nexport function getUsersUri(){\n    return getNewServer() + users;\n}\n\nexport function getCustomerUri(customer){\n    return getNewServer() + \"/customers/\" + customer;\n}\n\nexport function getPositionMonitoringUri(tankId){\n    return getServer() + positionMonitoring + \"/\" + tankId;\n}\n\nexport function getTankSettingsUri(){\n    return getNewServer() + \"/tanks\";\n}","let logList=[];\n\nexport const AppLogger = (caller, msg) => {\n    var d = new Date();\n    d = ('0' + d.getHours()).slice(-2) + \":\" + ('0' + d.getMinutes()).slice(-2) + \":\" + ('0' + d.getSeconds()).slice(-2);\n    var log = d + \" \" + caller.constructor.name + \": \" + msg;\n    logList.unshift(log);\n    if (logList.length>500){\n        logList.splice(logList.length-1-20,20);\n    }\n    console.log(log);\n }\n \n export const AppLogerMessages = () => {\n    return logList;\n }\n","import axios from \"axios\";\nimport { getUsersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"../Logger\";\n\nlet usersList = [];\n\nexport default class UsersTable {\n    //static myInstance = null;\n\n    //static getInstance() {\n    //    if (UsersTable.myInstance == null) {\n    //        UsersTable.myInstance = new UsersTable();\n    //    }\n\n    //    return UsersTable.myInstance;\n    //}\n\n    //constructor() {\n    //    this.users = [];\n    //}\n\n    clearUsers() {\n        while (usersList.length > 0) {\n            usersList.pop();\n        }\n    }\n\n    readUsers(callBack) {\n        this.clearUsers();\n        let uri = getUsersUri();\n        axios\n            .get(uri)\n            .then(response => {\n                AppLogger(this, \"Got users list - \" + response.data.length + \" \" + usersList.length);\n                for (let index = 0; index < response.data.length; index++) {\n                    usersList.push(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => AppLogger(this, error));\n    }\n\n    getUser(userName) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                return usersList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getUsers() {\n        return usersList.sort((a,b)=>a.customer>b.customer?1:0);\n    }\n\n    add(userName, pass, customer, role, callback) {\n        //check if the user already exist\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                callback && callback(\"user name already exist in the system\");\n                return;\n            }\n        }\n\n        let user = { \"name\": userName, \"passwd\": pass, \"customer_id\": customer, \"role\": role };\n        let uri = getUsersUri();\n        axios\n            .post(uri, user)\n            .then(response => {\n                AppLogger(this, \"User added successfully\");\n                //                this.readUsers(null);\n                callback && callback(null);\n            })\n            .catch(error => {\n                AppLogger(this, error);\n                callback && callback(\"Failed to add user\");\n            }\n            );\n    }\n\n    remove(userName, callback) {\n        let uri = getUsersUri() + '/' + userName;\n        axios\n            .delete(uri)\n            .then(response => {\n                AppLogger(this, \"deleting user successfully\");\n                this.readUsers(callback);\n            })\n            .catch(error => {\n                AppLogger(this, error);\n                callback && callback();\n            }\n            );\n    }\n\n    update(userName, pass) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName.name) {\n                usersList[index].password = pass;\n                return;\n            }\n        }\n    }\n\n    start(callBack, forceRead) {\n        AppLogger(this, \"start\");\n\n        if (forceRead || usersList.length === 0) {\n            this.readUsers(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import { Cookies } from 'react-cookie';\nimport UsersTable from './db/UsersTable';\n\nexport class LogInHelper {\n\n    constructor() {\n        this.logOutStr = 'logedOut';\n        this.userKey = 'user';\n    }\n\n    isAdmin() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user && user.role === 'admin') {\n            return true;\n        }\n\n        return false;\n    }\n\n    getLogedInUser() {\n        let cookie = new Cookies();\n        let user = cookie.get(this.userKey);\n        if (user && user !== this.logOutStr) {\n            return user;\n        }\n        return \"\";\n    }\n\n    isLogIn() {\n        let cookie = new Cookies();\n        let user = cookie.get(this.userKey);\n        if (user && user !== this.logOutStr) {\n            return true;\n        }\n        return false;\n    }\n\n    logOut() {\n        let cookie = new Cookies();\n        cookie.set(this.userKey, this.logOutStr);\n    }\n\n    getLoggedInCustomerId() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user) {\n            return user.customer_id;\n        }\n        else if (this.isLogIn()) {\n            return \"admin\";\n        }\n        else {\n            return \"\";\n        }\n    }\n}\n\nexport default LogInHelper;","export const industries = ['Residential buildings', 'Commercial buildings', 'Hospitals', 'Hotels', 'Agriculture', 'Food and drinks', 'Oils and fuels', 'Emergency services', 'Utility service provider'];\nexport const liquids = ['water', 'diesel', 'fertilizer'];\nexport const sensors = [3, 4, 5, 6, 7, 8, 9, 10];\n\nexport const dictionary = {\n    'en': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last Update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'Sensor',\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n        // Tank properties\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n\n        'selectEn': 'en - English',\n        'selectEs': 'es - Spanish',\n        'logOut': 'Log Out',\n        'customerName': 'Customer Name',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Add New Customer',\n        'add': 'Add',\n        'cancel': 'Cancel',\n        'update': 'Update',\n        'delete': 'Delete',\n        'addingNewUser': 'Adding New User',\n        // industries\n        'industry': 'Industry',\n        'Residential buildings': 'Residential buildings',\n        'Commercial buildings': 'Commercial buildings',\n        'Hospitals': 'Hospitals',\n        'Hotels': 'Hotels',\n        'Agriculture': 'Agriculture',\n        'Food and drinks': 'Food and drinks',\n        'Oils and fuels': 'Oils and fuels',\n        'Emergency services': 'Emergency services',\n        'Utility service provider': 'Utility service provider',\n        // liquid types\n        'water': 'Water',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizer',\n    },\n    'es': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'La Sensora',\n        // Tank properties\n\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n        'selectEn': 'en - Inglés',\n        'selectEs': 'es - Español',\n        'logOut': 'Cerrar sesión',\n        'customerName': 'Nombre del cliente',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Agregar nuevo cliente',\n        'add': 'Añadir',\n        'cancel': 'Cancelar',\n        'update': 'Actualización',\n        'delete': 'Borrar',\n        'addingNewUser': 'Agregando nuevo usuario',\n        // industries\n        'industry': 'Industria',\n        'Residential buildings': 'Edificios residenciales',\n        'Commercial buildings': 'Edificios comerciales',\n        'Hospitals': 'Hospitales',\n        'Hotels': 'Hoteles',\n        'Agriculture': 'Agricultura',\n        'Food and drinks': 'Alimentos y bebidas',\n        'Oils and fuels': 'Aceites y combustibles',\n        'Emergency services': 'Servicios de emergencia',\n        'Utility service provider': 'Proveedor de servicios públicos',\n        // liquid\n        'water': 'Agua',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizante',\n\n    }\n}\n\n","import { Cookies } from 'react-cookie';\nimport { dictionary } from 'app/lang/dic.js';\n\nconst langKey = 'lang';\n\nexport const getLang = () => {\n    let cookie = new Cookies();\n    let lang = cookie.get(langKey);\n    if (lang && (lang !== 'en' || lang !=='es')) {\n        return lang;\n    }\n    return 'en';\n}\n\nexport const setLang = (lang) => {\n    let cookie = new Cookies();\n    cookie.set(langKey, lang);\n}\n\nexport const translate = (text) => {\n    let translated = dictionary[getLang()][text];\n    if (translated){\n        return translated\n    }\n    else{\n        return text + ' not fond in dic';\n    }\n}\n","import React, { Component } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { getLang, setLang } from '../../app/lang/lang.js'\nclass HeaderLinks extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lang: getLang() };\n  }\n\n  handleLogOut = () => {\n    let logIn = new LogInHelper();\n    logIn.logOut();\n    window.location.reload();\n  }\n\n  selectLang = (lang) => {\n    setLang(lang);\n    this.setState({ lang: lang });\n  }\n\n  render() {\n/*\n    let notificationList = new NotificationHelper().get();\n    const notification = (\n      <div style={{color:'with'}}>\n        <i className=\"fa fa-globe\" />\n        <b className=\"caret\" />\n        <span className=\"notification\">{notificationList.length !== 0 ? notificationList.length:\"\"}</span>\n        <p>Notification</p>\n      </div>\n    );\n*/\n    return (\n      <div>\n        <Nav>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            <i className=\"fa fa-dashboard\" />\n            <p className=\"hidden-lg hidden-md\">Dashboard</p>\n          </NavItem>\n          \n          \n          <NavDropdown\n            eventKey={2}\n            title={notification}\n            noCaret\n            id=\"basic-nav-dropdown\"\n          >\n            <MenuItem eventKey={2.1}>Notification 1</MenuItem>\n            <MenuItem eventKey={2.2}>Notification 2</MenuItem>\n            <MenuItem eventKey={2.3}>Notification 3</MenuItem>\n            <MenuItem eventKey={2.4}>Notification 4</MenuItem>\n            <MenuItem eventKey={2.5}>Another notifications</MenuItem>\n          </NavDropdown>\n          */\n          /*\n          <NavItem eventKey={3} href=\"#\">\n            <i className=\"fa fa-search\" />\n            <p className=\"hidden-lg hidden-md\">Search</p>\n          </NavItem>\n          */}\n        </Nav>\n        <Nav pullRight>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            Account\n          </NavItem>\n          \n            <NavDropdown\n              eventKey={2}\n              title={<div style={{color:'white'}}>{this.state.lang}</div>}\n              id=\"basic-nav-dropdown-right\"\n            >\n              <MenuItem eventKey={2.1} onClick={() => this.selectLang('en')}>{translate('selectEn')}</MenuItem>\n              <MenuItem eventKey={2.2} onClick={() => this.selectLang('es')}>{translate('selectEs')}</MenuItem>\n            </NavDropdown>*/\n          }\n          {/* \n          <NavItem eventKey={2} href=\"#\">\n            <div style={{color:'white'}}>{getVersion()}</div>\n          </NavItem>          \n          <NavItem eventKey={3} href=\"#\" onClick={() => this.handleLogOut()}>\n            <div style={{color:'white'}}>{translate('logOut')}</div>\n          </NavItem>\n          */}\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default HeaderLinks;\n","import moment from 'moment'\n\nlet appIsready = false;\n\nexport function getVersion(){\n    return 'SW Version 2.2';\n}\n\nexport function appIsReady(ready){\n    appIsready = ready;\n}\n\nexport function isAppReady(){\n    return appIsready;\n}\n\nexport function getPrimaryColor() {\n    return '#3472F7';\n}\n\nexport function getPrimaryColorStyle() {\n    return { color: getPrimaryColor() };\n}\n\nexport function getFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('MM/DD-HH:mm');\n}\nexport function getDetailedFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('hh:mm a Do of MMMM YYYY');\n}\n\nexport function isMobile() { \n    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\n        return true;\n    }\n    else{\n        return false;\n    }\n}","import React, { Component } from \"react\";\n\nimport {getPrimaryColor} from '../../app/adminHelper'\n\nexport class Card extends Component {\n  render() {\n    let colorStyle = {color:getPrimaryColor()};\n    if (this.props.color){\n      colorStyle = {color:this.props.color};\n    }\n    return (\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")} >\n          <h4 className=\"title\" style={colorStyle}><u><b>{this.props.title}</b></u></h4>\n          <p className=\"category\" style={colorStyle}>{this.props.category}</p>\n        </div>\n        <div\n          className={\n            \"content\" +\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\n          }\n        >\n          {this.props.content}\n\n          {/*<div className=\"footer\">*/}\n          <div>\n            {this.props.legend}\n            {/*this.props.stats != null ? <hr /> : \"\"*/}\n            <div className=\"stats\">\n              <i className={this.props.statsIcon} style={colorStyle}/> \n                <div style={colorStyle}>&nbsp;{this.props.stats}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport class StatsCard extends Component {\n  render() {\n    return (\n      <div className=\"card card-stats\">\n        <div className=\"content\">\n          <Row>\n            <Col xs={12}>\n              <div className=\"numbers\">\n                <center>\n                  {this.props.bigIcon}\n                  {this.props.statsText}\n                </center>\n              </div>\n              <div>\n                {this.props.statsValue}\n              </div>\n\n            </Col>\n          </Row>\n          <div className=\"footer\">\n            <hr />\n            <div className=\"stats\">\n              {this.props.statsIcon} {this.props.statsIconText}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatsCard;\n","import axios from \"axios\";\nimport { getTankSettingsUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n\nlet tankList = [];\n\nexport default class TanksTable {\n\n    getTanks() {\n        return tankList;\n    }\n\n    getCustomerTanks(customersId) {\n        let debug = false;\n        let tanks = [];\n        for (let index in tankList) {\n            if (tankList[index].customer === customersId ||\n                customersId === \"admin\") {\n                tanks.push(tankList[index]);\n                if (debug === true) {\n                    break;\n                }\n            }\n        }\n\n        return tanks;\n    }\n\n    getTank(imei) {\n        for (let index in tankList) {\n            if (tankList[index].imei === imei) {\n                return tankList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getImeiFromUrl = (str) => {\n        for (let index in tankList) {\n            if (str.search(tankList[index].imei) !== -1) {\n                return tankList[index].imei;\n            }\n        }\n\n        return null;\n    }\n\n    getTankName(imei) {\n        return this.getTank(imei).name;\n    }\n\n    getCustomerId(imei) {\n        return this.getTank(imei).customer;\n    }\n\n    getCapacity(imei) {\n        return this.getTank(imei).capacity;\n    }\n\n    getLiquidType(imei){\n        return this.getTank(imei).liquid_type;\n    }\n\n\n    hasTanks(customerId) {\n        for (let index in tankList) {\n            if (tankList[index].customer === customerId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    addTank = (callBack, formState, customerId) => {\n        let postJson = {\n            'imei': formState.imei,\n            'customer': customerId,\n            'iccid': formState.iccid,\n            'liquid_type': formState.liquid_type,\n            'capacity': formState.capacity,\n            'high': formState.high,\n            'sensor_type':formState.sensor_type,\n            'heartbeat_timeout': formState.heartbeat_timeout,\n            'sampling_interval': formState.sampling_interval,\n            'phone': formState.phone,\n            'name': formState.name + '--building--' + formState.building,\n            'level_alerts': formState.level_alerts\n        };\n\n        axios.post(getTankSettingsUri(), postJson).then(response => {\n            AppLogger(this, \"adding new tank succedded\");\n            callBack && callBack(true);\n        }).catch(error => {\n            AppLogger(this, error);\n            callBack && callBack(false);\n        });\n    }\n\n    updateTank = (callBack, tank, customerId) => {\n        let postJson = {\n            'imei': tank.imei,\n            'customer': customerId,\n            'iccid': tank.iccid,\n            'liquid_type': tank.liquid_type,\n            'capacity': tank.capacity,\n            'high': tank.high,\n            'sensor_type':tank.sensor_type,\n            'heartbeat_timeout': tank.heartbeat_timeout,\n            'sampling_interval': tank.sampling_interval,\n            'phone': tank.phone,\n            'name': tank.name + '--building--' + tank.building,\n            'level_alerts': tank.level_alerts\n        };\n\n        axios.put(getTankSettingsUri() + \"/\" + tank.imei, postJson).then(response => {\n            AppLogger(\"updating tank succedded\");\n            callBack && callBack(true);\n        }).catch(error => {\n            AppLogger(this, error);\n            callBack && callBack(false);\n        }\n        );\n    }\n\n    deleteTank = (imei, callBack) => {\n        let url = getTankSettingsUri() + \"/\" + imei;\n        AppLogger(this, \"deleteTank \" + url);\n\n        axios\n            .delete(url)\n            .then(response => {\n                AppLogger(\"deleting tank succedded\");\n                callBack && callBack();\n            })\n            .catch(error => AppLogger(this, error));\n    }\n\n    readTanks(callBack) {\n        let uri = getTankSettingsUri();\n        AppLogger(this, \"readTanks \" + uri);\n        axios.get(uri)\n            .then(response => {\n                tankList = response.data;\n                //update building\n                for (let index in tankList){\n                    let names = tankList[index].name.split(\"--building--\");\n                    if (names.length === 1){\n                        tankList[index].building = '';\n                    }\n                    else{\n                        tankList[index].name = names[0];\n                        tankList[index].building = names[1];\n                    }\n                }\n                AppLogger(this, \"Got tanks list - \" + tankList.length);\n                callBack && callBack();\n            })\n            .catch(error => AppLogger(this, error));\n    }\n\n    start(callBack, forceRead) {\n        AppLogger(this, \"start \" + forceRead);\n\n        if (forceRead || tankList.length === 0) {\n            tankList = [];\n            this.readTanks(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import TanksTable from \"./db/TanksTable\";\nimport { LogInHelper } from \"./logInHelper\";\n\nexport default class NotificationHelper {\n\n    constructor() {\n        let tt = new TanksTable();\n        tt.start(null, false);\n    }\n\n    getLevelNotifications() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getLevelNotificationsOnTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getLevelNotificationsOnTank(tank){\n        let notifications = [];\n        for (let alertIndex in tank.level_alerts) {\n            let level_alerts = tank.level_alerts[alertIndex];\n            if (level_alerts.status === 'on') {\n                let alertObj = { name: tank.name, level: level_alerts.at_level }\n                notifications.push(alertObj);\n            }\n        }\n        return notifications;\n    }\n\n    getHeartBeatNotification() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getHeartBeatNotificationForTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getHeartBeatNotificationForTank(tank){\n        let notifications = [];\n        if (tank.heartbeat_ok !== true){\n            notifications.push({ name: tank.name });\n        }\n        return notifications;\n    }\n\n}","import axios from \"axios\";\nimport { getTankReadingUri, getTankReadingStartEndUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\nimport TanksTable from \"app/db/TanksTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nlet lastLevelMonitoring = [];\nlet numberOfTanks = 0;\nlet lastReadingTime = 0;\n\nexport default class TanksReading {\n\n    constructor() {\n        this.customer = null;\n        this.callBack = null;\n    }\n\n    getLastReadingTime = () => {\n        return lastReadingTime;\n    }\n\n    getSortReading(list, category) {\n        let tt = new TanksTable();\n        if (category === \"name\") {\n            return list.sort((a, b) =>\n                tt.getTankName(a.imei) > tt.getTankName(b.imei) ? 1 : -1);\n        }\n        else if (category === \"capacity\") {\n            return list.sort((a, b) =>\n                tt.getCapacity(a.imei) > tt.getCapacity(b.imei) ? 1 : -1);\n        }\n        else if (category === \"liquid_type\") {\n            return list.sort((a, b) =>\n                tt.getLiquidType(a.imei).toLowerCase() > tt.getLiquidType(b.imei).toLowerCase() ? 1 : -1);\n        }\n        else {\n            return null;\n        }\n    }\n\n    getLevelMonitoring(category) {\n        return this.getSortReading(lastLevelMonitoring, category);\n    }\n\n    getLevelMonitoringForTank(imei) {\n        let index = 0;\n        for (index in lastLevelMonitoring) {\n            if (lastLevelMonitoring[index].imei === imei) {\n                return lastLevelMonitoring[index];\n            }\n        }\n        return null;\n    }\n\n    updateTankReadings = (data) => {\n        if (data !== null) {\n            if (this.from === null) {\n                let tt = new TanksTable();\n                AppLogger(this, \"Readings from \" + tt.getTankName(data.data.imei));\n                AppLogger(this, \"Sample \" + data.data.sample_level + \" Actual \" + data.data.actual_level +\n                    \" IMEI \" + data.data.imei + \" server time \" + data.data.server_time + \" tank time \" + data.data.tank_time);\n                lastLevelMonitoring.push(data.data);\n                if (lastReadingTime < data.data.server_time) {\n                    lastReadingTime = data.data.server_time;\n                }\n            }\n            else {\n                let range = data.data;\n                range['imei'] = new TanksTable().getImeiFromUrl(data.request.responseURL);\n                this.fromToLevelMonitoring.push(range);\n            }\n        }\n        this.numberOfreadings += 1;\n        // call after all reading done\n        if (numberOfTanks === this.numberOfreadings) {\n            //AppLogger(this, \"calling callback\");\n            if (this.from === null) {\n                this.callBack && this.callBack();\n            }\n            else {\n                let sorted = this.fromToLevelMonitoring.sort((a, b) => parseInt(a.imei, 16) - parseInt(b.imei, 16));\n                this.callBack && this.callBack(sorted);\n            }\n        }\n    }\n\n    tanksInfoReady = () => {\n        let tanks = new TanksTable().getCustomerTanks(this.customer);\n        numberOfTanks = tanks.length;\n        this.numberOfreadings = 0;\n\n        for (let index in tanks) {\n            let uri = getTankReadingUri(tanks[index].imei, true);\n            if (this.from != null && this.to != null && this.tank != null) {\n                numberOfTanks=1;\n                if (this.tank.imei === tanks[index].imei) { // get the readings only for the selected tank\n                    uri = getTankReadingStartEndUri(tanks[index].imei, this.from, this.to);\n                }\n                else{\n                    continue;\n                }\n            }\n            AppLogger(this, \"level monitoring uri = \" + uri);\n            axios\n                .get(uri)\n                .then(response => this.updateTankReadings(response))\n                .catch(error => {\n                    AppLogger(this, \"TanksReadings \" + error);\n                    this.updateTankReadings(null);\n                });\n        }\n    }\n\n    setClassParams(callBack, from, to, tank) {\n        this.callBack = callBack;\n        this.from = from;\n        this.to = to;\n        this.customer = new LogInHelper().getLoggedInCustomerId();\n        this.tank = tank\n        let tt = new TanksTable();\n        tt.start(this.tanksInfoReady, false);\n    }\n\n    getLastReading(callBack) {\n        AppLogger(this, \"Asking for last readings\");\n        lastLevelMonitoring = [];\n        this.setClassParams(callBack, null, null, null);\n    }\n\n    getReadingFromTo(callBack, from, to, tank) {\n        AppLogger(this, \"Asking for from to readings\");\n        this.fromToLevelMonitoring = [];\n        this.setClassParams(callBack, from, to, tank);\n    }\n}","import React from 'react';\nimport { Alert } from \"react-bootstrap\";\n\nexport function levelAlertView(alerts) {\n    if (alerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {alerts.map((alert, index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Level is below {alert.level}% on Tank: <q>{alert.name}</q></span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>\n    )\n}\n\nexport function heartBeatView(hearBeatAlerts) {\n    if (hearBeatAlerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {hearBeatAlerts.map((heartBeatAlert,index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Tank: <q>{heartBeatAlert.name}</q> is not responding</span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>)\n}\n","import axios from \"axios\";\nimport { getCustomersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n//import { LogInHelper } from \"app/logInHelper\";\n\nlet customerList = [];\n\nexport default class CustomersTable {\n\n    getCustomers() {\n        return customerList.sort((a, b) =>\n            a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0);\n    }\n/*\n    getCustomersIds() {\n        let customersNames = [];\n        let customer = new LogInHelper().getLoggedInCustomer();\n        if (customer === 'admin') { // get all customers\n            for (let index in customerList) {\n                customersNames.push(customerList[index].id);\n            }\n        }\n        else {\n            for (let index in customerList) {\n                if (customerList[index].name === customer) {\n                    customersNames.push(customerList[index].id);\n                    break;\n                }\n            }\n        }\n\n        return customersNames;\n    }\n*/\n    getCustomer(customerId) {\n        for (let index in customerList) {\n            if (customerList[index].id === customerId) {\n                return customerList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getCustomerName(customerId) {\n        let customer = this.getCustomer(customerId);\n        if (customer !== null){\n            return customer.name;\n        }\n        else{\n            return \"\";\n        }\n    }\n\n    addCustomerToCustomers = (customer) =>{\n        // check if the customer is in the table\n        for (let index in customerList){\n            if (customerList[index].name === customer.name){\n                return;\n            }\n        }\n        \n        customerList.push(customer);\n\n    }\n\n    readCustomers(callBack) {\n        let uri = getCustomersUri();\n        AppLogger(this, \"Customers \" + uri);\n        axios\n            .get(uri)\n            .then(response => {\n                AppLogger(this, \"Got customers list \" + response.data.length);\n                for (let index = 0; index < response.data.length; index++) {\n                    this.addCustomerToCustomers(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => AppLogger(this, error));\n    }\n\n    addNewCustomer(name, industry, mailingList, callBack) {\n        AppLogger(this, \"add new customer \" + name);\n\n        // check if name is in the list\n        for (let index in customerList) {\n            if (customerList[index].name.toLowerCase() === name.toLowerCase()) {\n                callBack && callBack(\"Customer \" + name + \" already exist\");\n                return;\n            }\n        }\n\n        axios.post(getCustomersUri(),\n            { \"name\": name, \"industry\": industry, \"mailing_list\": mailingList })\n            .then(response => {\n                AppLogger(\"adding new customer succedded\");\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                AppLogger(this, error);\n                callBack && callBack(\"failed to create new customer\");\n            });\n    }\n\n    updateCustomer(customer,callBack) {\n        let url = getCustomersUri() + \"/\" + customer.id;\n        AppLogger(this, \"updating customer \" + url);\n\n        let json = { \"name\": customer.name, \"industry\": customer.industry, \"mailing_list\": customer.mailing_list };\n\n        axios\n            .put(url,json)\n            .then(response => {\n                AppLogger(this, \"updating customer succedded\");\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                AppLogger(this, error);\n                callBack && callBack(\"failed to create update customer\");\n            });\n    }\n\n    deleteCustomer(id, callBack) {\n        let url = getCustomersUri() + \"/\" + id;\n        AppLogger(this, \"deleteCustomer \" + url);\n\n        axios\n            .delete(url)\n            .then(response => {\n                AppLogger(this, \"deleting customer succedded\");\n                callBack && callBack();\n            })\n            .catch(error => AppLogger(this, error));\n    }\n\n    start(callBack, forceRead) {\n        AppLogger(this,\"start \" + forceRead)\n        if (forceRead || customerList.length === 0) {\n            customerList = [];\n            this.readCustomers(callBack);\n        }\n        else {\n            callBack && callBack(); \n        }\n    }\n}","import React, { Component } from \"react\";\nimport { interpolateRgb } from 'd3-interpolate';\nimport LiquidFillGauge from 'react-liquid-gauge';\nimport { color } from 'd3-color';\nimport { getPrimaryColor } from 'app/adminHelper'\n\nconst timeout = 5;\nexport class TankCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n\n    if (this.props.asAlerts===false){\n      this.startColor = getPrimaryColor(); // cornflowerblue\n      this.endColor = '#089AFA'; // crimson\n      this.textColor = color('#089AFA').toString()\n    }\n    else{\n      this.startColor = 'red';\n      this.endColor = 'red';\n      this.textColor = 'red';\n    }\n\n    this.tick = this.tick.bind(this);\n\n    this.timeout = timeout;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  tick() {\n    this.timeout -= 1;\n    if (this.timeout === 0) {\n      this.setState({ value: 0 });\n    }\n\n    if (this.timeout === -1) {\n      this.timeout = timeout;\n      this.setState({ value: this.props.value });\n    }\n  }\n\n  getTankName() {\n    if (this.props.tank) {\n      return this.props.tank.name;\n    }\n\n    return null;\n  }\n\n  getRadiusFromHeight1() {\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    let factor = 3.5;\n    if (window.screen.width <= 330) {\n      factor = 2.2;\n    }\n    else if (window.screen.width <= 360) {\n      factor = 2.8;\n    }\n    else if (window.screen.width <= 375) {\n      factor = 2.7;\n    }\n\n    let retVal = parseFloat(height, 10) * factor\n    //AppLogger(this,'retVal =' + retVal);\n    return retVal;\n  }\n\n  getRadiusFromHeight() {\n    //AppLogger(this,'width  = ' + window.innerWidth);\n    //AppLogger(this,'Height = ' + window.innerHeight);\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    //AppLogger(this,'height ' + height);\n    //AppLogger(this,'innerHeight ' + window.innerHeight);\n    return window.innerHeight * height / 350;\n\n    //if (window.innerWidth <= 375){\n    //  return 100;\n    // }\n    // else{\n    //   return 140;\n    // }\n  }\n\n  renderTank() {\n    const radius = this.getRadiusFromHeight();\n    //const radius = 150;\n    const interpolate = interpolateRgb(this.startColor, this.endColor);\n    const fillColor = interpolate(this.state.value / 100);\n    const gradientStops = [\n      {\n        key: '0%',\n        stopColor: color(fillColor).darker(0.5).toString(),\n        stopOpacity: 1,\n        offset: '0%'\n      },\n      {\n        key: '50%',\n        stopColor: fillColor,\n        stopOpacity: 0.75,\n        offset: '50%'\n      },\n      {\n        key: '100%',\n        stopColor: color(fillColor).brighter(0.5).toString(),\n        stopOpacity: 0.5,\n        offset: '100%'\n      }\n    ];\n\n    return (\n      <div>\n        <LiquidFillGauge\n          style={{ margin: '0 auto'/*,height:this.props.height*/ }}\n          width={radius * 2}\n          height={radius * 2}\n          value={this.state.value}\n          percent=\"%\"\n          textSize={1}\n          textOffsetX={0}\n          textOffsetY={0}\n          textRenderer={(props) => {\n            const value = Math.round(props.value);\n            const radius = Math.min(props.height / 2, props.width / 2);\n            const textPixels = (props.textSize * radius / 2);\n            const valueStyle = {\n              fontSize: textPixels\n            };\n            const percentStyle = {\n              fontSize: textPixels * 0.6\n            };\n\n            return (\n              <tspan>\n                <tspan className=\"value\" style={valueStyle}>{value}</tspan>\n                <tspan style={percentStyle}>{props.percent}</tspan>\n              </tspan>\n            );\n          }}\n          riseAnimation\n          waveAnimation\n          waveFrequency={1}\n          waveAmplitude={4}\n          gradient\n          gradientStops={gradientStops}\n          circleStyle={{\n            fill: fillColor\n          }}\n          waveStyle={{\n            fill: fillColor\n          }}\n          textStyle={{\n            fill: this.textColor,\n            fontFamily: 'Arial'\n          }}\n          waveTextStyle={{\n            fill: color('#fff').toString(),\n            fontFamily: 'Arial'\n          }}\n          onClick={() => {\n            //this.setState({ value: Math.random() * 100 });\n          }}\n        />\n        <center><h3 style={{color:this.startColor}}><b>{this.props.volume}</b></h3></center>\n      </div>);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderTank()}\n      </div>\n    );\n  }\n};\n\nexport default TankCard;\n","import React from 'react';\n\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport CustomersTable from \"../../app/db/CustomersTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { translate } from \"../../app/lang/lang\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport { getDetailedFormattedTime } from \"app/adminHelper.jsx\"\nimport { Col, FormControl, Table } from \"react-bootstrap\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { getPrimaryColor } from '../../app/adminHelper.jsx';\n\nexport function renderTanks(readings) {\n    let width = 6;\n    if (readings.length === 1){\n        width = 12;\n    }\n    return (\n        readings.map((reading, index) => {\n\n            let tt = new TanksTable();\n            let tank = tt.getTank(reading.imei);\n            if (tank === null) {\n                return null;\n            }\n            let tankName = tank.name;\n\n            let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n\n            let nh = new NotificationHelper();\n\n            let levelAlerts = nh.getLevelNotificationsOnTank(tank);\n            //let hearBeatAlerts = nh.getHeartBeatNotificationForTank(tank);\n            //let asAlert = (levelAlerts.length !==0 || hearBeatAlerts.length !==0)?true:false\n            let asAlert = (levelAlerts.length !== 0) ?true:false\n            let titleColor = getPrimaryColor();\n            if (asAlert){\n                titleColor = 'red'\n            }\n            return (\n                <Col xs={12} sm={width} key={index} >\n                    <Card \n                        hCenter={true}\n                        id=\"chartHours\"\n                        title={tankName} color={titleColor}\n                        stats={renderTanksParams(tank, reading)}\n                        content={<TankCard\n                            value={reading.actual_level}\n                            height={\"40%\"}\n                            volume={volume}\n                            asAlerts={asAlert}\n                        />\n                        }\n                    />\n                </Col>\n            );\n        }\n        ));\n}\n\nexport function isTankFiltered(tank, filterStr) {\n    if (filterStr !== \"\") {\n        let tt = new TanksTable();\n        let customer = tt.getCustomerId(tank.imei);\n        let customerName = new CustomersTable().getCustomerName(customer);\n\n        if (tank.imei.search(filterStr) === -1 &&\n            tank.name.search(filterStr) === -1 &&\n            customerName.search(filterStr) === -1 &&\n            tank.capacity.toString().search(filterStr) === -1 &&\n            tank.liquid_type.search(filterStr) === -1)\n            return true;\n    }\n    return false;\n}\n\nfunction getCustomer(tank) {\n    if (new LogInHelper().isAdmin()) {\n        return new CustomersTable().getCustomerName(tank.customer);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction renderTableRow(t1, t2) {\n    return (\n        <tr>\n            <td><center>{t1}</center></td>\n            <td><center>{t2}</center></td>\n        </tr>\n    )\n}\n\nexport function renderTanksParams(tank, readings) {\n\n    let isAdmin = new LogInHelper().isAdmin();\n    return (\n        <div>\n            <Table striped bordered condensed hover>\n                <tbody>\n                    {renderTableRow(translate(\"tankName\"), tank.name)}\n                    {renderTableRow(translate(\"buildingName\"), tank.building)}\n                    {getCustomer(tank) !== null &&\n                        renderTableRow(\"Customer\", getCustomer(tank))\n                    }\n                    {renderTableRow(translate(\"capacity\"), tank.capacity + \" L\")}\n                    {readings !== null &&\n                        renderTableRow(translate(\"volume\"), parseInt(tank.capacity * readings.actual_level / 100, 10) + \" L\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"leftInTank\"), readings.actual_level + \"%\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"lastUpdate\"), getDetailedFormattedTime(readings.server_time))\n                    }\n                    {renderTableRow(translate(\"liquid\"), translate(tank.liquid_type))}\n                    {isAdmin && renderTableRow(translate(\"sensorLength\"), tank.sensor_type + \"M\")}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport function renderFilterTanksCard(caller) {\n    //let logInHelper = new LogInHelper();\n    ///if (logInHelper.isAdmin() === false) {\n    //    return null\n    //}\n\n    return (\n        <Col md={4}>\n            <Card\n                id={\"filterTanks\"}\n                title=\"Filter Tanks\"\n                hCenter={true}\n                content={\n                    <FormControl\n                        type=\"text\"\n                        value={caller.state.value}\n                        placeholder=\"Tank / Customer / Capacity / IMEI\"\n                        onChange={(e) => caller.setState({ filterStr: e.target.value })}\n                    />\n                }\n            />\n        </Col>\n    );\n}","import { translate } from \"../../app/lang/lang\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport { AppLogger } from \"../../app/Logger\";\n\nexport default class RangeHelper {\n    constructor() {\n        this.ranges = ['Last 6H','Last 12H', 'Last 24H', 'Last 2 Days', 'Select Range'];\n        this.rangesValues = [6, 12, 24, 24 * 2, null];\n    }\n\n    getFirstRangeInHours = () =>{\n        return this.rangesValues[0];\n    }\n\n    getRanges = () => {\n        return this.ranges;\n    }\n\n    getRangeInHour = (index) => {\n        return this.rangesValues[index];\n    }\n\n    getSelectedString = (index) => {\n        if (index === this.ranges.length - 1) {\n            return translate(\"Custom Range\");\n        }\n        else {\n            return translate(this.ranges[index]);\n        }\n    }\n\n    getRangeForHourse = (timeInHours, callback, forClass) => {\n        let tr = new TanksReading();\n        let from = tr.getLastReadingTime() - (timeInHours * 60 * 60 * 1000);\n        let to = tr.getLastReadingTime();\n        AppLogger(this, from + \" \" + to);\n        this.callback = callback;\n        tr.getReadingFromTo(this.rangeReady, from, to, forClass);\n    }\n\n    getRangeFromTo = (from, to, callback, tank) => {\n        this.callback = callback;\n        new TanksReading().getReadingFromTo(this.rangeReady, from, to, tank);\n    }\n\n    rangeReady = (range) => {\n        if (range.length !== 0) {\n            this.callback && this.callback(range);\n        }\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport momentPropTypes from 'react-moment-proptypes';\nimport moment from 'moment';\nimport omit from 'lodash/omit';\nimport { DateRangePickerShape, DateRangePickerPhrases, DateRangePicker, START_DATE, END_DATE, VERTIVAL_ORIENTATION, ANCHOR_LEFT } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n//import { AppLogger } from '../../app/Logger';\nconst propTypes = {\n  // example props for the demo\n  autoFocus: PropTypes.bool,\n  autoFocusEndDate: PropTypes.bool,\n  stateDateWrapper: PropTypes.func,\n  initialStartDate: momentPropTypes.momentObj,\n  initialEndDate: momentPropTypes.momentObj,\n\n  ...omit(DateRangePickerShape, [\n    'startDate',\n    'endDate',\n    'onDatesChange',\n    'focusedInput',\n    'onFocusChange',\n  ]),\n};\n\nconst defaultProps = {\n  // app props\n  onHide: null,\n  // example props for the demo\n  autoFocus: false,\n  autoFocusEndDate: false,\n  initialStartDate: new moment(),\n  initialEndDate: new moment(),\n\n  // input related props\n  startDateId: START_DATE,\n  startDatePlaceholderText: 'Start Date',\n  endDateId: null,\n  endDatePlaceholderText: 'End Date',\n  disabled: false,\n  required: false,\n  screenReaderInputMessage: '',\n  showClearDates: false,\n  showDefaultInputIcon: false,\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  block: false,\n  small: false,\n  regular: false,\n\n  // calendar presentation and interaction related props\n  renderMonthText: null,\n  orientation: VERTIVAL_ORIENTATION,\n  anchorDirection: ANCHOR_LEFT,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  isRTL: false,\n\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick() { },\n  onNextMonthClick() { },\n  onClose() { },\n\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  minimumNights: 0,\n  enableOutsideDays: false,\n  isDayBlocked: () => false,\n  isOutsideRange: () => false,\n  //isOutsideRange: day => !isInclusivelyAfterDay(day, moment()),\n  isDayHighlighted: () => false,\n\n  // internationalization\n  displayFormat: () => moment.localeData().longDateFormat('L'),\n  monthFormat: 'MMMM YYYY',\n  phrases: DateRangePickerPhrases,\n\n  stateDateWrapper: date => date,\n};\n\nclass DateRangePickerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let focusedInput = null;\n    if (props.autoFocus) {\n      focusedInput = START_DATE;\n    } else if (props.autoFocusEndDate) {\n      focusedInput = END_DATE;\n    }\n\n    this.state = {\n      focusedInput,\n      startDate: props.initialStartDate,\n      endDate: props.initialEndDate,\n      startDateId: 0\n    };\n\n    this.onDatesChange = this.onDatesChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  onDatesChange({ startDate, endDate }) {\n    const { stateDateWrapper } = this.props;\n    this.setState({\n      startDate: startDate && stateDateWrapper(startDate),\n      endDate: endDate && stateDateWrapper(endDate),\n    });\n  }\n\n  onFocusChange(focusedInput) {\n    this.setState({ focusedInput });\n  }\n\n  getNumberOfMonth = () => {\n    if (window.innerWidth <= 994) {\n      return 1;\n    }\n    else {\n      return 2;\n    }\n  }\n\n  handelClose = (startDate) => {\n    if (startDate) {\n      this.props.onHide(this.state.startDate.toDate(), startDate.endDate.toDate());\n    }\n  }\n\n  render() {\n    const { focusedInput, startDate, endDate } = this.state;\n\n    // autoFocus, autoFocusEndDate, initialStartDate and initialEndDate are helper props for the\n    // example wrapper but are not props on the SingleDatePicker itself and\n    // thus, have to be omitted.\n    const props = omit(this.props, [\n      'autoFocus',\n      'autoFocusEndDate',\n      'initialStartDate',\n      'initialEndDate',\n      'stateDateWrapper',\n    ]);\n\n    return (\n      <div>\n        <DateRangePicker\n          {...props}\n          numberOfMonths={this.getNumberOfMonth()}\n          onDatesChange={this.onDatesChange}\n          onFocusChange={this.onFocusChange}\n          focusedInput={focusedInput}\n          startDate={startDate}\n          endDate={endDate}\n          onClose={(startDate) => this.handelClose(startDate)}\n        />\n      </div>\n    );\n  }\n}\n\nDateRangePickerWrapper.propTypes = propTypes;\nDateRangePickerWrapper.defaultProps = defaultProps;\n\nexport default DateRangePickerWrapper;","\nimport React from \"react\";\nimport { Modal, Button } from 'react-bootstrap'\nimport DateRangePickerWrapper from \"components/App/DateAndTime.jsx\";\nimport { MenuItem, DropdownButton } from 'react-bootstrap';\n\n\nclass DateAndTimeModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // create time array\n        this.timeArray = this.createTimeArray();\n\n        this.state = { startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() }\n    }\n\n    createTimeArray = () => {\n        let timeArray = [];\n        for (let hour = 0; hour < 24; hour++) {\n            let hourStr = \"\" + hour;\n            if (hour < 10) {\n                hourStr = \"0\" + hour;\n            }\n\n            timeArray.push(hourStr + \":00\");\n            timeArray.push(hourStr + \":30\");\n        }\n\n        return timeArray;\n\n    }\n    dateSelected = (start, end) => {\n        this.setState({ startDate: start, endDate: end });\n    }\n\n    closeModal = () => {\n        this.props.onHide(\n            this.state.startDate, this.state.endDate,\n            this.state.startTime, this.state.endTime);\n        this.setState({ startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() });\n    }\n\n    quickSelection = (time) => {\n        this.props.onHide(null, null, time, null);\n    }\n\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                bsSize=\"small\"\n                aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">Date Range Selection</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <DateRangePickerWrapper onHide={this.dateSelected}\n                        startDateId={\"2\"} endDateId={\"2\"} />\n                </Modal.Body>\n                <div>\n                    <center>\n                        Select Start & End Time\n                    </center>\n                    <p />\n                </div>\n                <div><center>\n                    <DropdownButton title={this.state.startTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ startTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>&nbsp;&nbsp;\n                    <DropdownButton title={this.state.endTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ endTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>\n                </center></div>\n                <p />\n                <Modal.Footer>\n                    <Button onClick={this.closeModal}>Select</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default DateAndTimeModal;\n\n","import React from \"react\";\nimport {\n    DropdownButton, MenuItem, ButtonGroup\n} from \"react-bootstrap\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { LogInHelper } from \"../../app/logInHelper\";\n\nexport default class TanksSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTankName: null\n        };\n\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        this.tanks = new TanksTable().getCustomerTanks(customerId);\n    }\n\n    tankSelected = (index) => {\n\n        this.setState({ selectedTankName: this.tanks[index].name });\n        this.props.tankSelected && this.props.tankSelected(this.tanks[index]);\n    }\n\n    getTankName = () => {\n        if (this.state.selectedTankName === null) { // not set yet\n            return this.props.getSelectedTank().name\n        }\n        else {\n            return this.state.selectedTankName\n        }\n    }\n\n    render() {\n        let tankName = this.getTankName()\n        return (\n            <ButtonGroup>\n                <DropdownButton title={\"Select Tank - \" + tankName} bsStyle=\"primary\" style={{ margin: '3px' }} id=\"bg-nested-dropdown\">\n                    {\n                        this.tanks.map((tank, index) => {\n                            return (\n                                <MenuItem eventKey={index} key={index} onClick={() => this.tankSelected(index)}>{tank.name}</MenuItem>\n                            )\n                        })\n                    }\n                </DropdownButton>\n            </ButtonGroup >\n        )\n    }\n}","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport DateAndTimeModal from \"./DateAndTimeModal\";\nimport { ButtonToolbar, ButtonGroup, Button } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksSelection from \"./../../views/Admin/TanksSelection\"\n\nclass RangeView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { showDateAndTimeModal: false };\n    }\n\n    rangeSelected = (value) => {\n        AppLogger(this, \"rangeSelected \" + value);\n\n        let rangeInHour = new RangeHelper().getRangeInHour(value);\n        if (rangeInHour === null) {\n            this.setState({ showDateAndTimeModal: true });\n        }\n        else {\n            this.props.hoursSelected(rangeInHour, value);\n        }\n    }\n    getDate = (date, time) => {\n        let hour = parseInt(time.substring(0, 2), 10);\n        let minutes = parseInt(time.substring(3, 5), 10);\n        date.setHours(hour);\n        date.setMinutes(minutes);\n        return date;\n    }\n\n    dateAndTimeModalClose = (startDate = null, endDate = null, startTime = null, endTime = null) => {\n        if (startDate !== null && endDate !== null &&\n            startTime !== null && endTime !== null) {\n            let start = this.getDate(startDate, startTime);\n            let end = this.getDate(endDate, endTime);\n            this.props.rangeSelected(start.getTime(), end.getTime());\n        }\n        else {\n            this.props.hoursSelected(6, 0);\n        }\n\n        this.setState({ showDateAndTimeModal: false });\n    }\n\n    render() {\n        let ranges = new RangeHelper().getRanges();\n        return (\n            <div>\n                <ButtonToolbar>\n                    <ButtonGroup>\n\n                        <TanksSelection tankSelected={this.props.tankSelected}\n                            getSelectedTank={this.props.getSelectedTank} />\n                        <Button\n                            style={{ opacity: '0' }}>\n                            {\"spacer it\"}\n                        </Button>\n                    </ButtonGroup>\n                    <ButtonGroup>\n                        {\n                            ranges.map((range, index) => {\n                                return (\n                                    <Button\n                                        bsStyle=\"primary\"\n                                        value={index}\n                                        style={{ margin: '3px' }}\n                                        key={index}\n                                        onClick={() => this.rangeSelected(index)}>\n                                        {range}\n                                    </Button>\n                                )\n                            })\n                        }\n                    </ButtonGroup>\n                </ButtonToolbar>\n                <DateAndTimeModal show={this.state.showDateAndTimeModal} onHide={this.dateAndTimeModalClose} />\n            </div>);\n    }\n}\n\nexport default RangeView;\n","import React from 'react';\n//import { curveCatmullRom } from 'd3-shape';\nimport \"../../../node_modules/react-vis/dist/style.css\"\nimport { getFormattedTime } from \"app/adminHelper.jsx\"\n\nimport {\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    FlexibleWidthXYPlot,\n    LineSeries,\n    DiscreteColorLegend\n} from 'react-vis';\n\nexport default class VisGraph extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            crosshairValues: []\n        };\n        this.colors = ['blue', 'red', 'green', 'black', 'orange', 'grey'];\n    }\n\n    getData = (data) => {\n        if (this.props.maxPoints === undefined || this.props.maxPoints === null) {\n            return data;\n        }\n        else {\n            if (this.props.maxPoints > data.length) {\n                return data;\n            }\n            let stayIndex = parseInt(data.length / this.props.maxPoints, 10);\n            for (var i = data.length - 2; i > 0; i--) {\n                if (i % stayIndex !== 0) {\n                    data.splice(i, 1);\n                }\n            }\n            return data;\n        }\n    }\n\n    myFormatter = (t, i) => {\n        let formatedTime = getFormattedTime(t);\n        let splitted = formatedTime.split('-');\n        \n        return (<tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[0]}</tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[1]}</tspan>\n        </tspan>);\n    }\n\n    getLegendItems = () => {\n        let items = [];\n        for (let index in this.props.data) {\n            let data = this.props.data[index];\n            if (data.length !== 0){\n                if (data[0].tankName !== \"\") { // not a real tank, helper points\n                    let obj = { title: data[0].tankName, color: this.colors[index % this.colors.length] };\n                    items.push(obj);\n                }\n            }\n        }\n        return items;\n    }\n\n    getxValues = (tickTotal) => {\n        // get the data array\n        for (let index in this.props.data){\n            let dataLen = this.props.data[index].length;\n            if (dataLen>2){\n                let ret = [];\n                let data = this.props.data[index];\n                let firstX = data[0].x - (data[0].x%3600000) + 3600000;\n                let hours = parseInt((data[dataLen-1].x - data[0].x - 1000*60)/1000/60/60,10);\n                let hoursJump = parseInt(hours/6,10);\n                let jumps = 3600000*(hoursJump + 1);\n                if (tickTotal>5){\n                    jumps/=2;\n                    if (data[0].x < firstX-jumps){\n                        firstX-=jumps;\n                    }\n                }\n                else{\n                    if (hours > 12){\n                        tickTotal+=1;\n                    }\n                }\n                for (let index=0;index<tickTotal;index++){\n                    ret.push(firstX + index*jumps);\n                }\n                return ret;\n            }\n        }\n        return null\n    }\n\n    render() {\n        let tickTotal = (window.innerWidth <= 994) ? 5 : 12;\n        let legenItems = this.getLegendItems();\n        let xValues = this.getxValues(tickTotal);\n        return (\n            <div>\n                <FlexibleWidthXYPlot\n                    height={360} \n                    margin={{left:60}}>\n                    <DiscreteColorLegend\n                        items={legenItems}\n                        orientation=\"horizontal\" />\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis title=\"\" tickValues={xValues} tickFormat={this.myFormatter}\n                        style={{\n                            line: { stroke: '#ADDDE1' },\n                            ticks: { stroke: '#ADDDE1' },\n                            text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600 }\n                        }} />\n                    <YAxis title=\"\" tickTotal={15} tickFormat={(v) => v.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\") + \"L\"} style={{size:10}}/>\n\n                    {this.props.data.map((data, index) => {\n                        return (\n                            <LineSeries\n                                key={index}\n                                xType={'time'}\n                                className={\"series\" + { index }}\n                                color={this.colors[index % this.colors.length]}\n                                data={this.getData(data)} />)\n                    })}\n                </FlexibleWidthXYPlot>\n            </div>\n        );\n    }\n}","    \n    import { isTankFiltered } from \"../views/Tanks/Tanks\"\n    import TanksTable from \"../app/db/TanksTable\"\n\n    let graphFilteredTank = null;\n    let dataFilteredTank = null;\n\n    export function setGraphFilteredTank(tank){\n      graphFilteredTank = tank;\n    }    \n    export function getGraphFilteredTank(){\n      return graphFilteredTank;\n    }    \n    \n    export function setDataFilteredTank(tank){\n      dataFilteredTank = tank;\n    }    \n    \n    export function getDataFilteredTank(){\n      return dataFilteredTank;\n    }\n\n    /// filter \n    export function isFiltered(imei,filterStr) {\n\n        if (filterStr !== \"\") {\n          let tanks = new TanksTable().getTanks();\n          for (let index in tanks) {\n            if (tanks[index].imei === imei) {\n              return isTankFiltered(tanks[index], filterStr)\n            }\n          }\n        }\n    \n        return false;\n      }\n    \n\n    export function getFilteredReadings(readingsData, filterStr){\n        if (filterStr !== \"\" && readingsData.length !== 0) {\n          let readings = [...readingsData];\n          for (let index = readings.length - 1; index >= 0; index--) {\n            if (isFiltered(readings[index].imei,filterStr)) {\n              readings.splice(index, 1);\n            }\n          }\n          return readings;\n        }\n        else {\n          return readingsData;\n        }\n      }\n    ","import React from \"react\";\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader \n        type=\"Oval\"\n        color=\"#00BFFF\"\n        height=\"100\"\t\n        width=\"100\"\n     />   \n    );\n   }\n}","import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport RangeView from \"./../Dashboard/RangeView\";\nimport Card from \"components/Card/Card\";\nimport VisGraph from \"components/App/VisGraph.jsx\"\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady } from \"../../app/adminHelper\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { setGraphFilteredTank, getGraphFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\n\nclass Graph extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { graphReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"graph\");\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n            clearInterval(this.timer);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            graphReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeReady = (range) => {\n        this.setState({ graphReadings: range, rangeReady: true });\n    }\n\n    rangeReadingToGraphData() {\n        let retArray = [];\n        let maxX = 0;\n        let readings = getFilteredReadings(this.state.graphReadings, \"\");\n        let tt = new TanksTable();\n        let maxCapacity = 0;\n        for (let index in readings) {\n            let current = readings[index];\n            let tmpData = [];\n            let tank = tt.getTank(readings[index].imei);\n            if (tank === null || tank.capacity === null){\n                continue;\n            }\n            for (let currentIndex in current.levels) {\n                let obj = {\n                    x: current.times[currentIndex],\n                    y: current.levels[currentIndex] * tank.capacity / 100,\n                    tankName: tank.name\n                };\n                tmpData.push(obj);\n                if (current.times[currentIndex] > maxX) {\n                    maxX = current.times[currentIndex];\n                }\n\n                if (tank.capacity > maxCapacity) {\n                    maxCapacity = tank.capacity;\n                }\n            }\n            retArray.push(tmpData);\n        }\n\n        // add the max object - TODO fix\n        let tmpData = [];\n        tmpData.push({ x: maxX, y: maxCapacity * 1.2, tankName: \"\" }); // add 20% to the graph\n        retArray.push(tmpData);\n        tmpData = [];\n        tmpData.push({ x: maxX, y: 0, tankName: \"\" });\n        retArray.push(tmpData);\n\n        return retArray;\n    }\n\n    tankSelected = (tank) => {\n        setGraphFilteredTank(tank);\n        if (this.state.start === null) {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n        else {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getGraphFilteredTank();\n    }\n\n    render() {\n\n        if (this.state.rangeReady === false) {\n            return (\n                <Card\n                    hCenter={true}\n                    title=\"Loading Graph...\"\n                    content={<center><Spinner /></center>}\n                />)\n        }\n\n        let cardId = \"visGraph\"\n        let data = this.rangeReadingToGraphData();\n        let rangeHelper = new RangeHelper();\n        let selectedRange = rangeHelper.getSelectedString(this.state.rangeIndex) + \" for tank: \" + this.getSelectedTank().name;\n\n        return (\n            <Col md={12}>\n                <Card\n                    id={cardId}\n                    title={translate(\"volumeHistory\")}\n                    category={selectedRange}\n                    hCenter={true}\n                    stats={<RangeView\n                        hoursSelected={this.hoursSelected}\n                        rangeSelected={this.rangeSelected}\n                        tankSelected={this.tankSelected}\n                        getSelectedTank={this.getSelectedTank} />}\n                    content={\n                        <div style={{height: '380px'}}>\n                            <VisGraph\n                                data={data}\n                                maxPoints={100}\n                            />\n                        </div>\n                    }\n                />\n            </Col>\n        );\n    }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport { Col, Table, Button } from \"react-bootstrap\";\nimport Card from \"components/Card/Card.jsx\";\nimport TanksTable from \"../../app/db/TanksTable\"\nimport { getFormattedTime, isMobile } from \"app/adminHelper.jsx\"\nimport { AppLogger } from \"../../app/Logger\";\nimport { makePdf } from \"./PdfMaker\"\n\nclass TableList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.arrayForTable = [];\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.tanksNames = [];\n    this.state = {excelTableReady : false};\n  }\n\n  componentDidMount = () => {\n    import('./ExcelTable').then(ExcelTable => {\n      this.ExcelTable = ExcelTable;\n      this.setState({ excelTableReady: true });\n      console.log(\"excelTable Ready\");\n    })\n  }\n\n  getHeader = () => {\n    return [\"ID\", \"Tank\", \"Left in Tank (%)\", \"Volume\", \"Time\"];\n  }\n\n  createData = () => {\n    AppLogger(this, \"createData --->\");\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.arrayForTable = [];\n    this.tanksNames = [];\n    let tt = new TanksTable();\n    let count = 1;\n    for (let index in this.props.rangeReadings) {\n      let tank = tt.getTank(this.props.rangeReadings[index].imei);\n      let tankName = tank.name;\n      this.tanksNames.push(tankName);\n      this.arrayForExcel[index] = [];\n      this.arrayForPdf[index] = [];\n      this.arrayForPdf[index].push([tankName, 'Time', 'Left In Tank', 'Volume']);\n      for (let readings in this.props.rangeReadings[index].levels) {\n        let time = getFormattedTime(this.props.rangeReadings[index].times[readings]);\n        let level = this.props.rangeReadings[index].levels[readings];\n        let sample = this.props.rangeReadings[index].samples[readings];\n        let vol = level * tank.capacity / 100;\n        let row = [\n          count++,\n          tankName,\n          level + \" %\",\n          vol + \" L\",\n          time];\n        this.arrayForTable.push(row);\n        let rowForExcel = { time: time, level: level + \" %\", vol: vol + \" L\", samples: sample };\n        this.arrayForExcel[index].push(rowForExcel);\n        this.arrayForPdf[index].push(['', time, level + \" %\", vol + \" L\"]);\n      }\n      if (this.props.rangeReadings[index].levels.length === 0) {\n        // tank without readings history\n        let row = [\n          \"!!!!!!!\",\n          tankName,\n          \"No History For This Tank\",\n          \"!!!!!!!\",\n          \"!!!!!!!\"];\n        this.arrayForTable.push(row);\n      }\n    }\n\n    AppLogger(this, \"<--- create data\")\n  }\n\n  creatPdfDocDefinition = () => {\n    let array = [];\n    for (let index in this.arrayForPdf) {\n      let pb = { text: '', pageBreak: 'after', style: 'subheader' };\n\n      let obj = {\n        style: 'tableExample',\n        table: {\n          headerRows: 1,\n          widths: ['*', '*', '*', '*'],\n          body: this.arrayForPdf[index]\n        }\n      };\n      array.push(obj);\n      array.push(pb);\n    }\n\n    return array;\n  }\n\n  exportToPdf = (exportOrPrint) => {\n    makePdf(exportOrPrint, this.creatPdfDocDefinition());\n  }\n\n  renderExport = () => {\n    console.log(\"renderExport\");\n    return (\n      <div>\n        <div>\n          {this.props.rangeButtons}\n        </div>\n        <div>\n          <this.ExcelTable.default button={<Button bsStyle=\"primary\" style={{ margin: '3px' }} >Export To Excel</Button>} data={this.arrayForExcel} tanksNames={this.tanksNames} />\n          <Button bsStyle=\"primary\" style={{ margin: '3px' }} onClick={() => this.exportToPdf('export')}>Export To PDF</Button>\n          {isMobile() === false &&\n            <Button bsStyle=\"primary\" style={{ margin: '3px' }} onClick={() => this.exportToPdf('print')}>Print</Button>\n          }\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n\n    if (this.state.excelTableReady === false){\n      return null;\n    }\n    console.log(\"render TableList \");\n\n    this.createData();\n    let header = this.getHeader();\n    return (\n      <Col md={12}>\n        <Card\n          title={this.props.title}\n          category={this.props.category}\n          hCenter={true}\n          ctTableFullWidth\n          stats={this.renderExport()}\n          content={\n            <div style={{ height: '50%', overflowY: 'auto' }}>\n              <Table striped hover >\n                <thead >\n                  <tr>\n                    {header.map((prop, key) => {\n                      return <th key={key}>{prop}</th>;\n                    })}\n                  </tr>\n                </thead>\n                <tbody style={{ overflow: 'auto' }}>\n                  {this.arrayForTable.map((prop, key) => {\n                    return (\n                      <tr key={key}>\n                        {prop.map((prop, key) => {\n                          return <td key={key}>{prop}</td>;\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          }\n        />\n      </Col>\n    );\n  }\n}\n\nexport default TableList;\n","\n\nexport function makePdf(exportOrPrint, pdfDocDefinition) {\n\n    import('pdfmake/build/pdfmake.js')\n        .then((pdfMake) => {\n            // pdfMake was loded\n            console.log(\"pdfMake loded\");\n            var docDefinition = {\n                compress: true,\n                content: pdfDocDefinition\n            };\n\n            import('pdfmake/build/vfs_fonts.js')\n                .then((pdfFonts) => {\n                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\n                    pdfMake.tableLayouts = {\n                        exampleLayout: {\n                            hLineWidth: function (i, node) {\n                                if (i === 0 || i === node.table.body.length) {\n                                    return 0;\n                                }\n                                return (i === node.table.headerRows) ? 2 : 1;\n                            },\n                            vLineWidth: function (i) {\n                                return 0;\n                            },\n                            hLineColor: function (i) {\n                                return i === 1 ? 'black' : '#aaa';\n                            },\n                            paddingLeft: function (i) {\n                                return i === 0 ? 0 : 8;\n                            },\n                            paddingRight: function (i, node) {\n                                return (i === node.table.widths.length - 1) ? 0 : 8;\n                            }\n                        }\n                    };\n\n                    // download the PDF\n                    if (exportOrPrint === 'export') {\n                        pdfMake.createPdf(docDefinition).download('NTCL-MonitoringData.pdf');\n                    }\n                    if (exportOrPrint === 'print') {\n                        pdfMake.createPdf(docDefinition).print();\n                    }\n                })\n                .catch(err => {\n                    console.log(err + \"Error importing pdfFonts\");\n                });\n        })\n        .catch(err => {\n            // Handle failure\n            console.log(err + \"Error importing pdfMake\");\n        });\n};","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady } from \"../../app/adminHelper\";\nimport TableList from \"../TableList/TableList\"\nimport RangeView from \"./../Dashboard/RangeView\";\nimport { setDataFilteredTank, getDataFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\nimport Card from \"components/Card/Card\";\nimport { Col } from \"react-bootstrap\";\n\nclass Data extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tableReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"data\");\n            clearInterval(this.timer);\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            tableReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    tankSelected = (tank) => {\n        setDataFilteredTank(tank);\n        // update the data according to the last selection\n        if (this.state.start !== null) {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n        else {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getDataFilteredTank();\n    }\n\n    rangeReady = (range) => {\n        this.setState({ tableReadings: range, rangeReady: true });\n    }\n\n    render() {\n\n        if (this.state.rangeReady === false) {\n            return (\n                <Col md={12}>\n                <Card \n                    hCenter={true}\n                    title=\"Loading Data...\"\n                    content={<center><Spinner /></center>}\n                /></Col>)\n        }\n\n        return (\n            <TableList\n                rangeReadings={getFilteredReadings(this.state.tableReadings, \"\")}\n                title={translate(\"latestData\")}\n                rangeButtons={<RangeView\n                    hoursSelected={this.hoursSelected}\n                    rangeSelected={this.rangeSelected}\n                    tankSelected={this.tankSelected}\n                    getSelectedTank={this.getSelectedTank} />}\n                category={new RangeHelper().getSelectedString(this.state.rangeIndex)} />\n        )\n    }\n}\n\nexport default Data;\n","import React, { Component } from 'react'\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n        };\n\n        this.activeMarkerTitle = \"\";\n    }\n\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMouseOver = (props, marker, e) => {\n        if (this.activeMarkerTitle === marker.title) {\n            return;\n        }\n        else {\n            this.activeMarkerTitle = marker.title;\n        }\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n\n        this.activeMarkerTitle = \"\";\n    };\n\n    renderMarkers = (markers) => {\n        return (\n            markers.map((marker, index) => {\n                return <Marker\n                    onClick={this.onMarkerClick}\n                    onMouseover={this.onMouseOver}\n                    title={\"\" + index}\n                    info={marker.info} key={index}\n                    position={{ lat: marker.lat, lng: marker.lng }} />\n            }\n            ));\n    }\n\n    getCenter = (markers) => {\n        let lat = 0;\n        let lng = 0;\n        let ignore = 0;\n        for (let index in markers) {\n            if (markers[index].lat === 0 || markers[index].lng === 0){\n                ignore+=1;\n            }\n            lat += markers[index].lat;\n            lng += markers[index].lng;\n        }\n\n        // make sure we not dividing by 0\n        let div = (markers.length-ignore)!==0?(markers.length-ignore):1\n\n        return { lat: lat / div, lng: lng / div };\n    }\n\n    convertGpsPosition = (pos) => {\n        let lat = parseFloat(pos.lat.substring(0, 9), 10);\n        let lng = parseFloat(pos.lng.substring(0, 10), 10);\n\n        let latSign = (pos.lat[9] === \"N\") ? 1 : -1;\n        let lngSign = (pos.lng[10] === \"E\") ? 1 : -1;\n\n        return {\n            info: pos.info,\n            lat: (Math.floor(lat / 100) + ((lat % 100) / 60))*latSign,\n            lng: (Math.floor(lng / 100) + ((lng % 100) / 60))*lngSign\n        };\n    }\n\n    render() {\n        const style1 = {\n            height: this.props.height,\n            position: 'relative'\n        }\n        const style2 = {\n            width: '90%',\n            height: '90%',\n            position: 'relative'\n\n        }\n\n        let markers = [];\n        for (let index in this.props.markers) {\n            markers.push(this.convertGpsPosition(this.props.markers[index]));\n        }\n\n        return (\n            <div style={style1}>\n                <center><Map google={window.google}\n                    zoom={this.props.zoom} style={style2}\n                    onClick={this.onMapClicked}\n                    onReady={this.mapIsReady}\n                    initialCenter={this.getCenter(markers)}>\n\n                    {this.renderMarkers(markers)}\n\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}>\n                        <div>\n                            {this.state.selectedPlace.info}\n                        </div>\n                    </InfoWindow>\n                </Map></center>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyAugb6uKPRiLYNHII5GEgQxHVSTL73IUVk')\n})(MapContainer)","import React, { Component } from \"react\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport MapContainer from \"../../components/App/Map\"\nimport { Card } from \"../../components/Card/Card\"\nimport { isAppReady } from \"../../app/adminHelper\";\nimport { Col, Table } from \"react-bootstrap\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nclass Locations extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lastTanksReadings: [] };\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  tick = () => {\n    if (isAppReady()) {\n      this.setState({ lastTanksReadings: new TanksReading().getLevelMonitoring(\"name\") });\n      clearInterval(this.timer);\n    }\n  }\n\n  renderInfo = (reading) => {\n    let tt = new TanksTable();\n    let tank = tt.getTank(reading.imei);\n\n    return (\n      <Table striped bordered condensed hover>\n        <tbody>\n          <tr>\n            <td><center>Tank Name</center></td>\n            <td><center>{tank.name}</center></td>\n          </tr>\n          <tr>\n            <td><center>Building</center></td>\n            <td><center>{tank.building}</center></td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  }\n\n  getMarkers = () => {\n    let filterStr = this.props.filterStr;\n    if (filterStr === null || filterStr === undefined) {\n      filterStr = \"\";\n    }\n    let markers = [];\n    let readings = getFilteredReadings(this.state.lastTanksReadings, filterStr);\n    for (let index in readings) {\n      let info = this.renderInfo(readings[index]);\n        markers.push({\n          info: info,\n          lat: readings[index].gps.lat,\n          lng: readings[index].gps.long\n        })\n    }\n\n    return markers;\n  }\n\n  render() {\n\n    let markers = this.getMarkers();\n\n    if (markers.length === 0) {\n      return null;\n    }\n\n    let title = translate(\"tankLocation\");\n    if (markers.length > 1) {\n      title = translate(\"tanksLocations\")\n    }\n\n    let height = this.props.fromDashbord ? '40%' : '80%';\n\n    return (\n      <Col xs={12}>\n        <Card\n          hCenter={true}\n          statsIcon=\"fa fa-history\"\n          id=\"chartHours\"\n          title={title}\n          stats=\"Updated\"\n          content={<MapContainer height={height} markers={markers} zoom={13} />}\n        />\n      </Col>\n    );\n  }\n}\n\nexport default Locations;\n","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\"\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport { renderTanks, renderFilterTanksCard } from \"../Tanks/Tanks.jsx\"\nimport Graph from \"../Graph/Graph\";\nimport Data from \"../Data/Data\";\nimport Locations from \"../Location/Locations\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady } from \"../../app/adminHelper\"\nimport Spinner from \"../App/Spinner\"\nimport logo from \"assets/img/orbitBanner.png\";\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tanks: [],\n      lastTanksReadings: [],\n      filterStr: \"\"\n    }\n    this.getRangeReadingOnce = true;\n    this.tickToggle = true;\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 35000);\n    this.fastTimer = setInterval(this.fastTick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n    clearInterval(this.fastTimer);\n  }\n\n  tick = () => {\n    if (this.tickToggle) {\n      // update the last readings\n      new TanksReading().getLastReading(this.tanksReadingReady);\n    }\n    else {\n      // read the tanks table for alers\n      new TanksTable().start(this.dataIsReady, true);\n    }\n    this.tickToggle = this.tickToggle ? false : true;\n  }\n\n  fastTick = () => {\n    if (isAppReady()) {\n      this.dataIsReady();\n      clearInterval(this.fastTimer);\n    }\n  }\n\n  dataIsReady = () => {\n    // check is this is admin user or regulare\n    let tt = new TanksTable();\n    let logInHelper = new LogInHelper();\n    let customerId = logInHelper.getLoggedInCustomerId();\n    if (logInHelper.isAdmin()) {\n      this.setState({ tanks: tt.getTanks() });\n    }\n    else {\n      this.setState({ tanks: tt.getCustomerTanks(customerId) });\n    }\n\n    this.tanksReadingReady();\n\n  }\n\n  tanksReadingReady = () => {\n    let lm = new TanksReading().getLevelMonitoring(\"name\");\n    if (lm) {\n      this.setState({ lastTanksReadings: lm });\n    }\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n\n  renderTanks() {\n\n    let readings = getFilteredReadings(this.state.lastTanksReadings, this.state.filterStr);\n\n    return renderTanks(readings, false);\n  }\n\n\n  renderAlerts = () => {\n    let nh = new NotificationHelper();\n\n    let levelAlerts = nh.getLevelNotifications();\n    let hearBeatAlerts = nh.getHeartBeatNotification();\n\n    if (levelAlerts.length === 0 && hearBeatAlerts.length === 0) {\n      return null;\n    }\n\n    return (\n      <Col xs={12} onClick={() => this.props.history.push(`alerts`)}>\n        <StatsCard\n          statsText={\n            <div style={{ animation: 'scale 0.5s linear infinite alternate', color: 'red' }}>\n              <i className=\"pe-7s-gleam text-danger\">Alerts</i>\n            </div>}\n          statsValue={<div>\n            <br />\n            {levelAlertView(levelAlerts)}\n            {heartBeatView(hearBeatAlerts)}\n          </div>}\n          statsIcon={<i className=\"fa fa-clock-o\" />}\n          statsIconText=\"Click for more info\"\n        />\n      </Col>\n    );\n  }\n\n  render() {\n    if (this.state.tanks.length === 0) {\n      return (\n        <Card\n          hCenter={true}\n          title=\"Loading ...\"\n          content={<center><Spinner /></center>}\n        />\n      );\n    }\n\n    return (\n      <div className=\"content\">\n        <center><img src={logo} alt=\"logo_image\" style={{ height: '8.5%' }} /></center>\n        <p />\n        <Grid fluid >\n          <Row>\n            {renderFilterTanksCard(this)}\n          </Row>\n          <Row>\n            {this.renderAlerts()}\n          </Row>\n          <Row>\n            {this.renderTanks()}\n          </Row>\n          <Row>\n            <Graph />\n          </Row>\n          <Row>\n            <Locations filterStr={this.state.filterStr} fromDashbord={true} />\n          </Row>\n          <Row>\n            <Data />\n          </Row>\n          {/*\n          <Row>\n            <Col md={12}>\n              <Card\n                hCenter={true}\n                title=\"Monitoring Tanks Is Active\"\n                content={<center><Spinner /></center>}\n              />\n            </Col>\n          </Row>\n */}\n          {/*<Row>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-server text-warning\" />}\n                statsText=\"Capacity\"\n                statsValue=\"105GB\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-wallet text-success\" />}\n                statsText=\"Revenue\"\n                statsValue=\"$1,345\"\n                statsIcon={<i className=\"fa fa-calendar-o\" />}\n                statsIconText=\"Last day\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-graph1 text-danger\" />}\n                statsText=\"Errors\"\n                statsValue=\"23\"\n                statsIcon={<i className=\"fa fa-clock-o\" />}\n                statsIconText=\"In the last hour\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"fa fa-twitter text-info\" />}\n                statsText=\"Followers\"\n                statsValue=\"+45\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            \n            <Col md={4}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Email Statistics\"\n                category=\"Last Campaign Performance\"\n                stats=\"Campaign sent 2 days ago\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={dataPie} type=\"Pie\" />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendPie)}</div>\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <Card\n                id=\"chartActivity\"\n                title=\"2014 Sales\"\n                category=\"All products including Taxes\"\n                stats=\"Data information certified\"\n                statsIcon=\"fa fa-check\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataBar}\n                      type=\"Bar\"\n                      options={optionsBar}\n                      responsiveOptions={responsiveBar}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendBar)}</div>\n                }\n              />\n            </Col>\n\n            <Col md={6}>\n              <Card\n                title=\"Tasks\"\n                category=\"Backend development\"\n                stats=\"Updated 3 minutes ago\"\n                statsIcon=\"fa fa-history\"\n                content={\n                  <div className=\"table-full-width\">\n                    <table className=\"table\">\n                      <Tasks />\n                    </table>\n                  </div>\n                }\n              />\n            </Col>\n          </Row>\n              \n          </Row>*/}\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { getPrimaryColor } from 'app/adminHelper'\nimport { translate } from 'app/lang/lang.js'\nimport { industries } from 'app/lang/dic.js'\n\nexport class CustomerForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customerName: \"\", hideButtons: false, formMessage: null,\n            mailingList: [],\n            industry: industries[0]\n        };\n\n        this.style = { 'color': getPrimaryColor() };\n\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, formMessage: message });\n        }\n        else {\n            this.props.onHide();\n            this.setState({ hideButtons: false, formMessage: '' });\n        }\n    }\n\n    addNewCustomer() {\n        if (this.validatCustomer() === 'error'){\n            this.setState({ formMessage: 'Invalid customer name' });\n            return;\n        }\n        this.setState({ hideButtons: true, formMessage: 'Adding New Customer...' });\n        let customrtTable = new CustomersTable();\n        customrtTable.addNewCustomer(\n            this.state.customerName,\n            this.state.industry,\n            this.state.mailingList,\n            this.restCallBack);\n    }\n\n    updateCustomer() {\n        AppLogger(this, \"updating \" + this.props.customer.name);\n        let customrtTable = new CustomersTable();\n        customrtTable.updateCustomer(this.props.customer, this.restCallBack);\n    }\n\n    validateMail(mail) {\n        var re = /\\S+@\\S+\\.\\S+/;\n        if (mail && mail.length !== 0 && re.test(mail) === false) {\n            return 'error';\n        }\n\n        return 'success';\n    }\n\n    validatCustomer() {\n        if (this.state.customerName.length > 2) {\n            return 'success'\n        }\n        return 'error'\n    }\n\n    deleteMail = (index) => {\n        let tmpMailingList = this.state.mailingList;\n        if (this.props.customer) {\n            tmpMailingList = this.props.customer.mailing_list;\n        }\n        tmpMailingList.splice(index, 1);\n        this.setState({ mailingList: tmpMailingList });\n        if (this.props.customer) {\n            this.props.customer.mailing_list = tmpMailingList;\n        }\n    }\n\n    addMail = () => {\n        if (this.validateMail(this.state.mailAddrees) === 'error') {\n            this.setState({ formMessage: \"Mail is not valid\" });\n        }\n        else {\n            let tmpMailingList = this.state.mailingList;\n            tmpMailingList.push(this.state.mailAddrees);\n            this.setState({ mailingList: tmpMailingList, formMessage: null });\n            if (this.props.customer) {\n                this.props.customer.mailing_list = tmpMailingList;\n            }\n        }\n    }\n\n    createMailForm = (mail, index) => {\n\n        return (\n            <div align=\"left\" key={index}>\n                <Button style={{ margin: '3px' }} value={index}\n                    onClick={(e) => this.deleteMail(e.target.value)}>\n                    Remove\n                </Button>\n                &nbsp; {mail}\n            </div>\n        );\n    }\n\n    renderFormCustomerFiled() {\n\n        let mailingList = this.state.mailingList;\n        if (this.props.customer) {\n            mailingList = [...this.props.customer.mailing_list];\n        }\n\n        return (\n            <div>\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\"\n                        validationState={this.validatCustomer()}>\n                        <center><ControlLabel style={this.style}>{translate('customerName')}</ControlLabel></center>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={translate('customerName')}\n                            onChange={(e) => { this.setState({ customerName: e.target.value, formMessage: null }) }}\n                        />\n                    </FormGroup>\n                }\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\">\n                        <center><ControlLabel style={this.style}>{translate('industry')}</ControlLabel></center>\n                        <FormControl componentClass=\"select\" onChange={(e) => this.setState({ industry: e.target.value })}>\n                            {industries.map(function (name, index) {\n                                return <option key={index} value={name}>\n                                    {translate(name)}\n                                </option>\n                            })}\n                        </FormControl>\n                    </FormGroup>\n                }\n                {\n                    mailingList.length > 0 && <center><ControlLabel style={this.style}>Alerts Mails</ControlLabel></center>\n                }\n                {\n                    mailingList.map((mail, index) => this.createMailForm(mail, index))\n                }\n                <hr/>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validateMail()}>\n                    <center><ControlLabel style={this.style}>{translate('mailAddress')}</ControlLabel></center>\n                    <FormControl\n                        type=\"email\"\n                        placeholder={translate('mailAddress')}\n                        onChange={(e) => { this.setState({ mailAddrees: e.target.value, formMessage: null }) }}\n                    />\n                </FormGroup>\n                <center><Button\n                    onClick={(index) => this.addMail(index)}>{\"Add Alerts Mail\"}\n                </Button></center>\n            </div>\n        )\n    }\n\n    createForm() {\n\n        return (\n            <form>\n                {this.renderFormCustomerFiled()}\n                <center><div>{this.state.formMessage}</div></center>\n            </form>\n        );\n    }\n\n    deleteCustomer() {\n        AppLogger(this, \"deleteCustomer \" + this.props.customer.id);\n\n        let customrtTable = new CustomersTable();\n        customrtTable.deleteCustomer(this.props.customer.id);\n        this.props.onHide();\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>{translate('cancel')}</Button>\n                {this.props.customer == null ?\n                    <Button onClick={() => this.addNewCustomer()}>{translate('add')}</Button> :\n                    <Button onClick={() => this.updateCustomer()}>{translate('update')}</Button>}\n            </div>\n        );\n    }\n\n    render() {\n        let addnewCustomerText = translate('addNewCustomer');\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        {this.props.customer ?\n                            \"Manage Customer - \" + this.props.customer.name :\n                            addnewCustomerText}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default CustomerForm;","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport UsersTable from \"../../app/db/UsersTable\";\nimport { getPrimaryColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\n\nexport class UsersForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { userName: \"\",password:\"\", hideButtons: false, settingMessage: null };\n\n        this.style = { 'color': getPrimaryColor() };\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, settingMessage: message });\n        }\n        else {\n            this.setState({ hideButtons: false, settingMessage: \"done\" });\n            this.props.onHide();\n        }\n    }\n\n    addNewUser() {\n        this.setState({ hideButtons: true, settingMessage: translate('addingNewUser') });\n        let usersTable = new UsersTable();\n        usersTable.add(\n            this.state.userName,\n            this.state.password,\n            this.props.customer.id,\n            this.props.customer.name,\n            this.restCallBack);\n    }\n\n    validate = (str) => {\n        if ((str.length > 2) && (str.indexOf(' ')) === -1) {\n            return 'success'\n        }\n        else{\n            return 'error';\n        }\n    }\n\n    validatUser() {\n        return this.validate(this.state.userName);\n    }\n\n    validatPass = () => {\n        return this.validate(this.state.password);\n    }\n\n    renderFormUsersFiled() {\n\n        return (\n            <div>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatUser()}>\n                    <center><ControlLabel style={this.style}>User Name</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                        onChange={(e) => { this.setState({ userName: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatPass()}>\n                    <center><ControlLabel style={this.style}>Password</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"Password\"\n                        onChange={(e) => { this.setState({ password: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n            </div>\n        )\n    }\n\n    createForm() {\n        return (\n            <form>\n                {this.renderFormUsersFiled()}\n                <center><div>{this.state.settingMessage}</div></center>\n            </form>\n        );\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>Cancel</Button>\n                {this.validatUser() === 'success' && this.validatPass() === 'success' &&\n                    <Button onClick={() => this.addNewUser()}>Add</Button>\n                }\n            </div>\n        );\n    } \n\n    render() {\n        AppLogger(this, \"render\");\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        Add New User\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default UsersForm;","import React from \"react\";\nimport {\n    Modal, Button, FormGroup, FormControl, ControlLabel,\n    DropdownButton, MenuItem\n} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AppLogger } from \"../../app/Logger\";\nimport { liquids, sensors } from 'app/lang/dic.js'\nimport { translate } from \"../../app/lang/lang\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nclass SettingsModal extends React.Component {\n\n    render() {\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.props.text.map((text, index) =>\n                        <div key={index}>{text}</div>\n                    )}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport class TankForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imei: \"\",\n            phone: '0000',\n            name: \"\",\n            building: \"\",\n            liquid_type: liquids[0],\n            sensor_type: sensors[0],\n            capacity: 0,\n            high: 0,\n            iccid: '12345', //default\n            sampling_interval: 0,\n            heartbeat_timeout: (60 * 60000),\n\n            // settings modal\n            showSettingsModal: false,\n            settingsModalText: [],\n            level_alerts: [],\n\n            simConfigurationIndex: 0 // 0 for local sim 1 for monogoto\n        };\n\n        this.message = null;\n\n        // form place holders\n        this.imeiPh = \"Tank ID (IMEI)\";\n        this.iccidPh = \"Thing ICCID\";\n        this.phoneNumberPh = \"Tank Phone number\";\n        this.namePh = \"Tank Name\";\n        this.buildingPh = \"Building Name\"\n        this.capacityPh = \"Capacity\";\n        this.highPh = \"Hight\";\n        this.sampleIntervalPh = \"Sample Interval\";\n\n        this.runTimer = true;\n\n        // sim config\n        this.simConfigurationTitle = [\n            \"Configuring Local SIM \",\n            \"Configuring Monogoto SIM \"];\n    }\n\n    validateForm() {\n        if (this.state.imei.length !== 15 && this.state.imei.length !== 16) {\n            return \"Invalid IMEI - length must be 15 or 16 current length is \" + this.state.imei.length;\n        }\n\n        if (this.state.simConfigurationIndex === 1 && this.state.iccid.length < 5) {\n            return \"Invalid iccid length, current length \" + this.state.iccid.length;\n        }\n\n        if (this.state.sampling_interval < 60) {\n            return \"Invalid Sampling Interval - value is less the 60 seconds\";\n        }\n\n        if (this.state.name === \"\") {\n            return \"Invalid tank name - name can't be empty\";\n        }\n\n        if (this.state.capacity === 0) {\n            return \"Invalid tank capacity - capacity can't be 0\";\n        }\n\n        if (this.state.high === 0) {\n            return \"Invalid tank high - high can't be 0\";\n        }\n\n        return null;\n    }\n\n    updateSettingsTimeOut = () => {\n        this.setState({ showSettingsModal: false, settingsModalText: [] });\n        this.props.onHide();\n        clearInterval(this.timer);\n    }\n\n    updateSettingsModal = (show, text) => {\n        AppLogger(this, \"updateSettingsModal \" + show);\n        AppLogger(this, \"updateSettingsModal \" + this.state.settingsModalText);\n        AppLogger(this, \"updateSettingsModal \" + text);\n        let textArray = this.state.settingsModalText.slice(0, this.state.settingsModalText.length);\n        textArray.push(text);\n        if (!show) { // close the modal after 2 seconds\n            this.setState({ settingsModalText: textArray });\n            this.timer = setInterval(this.updateSettingsTimeOut, 5000);\n        }\n        else {\n            this.setState({ showSettingsModal: show, settingsModalText: textArray });\n        }\n    }\n\n    addTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"done.\");\n            if (this.state.simConfigurationIndex === 0) {\n                this.configureThingDone();\n            }\n            else {\n                this.configureThing(this.setServerIp);\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Failed to add tank\");\n        }\n    }\n\n    addNewTank() {\n        AppLogger(this, \"addNewTank\");\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.addTank(this.addTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Adding Tank to DB...\");\n    }\n\n    updateTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"Updating Tank DB...Done\");\n            if (this.samplingIntervalChanged) { // update if interval changed\n                this.configureThing(this.setInterval);// update the thing\n            }\n            else {\n                this.updateSettingsModal(false, \"Setting thing done.\");\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Fail to update tank\");\n        }\n    }\n\n    updateTank() {\n        AppLogger(this, \"updateTank \");\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.updateTank(this.updateTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Updating Tank DB...\");\n    }\n\n    liquidSelected = (value) => {\n        let liquid = liquids[value]\n        this.setState({ liquid_type: liquid });\n    }\n\n    sensorSelected = (value) => {\n        let sensor = sensors[value]\n        this.setState({ sensor_type: sensor });\n    }\n\n    renderIccdAndPhone = () => {\n        if (this.state.simConfigurationIndex === 1) {\n            return (\n                <div>\n                    <ControlLabel>Tank ICCID</ControlLabel>\n                    {\n                        !this.props.tank &&\n                        <div>\n                            <FormControl\n                                type=\"text\"\n                                placeholder={this.iccidPh}\n                                onChange={(e) => this.setState({ iccid: e.target.value })}\n                            />\n                        </div>\n                    }\n                    {this.props.tank && <p> {this.props.tank.iccid}</p>}\n                    <ControlLabel>Phone number</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={this.phoneNumberPh}\n                        onChange={(e) => this.setState({ phone: e.target.value })}\n                    />\n                </div>)\n        }\n        else {\n            return null;\n        }\n    }\n\n    renderTankFileds() {\n        if (this.props.customer === null) {\n            return null;\n        }\n\n        return (\n            <FormGroup controlId=\"formBasicText\">\n                <ControlLabel>Tank ID (IMEI)</ControlLabel>\n                {!this.props.tank &&\n                    <div>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={this.imeiPh}\n                            onChange={(e) => this.setState({ imei: e.target.value })}\n                        />\n                    </div>\n                }\n                {this.props.tank && <p> {this.props.tank.imei}</p>}\n                {this.renderIccdAndPhone()}\n                <ControlLabel>Tank Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.namePh}\n                    onChange={(e) => this.setState({ name: e.target.value })}\n                />\n                <ControlLabel>Building Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.buildingPh}\n                    onChange={(e) => this.setState({ building: e.target.value })}\n                />\n                <ControlLabel>Tank Capacity (in liters)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.capacityPh}\n                    onChange={(e) => this.setState({ capacity: parseInt(e.target.value, 10) })}\n                />\n                <ControlLabel>Tank Hight (cm)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.highPh}\n                    onChange={(e) => this.setState({ high: parseFloat(e.target.value, 10) })}\n                />\n                <ControlLabel>Sample Interval (in second, min 60)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.sampleIntervalPh}\n                    onChange={(e) => {\n                        this.setState({ sampling_interval: parseInt(e.target.value, 10) });\n                        this.samplingIntervalChanged = true;\n                    }}\n                />\n                <div></div>\n                <ControlLabel style={this.style}>{translate('liquid')}</ControlLabel>\n                <br />\n                <DropdownButton\n                    title={translate(this.state.liquid_type)}\n                    id=\"liquidType\">\n                    {liquids.map((liquid, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.liquidSelected}>{translate(liquid)}</MenuItem>\n                    )}\n                </DropdownButton>\n                <br/>\n                <ControlLabel style={this.style}>{translate('sensor')}</ControlLabel>\n                <br/>\n                <DropdownButton\n                    title={this.state.sensor_type + 'M'}\n                    id=\"sensorType\">\n                    {sensors.map((sensor, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.sensorSelected}>{sensor}M</MenuItem>\n                    )}\n                </DropdownButton>\n            </FormGroup>\n        )\n    }\n\n    switchSimConfig = () => {\n        this.setState({ simConfigurationIndex: this.state.simConfigurationIndex === 0 ? 1 : 0 })\n    }\n\n    renderFormTitle() {\n        if (this.props.customer) {\n            let title = \"Adding new tank to - \" + this.props.customer.name;\n            if (this.props.tank) {\n                return \"Updating Tank - \" + this.props.tank.name;\n            }\n\n            return (\n                <div>\n                    <div>\n                        {title}\n                    </div>\n                    <div>\n                        {this.simConfigurationTitle[this.state.simConfigurationIndex]}\n                        <Button onClick={this.switchSimConfig}>Switch</Button>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    getToken = (callback) => {\n        let json = {\n            \"UserName\": \"guy@orbitmonitoring.com\", \"Password\": \"mono123!\"\n        };\n\n        let uri = 'https://console.monogoto.io/Auth';\n\n        axios.post(uri, json).then(response => {\n            AppLogger(this, \"getToken succedded\");\n            this.updateSettingsModal(true, \"done.\");\n            this.token = response.data.token;\n            callback && callback();\n        }).catch(error => {\n            AppLogger(this, error);\n            this.updateSettingsModal(false, \"Error on getting token\");\n        });\n    }\n\n    sendSemsToThing = (message, callback) => {\n        var config = {\n            headers: { 'Authorization': \"Bearer \" + this.token }\n        };\n\n        let json = {\n            \"Message\": message, \"From\": this.state.phone\n        };\n\n        let uri = \"https://console.monogoto.io/thing/ThingId_ICCID_\" + this.state.iccid + \"/sms\";\n\n        AppLogger(this, \"Sending thing API - \" + json.Message + \" \" + json.From);\n\n        axios.post(uri, json, config).then(response => {\n            AppLogger(this, \"testApi succedded\");\n            this.updateSettingsModal(true, \"done.\");\n            callback && callback();\n        }).catch(error => {\n            AppLogger(this, error);\n            this.updateSettingsModal(false, \"error on configure Modem\");\n        }\n        );\n    }\n\n    configureThing = (nextFunction) => {\n        AppLogger(this, \"configureThing\");\n        this.updateSettingsModal(true, \"getting token...\");\n        // first get the token\n        this.getToken(nextFunction);\n    }\n\n    setServerIp = () => {\n        AppLogger(this, \"setServerIp\");\n        this.updateSettingsModal(true, \"Setting server IP...\");\n        // configure the server IP\n        this.sendSemsToThing(\"pw123456,server=18.214.154.46,5005\", this.setServerIpDone);\n    }\n\n    setServerIpDone = () => {\n        AppLogger(this, \"setServerIpDone\");\n        this.nextFunction = this.setProtocol;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setProtocol = () => {\n        this.updateSettingsModal(true, \"Setting protocol...\");\n        this.sendSemsToThing(\"pw123456,protocol=udp\", this.setProtocolDone);\n    }\n\n    setProtocolDone = () => {\n        AppLogger(this, \"setProtocolDone\");\n        this.nextFunction = this.setInterval;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setInterval = () => {\n        AppLogger(this, \"setInterval\");\n        this.updateSettingsModal(true, \"Setting interval...\");\n        this.sendSemsToThing(\"pw123456,interval=\" + this.state.sampling_interval + \"s,\" + this.state.sampling_interval + \"s,0m,0d\", this.configureThingDone);\n    }\n\n    configureThingDone = () => {\n        AppLogger(this, \"configureThingDone\");\n        this.updateSettingsModal(false, \"Setting thing done.\");\n    }\n\n    smsTimeOut = () => {\n        clearInterval(this.timer);\n        this.nextFunction && this.nextFunction();\n    }\n\n\n    updateData = () => {\n        if (this.props.tank) {\n            let liquidTypeIndex = 0;\n            let sensorTypeIndex = 0;\n            if (this.props.tank) {\n                this.imeiPh = this.props.tank.imei;\n                this.iccidPh = this.props.tank.iccid;\n                this.phoneNumberPh = this.props.tank.phone;\n                this.namePh = this.props.tank.name;\n                this.buildingPh = this.props.tank.building;\n                this.capacityPh = this.props.tank.capacity;\n                this.highPh = this.props.tank.high;\n                this.sampleIntervalPh = this.props.tank.sampling_interval;\n                for (let index in liquids) {\n                    if (liquids[index] === this.props.tank.liquid_type) {\n                        liquidTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                for (let index in sensors) {\n                    if (sensors[index] === this.props.tank.sensor_type) {\n                        sensorTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                this.setState({\n                    imei: this.imeiPh,\n                    phone: this.phoneNumberPh,\n                    name: this.namePh,\n                    building: this.buildingPh,\n                    capacity: this.capacityPh,\n                    high: this.highPh,\n                    iccid: this.iccidPh,\n                    sampling_interval: this.sampleIntervalPh,\n                    liquid_type: liquids[liquidTypeIndex],\n                    sensor_type: sensors[sensorTypeIndex]\n                })\n            }\n        }\n        clearInterval(this.timer);\n    }\n\n    render() {\n        AppLogger(this, \"render\");\n\n        if (this.props.show === true) {\n            if (this.runTimer) {\n                this.timer = setInterval(this.updateData, 1000);\n                this.runTimer = false;\n                this.samplingIntervalChanged = false;\n            }\n        }\n        else {\n            this.runTimer = true;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.renderFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form>\n                        {this.renderTankFileds()}\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Cancel</Button>\n                    {this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.updateTank()}>Update</Button>}\n                    {!this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.addNewTank()}>Add</Button>}\n                </Modal.Footer>\n                <SettingsModal\n                    show={this.state.showSettingsModal}\n                    title={\"Setting Tank\"}\n                    text={this.state.settingsModalText} />\n            </Modal>\n        );\n    }\n}\n\nexport default TankForm;\n","import React from \"react\";\nimport { Grid, Row, Col, Button, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { CustomerForm } from \"views/Admin/CustomerForm\"\nimport { UsersForm } from \"views/Admin/UsersForm\"\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\nimport { TankForm } from \"views/Admin/TankForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nexport default class Customers extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customers: [],\n            showCustomersModal: false,\n            showTankForm: false,\n            showUsersModal: false,\n            selectedCustomer: null,\n            filterStr: \"\"\n        };\n\n        let color = getPrimaryColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal', 'margin': '3px' };\n    }\n\n    componentDidMount() {\n        this.readCustomers();\n    }\n\n    customerInfoReady = () => {\n        AppLogger(this, \"customerInfoReady\");\n        this.setState({ customers: new CustomersTable().getCustomers() });\n    }\n\n    readCustomers() {\n        new CustomersTable().start(this.customerInfoReady, true);\n    }\n\n    readTanks = () => {\n        new TanksTable().start(null, true);\n    }\n\n    operationCallBack = () => {\n        this.readCustomers();\n    }\n\n    closeCustomersModal() {\n        this.readCustomers();\n        this.setState({ showCustomersModal: false, selectedCustomer: null });\n    }\n\n    closeUsersModal() {\n        this.setState({ showUsersModal: false, selectedCustomer: null });\n    }\n\n    closeTankForm() {\n        this.readTanks();\n        this.setState({ showTankForm: false, selectedCustomer: null });\n    }\n\n    deleteCustomer(customer) {\n        let confirmText = 'Deleting Customrt: Are you sure you want to delete ' + customer.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            AppLogger(this, \"deleteCustomer \" + customer.name);\n\n            let customrtTable = new CustomersTable();\n            customrtTable.deleteCustomer(customer.id, this.operationCallBack);\n        }\n    }\n\n    addUser(customer) {\n        this.setState({ showUsersModal: true, selectedCustomer: customer });\n    }\n\n    addTank(customer) {\n        this.setState({ showTankForm: true, selectedCustomer: customer });\n    }\n\n    editCustomer = (customer) => {\n        this.setState({ showCustomersModal: true, selectedCustomer: customer })\n    }\n\n    renderManageCustomersButton(customer, index) {\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={\"Settings\"}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" style={this.buttonStyle} onClick={() => this.addUser(customer)}>Add User</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.addTank(customer)}>Add Tank</MenuItem>\n                <MenuItem eventKey=\"3\" onClick={() => this.editCustomer(customer)}>Edit Customer</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"4\" onClick={() => this.deleteCustomer(customer)}>Delete Customer</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col xs={6}>\n                <Card\n                    id={\"filterCustomers\"}\n                    title=\"Filter Customers\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"Customer Name\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n    getFilteredCustomers = () => {\n        if (this.state.customers.length === 0 || this.state.filterStr.length === 0) {\n            return this.state.customers;\n        }\n\n        let customers = [...this.state.customers];\n        for (let index = customers.length - 1; index >= 0; index--) {\n            //AppLogger(this,\"getFilteredCustomers index \" + index);\n            let name = customers[index].name;\n            //AppLogger(this,\"getFilteredCustomers name \" + name);\n            //AppLogger(this,\"getFilteredCustomers filter \" + this.state.filterStr);\n            if (name.search(this.state.filterStr) === -1) {\n                customers.splice(index, 1);\n            }\n        }\n\n        return customers;\n    }\n\n    renderCustomers() {\n        //AppLogger(this, \"rendring customers\");\n\n        let filteredCustomers = this.getFilteredCustomers();\n\n        return (\n            filteredCustomers.map((item, index) =>\n                <Col xs={6} md={3} key={index}>\n                    <Card\n                        hCenter={true}\n                        statsIcon=\"fa\"\n                        id=\"ManageCustomer\"\n                        title={\n                            <div>\n                                <div>{item.name}</div>\n                            </div>}\n                        category={\n                            <object>\n                                {translate('industry')}\n                                <br />\n                                {item.industry}\n                            </object>\n                        }\n                        stats={null}\n                        content={<center>{this.renderManageCustomersButton(item, index)}</center>}\n                    />\n                </Col>\n            )\n        );\n    }\n\n    renderAddCustomrtButton() {\n        return (\n            <center>\n                <Button bsSize=\"large\" bsStyle=\"primary\" style={this.buttonStyle} className=\"pe-7s-add-user\"\n                    onClick={() => this.setState({ showCustomersModal: true, customer: null })}>\n                    {\" \"}Add New Customer\n                </Button>\n            </center>\n        );\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"addCustomer\"\n                                title=\"New Customer\"\n                                category=\"\"\n                                stats={null}\n                                content={this.renderAddCustomrtButton()}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        {this.renderCustomers()}\n                    </Row>\n                </Grid>\n                <CustomerForm show={this.state.showCustomersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeCustomersModal()} />\n                <UsersForm show={this.state.showUsersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeUsersModal()} />\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    customer={this.state.selectedCustomer} />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksTable from \"../../app/db/TanksTable\";\n//import { translate } from \"../../app/lang/lang\";\n\nexport class AlertsForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            at_level: -1,\n            alert: 0,\n            subject: \"\",\n            body: \"\",\n\n            numberOfAlerts: 0,\n            statusMessage: \"\"\n        };\n    }\n\n    createForm() {\n        return (\n            <form>\n                <FormGroup controlId=\"formBasicText\">\n                    <ControlLabel>Alert Level</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Alert Level in %\"}\n                        onChange={(e) => this.setState({ at_level: parseInt(e.target.value, 10), statusMessage:\"\" })}\n                    />\n                    <ControlLabel>Mail Subject</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Subject\"}\n                        onChange={(e) => this.setState({ subject: e.target.value , statusMessage:\"\"})}\n                    />\n                    <ControlLabel>Mail Body</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Body\"}\n                        onChange={(e) => this.setState({ body: e.target.value, statusMessage:\"\" })}\n                    />\n                </FormGroup>\n                <Button bsStyle=\"success\" style={{ margin: '3px' }} onClick={() => this.addAlert()}>Add New Alert</Button>\n                {this.state.statusMessage}\n            </form>\n        );\n    }\n\n    addAlert = () => {\n        let validate = this.validate()\n        if (validate !== 'ok') {\n            this.setState({ statusMessage: validate });\n            return;\n        }\n        else {\n            this.setState({ statusMessage: \"\" });\n        }\n\n        // find empty alert id\n        let alertId = 0;\n        for (let index = 1; index < 2000; index++) {\n            for (let alertIndex in this.props.level_alerts) {\n                if (this.props.level_alerts[alertIndex].alert === index){\n                    break;\n                }\n            }\n            alertId = index;\n        }\n\n        let alert = {\n            \"alert\": alertId,\n            \"at_level\": this.state.at_level,\n            \"mail\": {\n                \"subject\": this.state.subject,\n                \"body\": this.state.body\n            }\n        }\n        this.props.tank.level_alerts.push(alert);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n\n    getFormTitle() {\n        if (this.props.tank) {\n            return \"Tanks Alerts - \" + this.props.tank.name;\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    delete = (index) => {\n        this.props.tank.level_alerts.splice(index, 1);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n    renderAlerts = () => {\n        return (\n            <div>\n                {this.props.tank.level_alerts.length > 0 && <ControlLabel>Alerts</ControlLabel>}\n                {this.props.tank.level_alerts.map((alert, index) =>\n                    <div>\n                        Level - {alert.at_level}% Subject - {alert.mail.subject} Body - {alert.mail.body}\n                        <Button bsStyle=\"warning\" style={{ margin: '3px' }} value={index}\n                            onClick={(e) => this.delete(e.target.value)}>Delete</Button>\n                    </div>\n                )}\n                {this.props.tank.level_alerts.length > 0 && <hr />}\n            </div>\n        );\n    }\n\n    validate = () => {\n        if (this.state.at_level < 0 || this.state.at_level > 100) {\n            return 'invalid level - must be a number 0-100';\n        }\n        // check if this we have alert with the same level\n        for (let index in this.props.tank.level_alerts){\n            if (this.props.tank.level_alerts[index].at_level === this.state.at_level){\n                return \"invalid level - tank allready has alert in level \" + this.state.at_level + \"%\";\n            }\n        }\n\n        if (this.state.body.length === 0) {\n            return \"invalid body - body is empty\";\n        }\n        if (this.state.subject.length < 2) {\n            return \"invalid subject - subject is empty\";\n        }\n        return 'ok';\n    }\n\n    updateAlerts = () => {\n        let tt = new TanksTable();\n        let customer = this.props.tank.customer;\n        tt.updateTank(this.updateAlertsCallBack, this.props.tank, customer);\n    }\n\n    updateAlertsCallBack = (success) => {\n        if (success){\n            this.setState({statusMessage:\"Updating alerts succedded\"});\n        }\n        else{\n            this.setState({statusMessage:\"Updating alerts failed\"});\n        }\n        //this.props.onHide && this.props.onHide();\n    }\n\n    render() {\n        AppLogger(this, \"render\");\n        if (this.props.tank === null) {\n            return null;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.getFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderAlerts()}\n                    {this.createForm()}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Done</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default AlertsForm;","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryColor, isAppReady } from 'app/adminHelper'\nimport TanksTable from \"../../app/db/TanksTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { TankForm } from \"views/Admin/TankForm\";\nimport { renderTanksParams } from \"views/Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\n\nexport default class Tanks extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTankForm: false,\n            showAlerstForm: false,\n            filterStr: \"\",\n            tank: null,\n            customer: null,\n            tanks: []\n        };\n        let color = getPrimaryColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal' };\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            this.tanksReady();\n            clearInterval(this.timer);\n        }\n    }\n\n    readTanks = () => {\n        let forceRead = true;\n        if (this.state.tanks.length === 0) {\n            forceRead = false;\n        }\n        let tt = new TanksTable();\n        tt.start(this.tanksReady, forceRead);\n    }\n\n    tanksReady = () => {\n        let tt = new TanksTable();\n        this.setState({ tanks: tt.getTanks().sort((a,b)=>a.name>b.name?1:-1) });\n    }\n\n    closeTankForm() {\n        this.setState({ showTankForm: false, tank: null, customer: null, tanks: [] });\n        let tt = new TanksTable();\n        tt.start(this.tanksReady, true);\n    }\n\n    editTank(tank) {\n        let ct = new CustomersTable();\n        let customer = ct.getCustomer(tank.customer);\n        this.setState({ showTankForm: true, tank: tank, customer: customer });\n    }\n\n    editAlert = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    deleteTank = (tank) => {\n        let confirmText = 'Deleting Tank: Are you sure you want to delete this tanks?';\n        if (window.confirm(confirmText)) {\n            let tt = new TanksTable();\n            tt.deleteTank(tank.imei, this.readTanks);\n        }\n    }\n\n    renderManageTankButton(tank, index) {\n        let title =\n            <div>\n                <div>{\"Settings\"}</div>\n            </div>;\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.editTank(tank)}>Edit Tank</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.editAlert(tank)}>Edit Alerts</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"3\" onClick={() => this.deleteTank(tank)}>Delete Tank</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderTanks = () => {\n        return (\n            this.state.tanks.map((tank, index) => {\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={renderTanksParams(tank, null, false)}\n                                content={<center>{this.renderManageTankButton(tank, index)}</center>}\n                            />\n                        </Col >\n                    )\n                }\n            }\n            )\n        )\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    tank={this.state.tank}\n                    customer={this.state.customer} />\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()}/>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport UsersTable from \"../../app/db/UsersTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nexport default class Users extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { users: [], filterStr: \"\" };\n    }\n\n    componentDidMount() {\n        let usersTable = new UsersTable();\n        usersTable.start(this.usersReadyCallBack, true);\n    }\n\n    usersReadyCallBack = () => {\n        let usersTable = new UsersTable();\n        this.setState({ users: usersTable.getUsers() });\n    }\n\n    deleteUser(user) {\n        let confirmText = 'Deleting User: Are you sure you want to delete ' + user.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            let usersTable = new UsersTable();\n            usersTable.remove(user.name, this.usersReadyCallBack);\n        }\n    }\n\n    renderActions = (user, index) => {\n        let title = \" User Settings \";\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                bsSize=\"large\"\n                className=\"pe-7s-settings\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.deleteUser(user)}>Delete User</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    isFiltered = (user, custeomrName) => {\n        if (this.state.filterStr.length !== 0 &&\n            user.name.search(this.state.filterStr) === -1 &&\n            custeomrName.search(this.state.filterStr) === -1\n        ) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    renderUsers() {\n        return (\n            this.state.users.map((user, index) => {\n                let custeomrName = new CustomersTable().getCustomerName(user.customer_id);\n                if (this.isFiltered(user, custeomrName)) {\n                    return null;\n                }\n                else if (user.role.toLowerCase() !== 'admin') {\n                    return (\n                        <Col xs={12} sm={6} key={index}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"ManageUser\"\n                                title={\n                                    <div>{user.name}</div>\n                                }\n                                category=\"\"\n                                stats={\"Customer - \" + custeomrName}\n                                content={<center>{this.renderActions(user, index)}</center>}\n                            />\n                        </Col>\n                    )\n                }\n                else {\n                    return null;\n                }\n            }\n            ));\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col md={4}>\n                <Card\n                    id={\"filterUsers\"}\n                    title=\"Filter Users\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"User / Customer\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n\n    render() {\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        {this.renderUsers()}\n                    </Row>\n                </Grid>\n            </div>)\n    }\n}\n\n","import React from \"react\";\nimport { Grid, Row, Col, Button, Alert } from \"react-bootstrap\";\nimport { renderTanks } from \"../Tanks/Tanks.jsx\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { isAppReady, getPrimaryColor } from 'app/adminHelper'\nimport { Card } from \"../../components/Card/Card\"\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport Spinner from \"../App/Spinner\";\n\nexport default class Alerts extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { appIsredy: false , showAlerstForm: false, tank: null };\n        this.counter = 1;\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(this.isAppReady, 1000);\n        this.isAppReady();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    isAppReady = () => {\n        if (isAppReady()) {\n            this.setState({ appIsredy: true });\n        }\n        \n        if (this.state.showAlerstForm === false && this.counter++ % 60 === 0) { // refresh view to show new alerts\n            this.setState({ appIsredy: false });\n        }\n    }\n\n    renderAlertsTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        return renderTanks(readings, true);\n    }\n\n    showAlertsForm = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    renderAlertsAndEdit = (tank) => {\n        let nh = new NotificationHelper();\n        let levelNotification = nh.getLevelNotificationsOnTank(tank);\n        let hearBeatNotification = nh.getHeartBeatNotificationForTank(tank);\n        let editAlert = <center><Button bsStyle=\"danger\" style={{ margin: '3px', color:getPrimaryColor() }} onClick={() => this.showAlertsForm(tank)}>Edit Alerts</Button></center>;\n        if (levelNotification.length === 0 && hearBeatNotification.length === 0) {\n            return (\n                <div>\n                    <Alert bsStyle=\"info\" className=\"alert-with-icon\">\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">No Alerts On This Tank<q>{alert.name}</q></span>\n                        </center>\n                    </Alert>\n                    {editAlert}\n                </div>\n            );\n        }\n        else {\n            return (\n                <div>\n                    {levelAlertView(levelNotification)}\n                    {heartBeatView(hearBeatNotification)}\n                    {editAlert}\n                </div>\n            )\n        }\n    }\n    \n\n    renderTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        return (\n            readings.map((reading, index) => {\n                let tt = new TanksTable();\n                let tank = tt.getTank(reading.imei);\n                if (tank === null) {\n                    return null;\n                }\n                let nh = new NotificationHelper();\n                let asAlerts = nh.getLevelNotificationsOnTank(tank).length!==0?true:false\n\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={this.renderAlertsAndEdit(tank)}\n                                content={<TankCard\n                                    value={reading.actual_level}\n                                    height={\"40%\"}\n                                    volume={volume}\n                                    asAlerts={asAlerts} />}\n                            />\n                        </Col>\n                    )\n                }\n            }\n            )\n        )\n    }\n\n\n    render() {\n        if (this.state.appIsredy === false) {\n            return (\n                <Card\n                    hCenter={true}\n                    title=\"Loading ...\"\n                    content={<center><Spinner/></center>}\n                />\n            );\n        }\n\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()} />\n            </div>\n        );\n        /*\n                return (\n                    <div className=\"content\">\n                        <Grid fluid>\n                            <Row>\n                                {this.renderAlertsTanks()}\n                            </Row>\n                        </Grid>\n                    </div>) */\n    }\n\n}\n\n","import React from \"react\";\nimport {AppLogerMessages} from \"app/Logger\"\n\nexport default class Logger extends React.Component{\n    \n    render(){\n        return (\n            <div>\n                {AppLogerMessages().map((msg, index) => \n                    <div key={index}>\n                        { msg }\n                    </div>)\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\n\nimport Card from \"components/Card/Card\";\nimport { iconsArray } from \"variables/Variables.jsx\";\n\nclass Icons extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"202 Awesome Stroke Icons\"\n                ctAllIcons\n                category={\n                  <span>\n                    Handcrafted by our friends from{\" \"}\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"http://themes-pixeden.com/font-demos/7-stroke/index.html\"\n                    >\n                      Pixeden\n                    </a>\n                  </span>\n                }\n                content={\n                  <Row>\n                    {iconsArray.map((prop, key) => {\n                      return (\n                        <Col\n                          lg={2}\n                          md={3}\n                          sm={4}\n                          xs={6}\n                          className=\"font-icon-list\"\n                          key={key}\n                        >\n                          <div className=\"font-icon-detail\">\n                            <i className={prop} />\n                            <input type=\"text\" defaultValue={prop} />\n                          </div>\n                        </Col>\n                      );\n                    })}\n                  </Row>\n                }\n              />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Icons;\n","\nimport React from \"react\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { Redirect } from 'react-router-dom'\n\nexport default class LogOut extends React.Component {\n\n    componentDidMount() {\n        let logIn = new LogInHelper();\n        logIn.logOut();\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div>\n                <Redirect to='/dashboard' />\n            </div>\n        );\n    }\n}","import Dashboard from \"views/Dashboard/Dashboard\";\nimport Customers from \"views/Admin/Customers\"\nimport Tanks from \"views/Admin/Tanks\"\nimport Users from \"views/Admin/Users\"\nimport Alerst from \"views/Admin/Alerts\"\nimport Logger from \"../views/Admin/Logger\";\nimport Icons from \"../views/Icons/Icons\"\nimport Graph from \"../views/Graph/Graph\"\nimport Data from \"../views/Data/Data\"\nimport Locations from \"../views/Location/Locations\"\nimport LogOut from \"./../views/App/LogOut\"\n\nconst dashboardRoutes = [\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"pe-7s-graph\",\n    component: Dashboard\n  },\n  {\n    path: \"/graph\",\n    name: \"Graph\",\n    icon: \"pe-7s-graph1\",\n    component: Graph\n  },\n  {\n    path: \"/data\",\n    name: \"Data\",\n    icon: \"pe-7s-note2\",\n    component: Data\n  },\n  {\n    path: \"/locations\",\n    name: \"Locations\",\n    icon: \"pe-7s-map-2\",\n    component: Locations\n  },\n  {\n    path: \"/logout\",\n    name: \"Log Out\",\n    icon: \"pe-7s-power\",\n    component: LogOut\n  },\n  //{\n  //  path: \"/user\",\n  //  name: \"User Profile\",\n  //  icon: \"pe-7s-user\",\n  //  component: UserProfile\n  //},\n  //{\n  //  path: \"/table\",\n  //  name: \"Table List\",\n  //  icon: \"pe-7s-note2\",\n  //  component: TableList\n  //},\n  //{\n  //  path: \"/typography\",\n  //  name: \"Typography\",\n  //  icon: \"pe-7s-news-paper\",\n  //  component: Typography\n  //},\n\n\n\n  {\n    path: \"/customers\",\n    name: \"Admin - Customers\",\n    icon: \"pe-7s-users\",\n    component: Customers,\n    show: \"admin\"\n  },\n  {\n    path: \"/tanks\",\n    name: \"Admin - Tanks\",\n    icon: \"pe-7s-server\",\n    component: Tanks,\n    show: \"admin\"\n  },\n  {\n    path: \"/users\",\n    name: \"Admin - Users\",\n    icon: \"pe-7s-users\",\n    component: Users,\n    show: \"admin\"\n  },\n  {\n    path: \"/alerts\",\n    name: \"Admin - Alerts\",\n    icon: \"pe-7s-gleam\",\n    component: Alerst,\n    show: 'admin'\n  },\n  {\n    path: \"/logger\",\n    name: \"Admin - logs\",\n    icon: \"pe-7s-rocket\",\n    component: Logger,\n    show: \"admin\"\n  },\n  { \n   path: \"/icons\", \n    name: \"Icons\", \n    icon: \"pe-7s-science\", \n    component: Icons,\n    show:\"admin\" \n   },\n  //{ path: \"/maps\", name: \"Maps\", icon: \"pe-7s-map-marker\", component: Maps },\n  //{\n  //  path: \"/notifications\",\n  //  name: \"Notifications\",\n  //  icon: \"pe-7s-bell\",\n  //  component: Notifications\n  //},\n  //{\n  //  upgrade: true,\n  ///  path: \"/upgrade\",\n  //  name: \"Upgrade to PRO\",\n  //  icon: \"pe-7s-rocket\",\n  //  component: Upgrade\n  //},\n  { redirect: true, path: \"/\", to: \"/dashboard\", name: \"Dashboard\" }\n];\n\nexport default dashboardRoutes;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nimport HeaderLinks from \"./HeaderLinks.jsx\";\nimport { getPrimaryColor} from \"../../app/adminHelper\"\nimport dashboardRoutes from \"routes/dashboard.jsx\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.mobileSidebarToggle = this.mobileSidebarToggle.bind(this);\n    this.state = {\n      sidebarExists: false\n    };\n  }\n  mobileSidebarToggle(e) {\n    if (this.state.sidebarExists === false) {\n      this.setState({\n        sidebarExists: true\n      });\n    }\n    e.preventDefault();\n    document.documentElement.classList.toggle(\"nav-open\");\n//    var node = document.createElement(\"div\");\n//    node.id = \"bodyClick\";\n//    node.onclick = function() {\n//      this.parentElement.removeChild(this);\n//      document.documentElement.classList.toggle(\"nav-open\");\n//    };\n//    document.body.appendChild(node);\n  }\n  getBrand() {\n    var name;\n    dashboardRoutes.map((prop, key) => {\n      if (prop.collapse) {\n        prop.views.map((prop, key) => {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n          return null;\n        });\n      } else {\n        if (prop.redirect) {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        } else {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        }\n      }\n      return null;\n    });\n    return name;\n  }\n  render() {\n    return (\n      <Navbar fluid style={{backgroundColor:getPrimaryColor()}} >\n        <Navbar.Header>\n          <Navbar.Brand>\n            <a href=\"#pablo\" style={{color:'white'}}>{this.getBrand()}</a>\n          </Navbar.Brand>\n          <Navbar.Toggle onClick={this.mobileSidebarToggle} />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <HeaderLinks />\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"assets/img/orbitNewLogo2.png\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { isAppReady } from 'app/adminHelper'\nimport { getPrimaryColor } from 'app/adminHelper'\nimport { getVersion } from '../../app/adminHelper'\n\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      appIsReady: false\n    };\n  }\n  componentDidMount = () => {\n    this.timer = setInterval(this.checkIfAppIsReady, 1000);\n    this.checkIfAppIsReady();\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  checkIfAppIsReady = () => {\n    if (isAppReady()) {\n      this.setState({ appIsReady: true });\n      clearInterval(this.timer);\n    }\n  }\n\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  updateDimensions() {\n    this.setState({ width: window.innerWidth });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    //const sidebarBackground = {\n    //  backgroundImage: \"url(\" + imagine + \")\"\n    //};\n    let logInHelper = new LogInHelper();\n    let isAdmin = logInHelper.isAdmin();\n    let logInUser = logInHelper.getLogedInUser()\n    return (\n      <div\n        id=\"sidebar\"\n        className=\"sidebar\"\n        data-color={'blue'}\n      >\n        <div className=\"sidebar-background\" />\n        <div className=\"logo\" style={{ backgroundColor: 'white' }}>\n          <center>\n            <a\n              href=\"dashboard\"\n              className=\"simple-text logo-mini\"\n            >\n              {/* rotating logo\n            <div className=\"logo-img\">\n              <img src={logo} alt=\"logo_image\" style={{ animation: 'spin 5s linear infinite' }} />\n            </div>\n          */}\n              <div className=\"logo-img\">\n                <img src={logo} alt=\"logo_image\" style={{ height: '130%', width: '130%' }} />\n              </div>\n            </a>\n            <a\n              href=\"dashboard\"\n              className=\"simple-text logo-normal\"\n              style={{ color: getPrimaryColor() }}\n            >\n              ORBIT\n          </a>\n          </center>\n        </div>\n        <div className=\"sidebar-wrapper\">\n          <ul className=\"nav\">\n            {dashboardRoutes.map((prop, key) => {\n              let show = true;\n              if ((prop.show && prop.show === 'admin' && !isAdmin) ||\n                (prop.redirect && prop.redirect === true)) {\n                show = false;\n              }\n              if (show)\n                return (\n                  <li\n                    className={\n                      prop.upgrade\n                        ? \"active active-pro\"\n                        : this.activeRoute(prop.path)\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                    >\n                      <i className={prop.icon} style={{\n                        display: 'block',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        width: '100%'\n                      }} />\n                      <div>\n                        <center><h4>{prop.name}</h4></center>\n                      </div>\n                    </NavLink>\n                  </li>\n                );\n              return null;\n            })}\n            <center>\n              <hr/>\n              <div style={{ color: 'white' }}>{getVersion()}</div>\n              <br />\n              <div style={{ color: 'white' }}>User Name - {logInUser}</div>\n              <hr/>\n            </center>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import { AppLogger } from \"app/Logger\";\nimport UsersTable from '../../app/db/UsersTable'\nimport { Cookies } from 'react-cookie';\nimport React from \"react\";\nimport { Modal, FormControl, Button } from 'react-bootstrap';\nimport { LogInHelper } from '../../app/logInHelper.jsx'\n\nexport default class LogIn extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { isLogIn: false, showAlert: false, showButton:false }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (new LogInHelper().isLogIn()) {\n            this.setState({ isLogIn: true });\n        }\n\n        let ut = new UsersTable();\n        ut.start(this.usersTableReady,true);\n    }\n\n    usersTableReady = () =>{\n        this.setState({showButton:true});\n    }\n\n    handleLogIn() {\n        AppLogger(this, \"handleLogIn\");\n        AppLogger(this, this.state.userName);\n        AppLogger(this, this.state.password);\n\n        let ut = new UsersTable();\n        let user = ut.getUser(this.state.userName);\n\n        let loginAlert = null;\n        if (user) {\n            if (user.passwd === this.state.password) {\n                let cookie = new Cookies();\n                cookie.set('user', this.state.userName);\n                this.setState({ isLogIn: true, logInAlert: null });\n                window.location.reload();\n                return;\n            }\n            else {\n                loginAlert = \"the password for \" + this.state.userName + \" is incorrect\";\n            }\n        }\n        else {\n            loginAlert = this.state.userName + \" not found\";\n        }\n        this.setState({ isLogIn: false, logInAlert: loginAlert });\n    }\n\n    handleChange(e) {\n        const target = e.target;\n\n        this.setState({\n            [target.name]: target.value,\n            logInAlert: null\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLogIn === false &&\n                    <Modal\n                        show={true}\n                        bsSize='lg'\n                        onHide={this.handleHide}\n                        container={this}\n                        aria-labelledby=\"contained-modal-title\"\n                    >\n                        <Modal.Header closeButton>\n                            <Modal.Title id=\"contained-modal-title\">\n                                LogIn\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            User Name:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"user name\"\n                                onChange={this.handleChange}\n                                name=\"userName\"\n                            />\n                            Password:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"password\"\n                                onChange={this.handleChange}\n                                name=\"password\"\n                            />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            {this.state.logInAlert &&\n                                <center>\n                                    Failed to Login: {this.state.logInAlert}\n                                </center>\n                            }\n                            {\n                                this.state.showButton && \n                                <Button onClick={() => this.handleLogIn()}>LogIn</Button>\n                            }\n                        </Modal.Footer>\n                    </Modal>\n                }\n            </div>\n        );\n    }\n\n}","import Dashboard from \"layouts/Dashboard/Dashboard.jsx\";\n\nvar indexRoutes = [{ path: \"/\", name: \"Home\", component: Dashboard }];\n\nexport default indexRoutes;\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Header from \"components/Header/Header\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport LogIn from \"../../views/App/login.jsx\"\nimport UsersTable from \"../../app/db/UsersTable\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport {appIsReady} from \"../../app/adminHelper\"\nimport {setGraphFilteredTank, setDataFilteredTank} from \"../../app/readingsHelper\"\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _notificationSystem: null,\n      appDbReady: 0\n    };\n  }\n\n  componentDidMount = () => {\n    // read mandatory tables \n    new UsersTable().start(this.userTableReady,false);\n  }\n\n  userTableReady = () => {\n    new TanksTable().start(this.tanksTableReady,false);\n  }\n\n  tanksTableReady = () => {\n    new CustomersTable().start(this.customersTableReady,false);\n  }\n\n  customersTableReady = () => {\n    new TanksReading().getLastReading(this.allIsReady);\n  }\n\n  allIsReady = () => {\n    let tanks = new TanksTable().getCustomerTanks(new LogInHelper().getLoggedInCustomerId());\n\n    if (tanks.length > 0){\n      setGraphFilteredTank(tanks[0]);\n      setDataFilteredTank(tanks[0]);\n    }\n\n    appIsReady(true);\n  }\n\n  dbReady = () => {\n    this.setState({appDbReady:this.state.appDbReady+1});\n  }\n\n  /*\nhandleNotificationClick(position) {\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  this.state._notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: position,\n    autoDismiss: 15\n  });\n}\n\ncomponentDidMount() {\n  this.setState({ _notificationSystem: this.refs.notificationSystem });\n  var _notificationSystem = this.refs.notificationSystem;\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  _notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: \"tr\",\n    autoDismiss: 15\n  });\n}\n*/\n  componentDidUpdate(e) {\n    if (\n      window.innerWidth < 993 &&\n      e.history.location.pathname !== e.location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    }\n    if (e.history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n  }\n  render() {\n    let logInHelper = new LogInHelper();\n    if (!logInHelper.isLogIn()) {\n      return (<LogIn />);\n    }\n    else {\n      return (\n        <div className=\"wrapper\">\n          {/*<NotificationSystem ref=\"notificationSystem\" style={style} />*/}\n          <Sidebar {...this.props} />\n          <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n            <Header {...this.props} />\n            <Switch>\n              {dashboardRoutes.map((prop, key) => {\n                if (prop.name === \"Notifications\")\n                  return (\n                    <Route\n                      path={prop.path}\n                      key={key}\n                      render={routeProps => (\n                        <prop.component\n                          {...routeProps}\n                          handleClick={this.handleNotificationClick}\n                        />\n                      )}\n                    />\n                  );\n                if (prop.redirect)\n                  return <Redirect from={prop.path} to={prop.to} key={key} />;\n                return (\n                  <Route path={prop.path} component={prop.component} key={key} />\n                );\n              })}\n            </Switch>\n            {/*<Footer />*/}\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport indexRoutes from \"routes/index.jsx\";\nimport \"./assets/css/animate.min.css\";\nimport \"./assets/sass/light-bootstrap-dashboard.css?v=1.2.0\"; \nimport \"./assets/css/demo.css\";\nimport \"./assets/css/pe-icon-7-stroke.css\";\nimport packageJson from '../package.json';\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n    {console.log(\"Version - \" + packageJson.version)}\n      {indexRoutes.map((prop, key) => {\n        return <Route to={prop.path} component={prop.component} key={key} />;\n      })}\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}