{"version":3,"sources":["assets/img/orbitBanner3000.png","variables/Variables.jsx","assets/sass/light-bootstrap-dashboard.css?v=1.2.0","app/restHelper.jsx","app/Logger.jsx","app/db/UsersTable.jsx","app/logInHelper.jsx","app/lang/dic.js","app/lang/lang.js","components/Header/HeaderLinks.jsx","app/adminHelper.jsx","components/Card/Card.jsx","app/db/TanksTable.jsx","components/StatsCard/StatsCard.jsx","app/notificationHelper.jsx","app/db/TankReadings.jsx","views/Notifications/TanksNotifications.jsx","app/db/CustomersTable.jsx","components/App/TankCard.jsx","views/Tanks/Tanks.jsx","views/Dashboard/RangeHelper.jsx","components/App/DateAndTime.jsx","views/Dashboard/DateAndTimeModal.jsx","views/Admin/TanksSelection.jsx","views/Dashboard/RangeView.jsx","components/App/VisGraph.jsx","app/readingsHelper.jsx","views/App/Spinner.jsx","views/Graph/Graph.jsx","views/TableList/TableList.jsx","views/TableList/PdfMaker.jsx","views/Data/Data.jsx","components/App/Map.jsx","views/Location/Locations.jsx","views/Dashboard/Dashboard.jsx","views/Admin/CustomerForm.jsx","views/Admin/UsersForm.jsx","views/Admin/TankForm.jsx","views/Admin/Customers.jsx","views/Admin/AlerstForm.jsx","views/Admin/Tanks.jsx","views/Admin/Users.jsx","views/Admin/Alerts.jsx","views/Admin/Logger.jsx","views/Icons/Icons.jsx","views/App/LogOut.jsx","routes/dashboard.jsx","components/Header/Header.jsx","components/Sidebar/Sidebar.jsx","views/App/login.jsx","routes/index.jsx","layouts/Dashboard/Dashboard.jsx","index.js","assets/sass/lbd/_variables.scss"],"names":["module","exports","__webpack_require__","p","defaultWidth","window","screen","width","style","Wrapper","Containers","DefaultStyle","position","padding","zIndex","WebkitBoxSizing","MozBoxSizing","boxSizing","height","display","border","fontSize","WebkitFontSmoothing","fontFamily","fontWeight","color","tl","top","bottom","left","right","tr","tc","margin","marginLeft","bl","br","bc","NotificationItem","cursor","borderRadius","opacity","transition","WebkitTransform","transform","willChange","isHidden","isVisible","success","borderTop","backgroundColor","WebkitBoxShadow","MozBoxShadow","boxShadow","error","warning","info","Title","marginTop","MessageWrapper","marginRight","maxWidthwidth","Dismiss","float","lineHeight","outline","textAlign","Action","background","ActionWrapper","thArray","tdArray","iconsArray","dataPie","labels","series","legendPie","names","types","dataSales","optionsSales","low","high","showArea","axisX","showGrid","lineSmooth","showLine","showPoint","fullWidth","chartPadding","responsiveSales","labelInterpolationFnc","value","legendSales","dataBar","optionsBar","seriesBarDistance","responsiveBar","legendBar","primaryColor","primaryTextColor","primarySideColor","secondaryColor","menuTextColor","customers","users","levelMonitoring","getTankReadingStartEndUri","tankId","from","to","getCustomersUri","getUsersUri","logList","AppLogger","msg","d","Date","log","getHours","slice","getMinutes","getSeconds","unshift","length","splice","usersList","UsersTable","pop","callBack","this","clearUsers","uri","axios","get","then","response","console","data","index","push","catch","userName","name","sort","a","b","customer","pass","role","callback","user","passwd","customer_id","post","_this","delete","readUsers","password","forceRead","LogInHelper","Object","classCallCheck","logOutStr","userKey","createClass","key","getUser","getLogedInUser","localStorage","setItem","getItem","e","Cookies","set","isLogIn","industries","liquids","sensors","dictionary","en","tankName","buildingName","volume","leftInTank","lastUpdate","capacity","liquid","sensorLength","sensor","tankLocation","tanksLocations","volumeHistory","Last 6H","Last 12H","Last 24H","Last 2 Days","Last Week","Select Range","Custom Range","latestData","selectEn","selectEs","logOut","customerName","mailAddress","addNewCustomer","add","cancel","update","addingNewUser","industry","Residential buildings","Commercial buildings","Hospitals","Hotels","Agriculture","Food and drinks","Oils and fuels","Emergency services","Utility service provider","water","diesel","fertilizer","levelAlert","heartbeat","Level OK","Level Below","Connected","Not Connected","es","getLang","lang","setLang","translate","text","translated","Component","appIsready","isAppReady","getPrimaryColor","variables","getPrimaryTextColor","getMenuTextColor","getBackgroundColor","getPrimarySideColor","getFormattedTime","time","moment","utc","format","Card","_Component","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","colorStyle","props","react_default","createElement","className","plain","hCenter","title","category","ctAllIcons","ctTableFullWidth","ctTableResponsive","ctTableUpgrade","content","legend","statsIcon","stats","tankList","TanksTable","getImeiFromUrl","str","search","imei","addTank","formState","customerId","postJson","iccid","liquid_type","sensor_type","heartbeat_timeout","sampling_interval","phone","building","level_alerts","getNewServer","updateTank","tank","put","getTankSettingsUri","deleteTank","url","customersId","tanks","getTank","split","readTanks","NotificationHelper","start","notifications","getLoggedInCustomerId","getCustomerTanks","tankIndex","getLevelNotificationsOnTank","map","notification","lowestAlert","alertIndex","status","at_level","alertObj","level","getHeartBeatNotificationForTank","heartbeat_ok","lastLevelMonitoring","numberOfTanks","lastReadingTime","TanksReading","getLastReadingTime","updateTankReadings","tt","getTankName","sample_level","actual_level","server_time","tank_time","range","request","responseURL","fromToLevelMonitoring","numberOfreadings","sorted","parseInt","tanksInfoReady","isLast","list","getCapacity","getLiquidType","toLowerCase","getSortReading","setClassParams","levelAlertView","alerts","alert","Alert","bsStyle","data-notify","heartBeatView","hearBeatAlerts","heartBeatAlert","customerList","CustomersTable","addCustomerToCustomers","id","getCustomer","mailingList","mailing_list","json","readCustomers","timeout","TankCard","call","state","asAlerts","startColor","endColor","textColor","tick","bind","assertThisInitialized","timer","setInterval","clearInterval","setState","substring","factor","parseFloat","innerHeight","radius","getRadiusFromHeight","fillColor","interpolateRgb","interpolate","gradientStops","stopColor","darker","toString","stopOpacity","offset","brighter","lib_default","percent","textSize","textOffsetX","textOffsetY","textRenderer","Math","round","min","textPixels","valueStyle","percentStyle","riseAnimation","waveAnimation","waveFrequency","waveAmplitude","gradient","circleStyle","fill","waveStyle","textStyle","waveTextStyle","onClick","renderTank","renderTanks","readings","reading","asAlert","titleColor","Col","xs","sm","Card_Card","renderTanksParams","App_TankCard","isTankFiltered","filterStr","getCustomerId","getCustomerName","isAdmin","renderTableRow","t1","t2","renderTableRowForAlert","nh","levelAlerts","Table","striped","bordered","condensed","hover","renderFilterTanksCard","caller","md","FormControl","type","placeholder","onChange","target","RangeHelper","getFirstRangeInHours","rangesValues","getRanges","ranges","getRangeInHour","getSelectedString","getRangeForHourse","timeInHours","forClass","getReadingFromTo","rangeReady","getRangeFromTo","defaultProps","onHide","autoFocus","autoFocusEndDate","initialStartDate","initialEndDate","startDateId","START_DATE","startDatePlaceholderText","endDateId","endDatePlaceholderText","disabled","required","screenReaderInputMessage","showClearDates","showDefaultInputIcon","customInputIcon","customArrowIcon","customCloseIcon","block","small","regular","renderMonthText","orientation","VERTIVAL_ORIENTATION","anchorDirection","ANCHOR_LEFT","horizontalMargin","withPortal","withFullScreenPortal","initialVisibleMonth","numberOfMonths","keepOpenOnDateSelect","reopenPickerOnClearDates","isRTL","navPrev","navNext","onPrevMonthClick","onNextMonthClick","onClose","renderCalendarDay","undefined","renderDayContents","minimumNights","enableOutsideDays","isDayBlocked","isOutsideRange","isDayHighlighted","displayFormat","localeData","longDateFormat","monthFormat","phrases","DateRangePickerPhrases","stateDateWrapper","date","DateRangePickerWrapper","getNumberOfMonth","innerWidth","handelClose","startDate","toDate","endDate","focusedInput","END_DATE","onDatesChange","onFocusChange","_ref","_this2","_this$state","omit","react_dates","assign","React","DateAndTimeModal","createTimeArray","timeArray","hour","hourStr","dateSelected","end","closeModal","startTime","endTime","quickSelection","Modal","bsSize","aria-labelledby","Header","closeButton","Body","DateAndTime","DropdownButton","onSelect","MenuItem","eventKey","Footer","Button","TanksSelection","tankSelected","selectedTankName","getSelectedTank","ButtonGroup","borderColor","RangeView","rangeSelected","rangeInHour","showDateAndTimeModal","hoursSelected","getDate","minutes","setHours","setMinutes","dateAndTimeModalClose","getTime","ButtonToolbar","TanksSelection_TanksSelection","Dashboard_DateAndTimeModal","show","VisGraph","getData","maxPoints","stayIndex","i","myFormatter","t","splitted","x","dy","yFormatter","getLegendItems","items","obj","colors","getxValues","tickTotal","dataLen","ret","firstX","hours","jumps","crosshairValues","legenItems","xValues","stroke","tickValues","tickFormat","line","ticks","size","v","strokeColor","xType","curve","graphFilteredTank","dataFilteredTank","setGraphFilteredTank","setDataFilteredTank","isFiltered","getTanks","getFilteredReadings","readingsData","toConsumableArray","Spinner","react_loader_spinner_default","Graph","componentWillUnmount","rh","graphReadings","rangeIndex","retArray","maxX","maxCapacity","current","tmpData","currentIndex","levels","times","y","fromDashboard","components_Card_Card","Spinner_Spinner","rangeReadingToGraphData","selectedRange","Dashboard_RangeView","VisGraph_VisGraph","TableList","componentDidMount","Promise","all","ExcelTable","excelTableReady","getHeader","createData","arrayForExcel","arrayForPdf","arrayForTable","tanksNames","count","rangeReadings","sample","samples","vol","row","rowForExcel","creatPdfDocDefinition","array","table","headerRows","widths","body","pageBreak","exportToPdf","exportOrPrint","pdfDocDefinition","pdfMake","docDefinition","compress","pdfFonts","vfs","tableLayouts","exampleLayout","hLineWidth","node","vLineWidth","hLineColor","paddingLeft","paddingRight","createPdf","download","print","err","makePdf","renderExport","rangeButtons","test","navigator","userAgent","default","button","header","overflowY","prop","overflow","Data","tableReadings","views_TableList_TableList","MapContainer","onMarkerClick","marker","selectedPlace","activeMarker","showingInfoWindow","onMouseOver","activeMarkerTitle","onMapClicked","renderMarkers","markers","dist","onMouseover","lat","lng","getCenter","ignore","div","convertGpsPosition","pos","latSign","lngSign","floor","style1","google","zoom","onReady","mapIsReady","initialCenter","visible","GoogleApiWrapper","apiKey","Locations","lastTanksReadings","getLevelMonitoring","renderInfo","getMarkers","gps","long","contentHeight","Map","Dashboard","fastTimer","tickToggle","getLastReading","tanksReadingReady","dataIsReady","fastTick","logInHelper","lm","renderAlerts","getRangeReadingOnce","Grid","fluid","Row","views_Graph_Graph","Location_Locations","views_Data_Data","CustomerForm","_React$Component","restCallBack","message","hideButtons","formMessage","deleteMail","tmpMailingList","addMail","validateMail","mailAddrees","createMailForm","mail","align","validatCustomer","updateCustomer","FormGroup","controlId","validationState","ControlLabel","componentClass","renderFormCustomerFiled","deleteCustomer","_this3","addnewCustomerText","createForm","renderButtons","UsersForm","settingMessage","validate","indexOf","validatPass","validatUser","renderFormUsersFiled","addNewUser","SettingsModal","TankForm","_React$Component2","updateSettingsTimeOut","showSettingsModal","settingsModalText","updateSettingsModal","textArray","addTankCallBack","succedded","simConfigurationIndex","configureThingDone","configureThing","setServerIp","updateTankCallBack","samplingIntervalChanged","liquidSelected","sensorSelected","renderIccdAndPhone","iccidPh","phoneNumberPh","switchSimConfig","getToken","UserName","Password","token","sendSemsToThing","config","headers","Authorization","Message","From","nextFunction","setServerIpDone","setProtocol","smsTimeOut","setProtocolDone","updateData","liquidTypeIndex","sensorTypeIndex","imeiPh","namePh","buildingPh","capacityPh","highPh","sampleIntervalPh","runTimer","simConfigurationTitle","validateString","validateForm","renderFormTitle","renderTankFileds","addNewTank","TankForm_SettingsModal","Customers","customerInfoReady","getCustomers","operationCallBack","editCustomer","showCustomersModal","selectedCustomer","getFilteredCustomers","showTankForm","showUsersModal","buttonStyle","whiteSpace","confirmText","confirm","concat","addUser","divider","_this4","item","renderManageCustomersButton","_this5","_this6","renderFilterCard","renderAddCustomrtButton","renderCustomers","CustomerForm_CustomerForm","closeCustomersModal","UsersForm_UsersForm","closeUsersModal","TankForm_TankForm","closeTankForm","AlertsForm","addAlert","statusMessage","alertId","subject","numberOfAlerts","updateAlerts","updateAlertsCallBack","getFormTitle","Tanks","tanksReady","editAlert","showAlerstForm","closeAlertsForm","renderManageTankButton","editTank","AlerstForm_AlertsForm","Users","usersReadyCallBack","usersTable","getUsers","renderActions","deleteUser","custeomrName","remove","renderUsers","Alerts","appIsredy","counter","renderAlertsTanks","showAlertsForm","renderAlertsAndEdit","levelNotification","hearBeatNotification","Logger","Icons","rel","href","lg","defaultValue","LogOut","location","reload","Redirect","dashboardRoutes","path","icon","component","Alerst","redirect","mobileSidebarToggle","sidebarExists","preventDefault","document","documentElement","classList","toggle","collapse","views","pathname","showLogo","Navbar","Toggle","src","logo","alt","getBrand","Sidebar","checkIfAppIsReady","appIsReady","routeName","updateDimensions","addEventListener","logInUser","data-color","upgrade","activeRoute","NavLink","activeClassName","LogIn","usersTableReady","showButton","showAlert","debugMessage","handleChange","loginAlert","logInAlert","_this$setState","defineProperty","handleHide","container","handleLogIn","indexRoutes","userTableReady","tanksTableReady","customersTableReady","allIsReady","dbReady","appDbReady","_notificationSystem","history","action","scrollTop","scrollingElement","refs","mainPanel","components_Sidebar_Sidebar","ref","components_Header_Header","Switch","Route","render","routeProps","handleClick","handleNotificationClick","login_LogIn","ReactDOM","HashRouter","packageJson","version","getElementById"],"mappings":"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BACA,eACA,YACA,eACA,mBACA,aACA,kBACA,aACA,mBACA,aACA,cACA,eACA,qBACA,iBACA,cACA,cACA,eACA,kBACA,eACA,iBACA,eACA,cACA,YACA,eACA,aACA,qBACA,aACA,cACA,kBACA,uBACA,YACA,qBACA,WACA,iBACA,mBACA,wBACA,cACA,oBACA,eACA,2BACA,cACA,mBACA,oBACA,0BACA,iBACA,mBACA,eACA,0BACA,iBACA,eACA,aACA,gBACA,gBACA,kBACA,cACA,aACA,eACA,eACA,iBACA,cACA,cACA,cACA,eACA,eACA,YACA,cACA,kBACA,aACA,gBACA,eACA,gBACA,gBACA,cACA,eACA,eACA,aACA,gBACA,aACA,eACA,eACA,gBACA,iBACA,sBACA,kBACA,cACA,cACA,cACA,gBACA,aACA,aACA,cACA,cACA,kBACA,cACA,aACA,mBACA,aACA,YACA,cACA,YACA,sBACA,YACA,cACA,aACA,YACA,oBACA,oBACA,oBACA,cACA,qBACA,iBACA,aACA,aACA,mBACA,kBACA,cACA,cACA,aACA,aACA,gBACA,cACA,aACA,YACA,mBACA,aACA,kBACA,uBACA,eACA,aACA,aACA,aACA,gBACA,aACA,aACA,cACA,aACA,eACA,aACA,aACA,aACA,cACA,cACA,eACA,eACA,eACA,cACA,eACA,cACA,gBACA,aACA,eACA,aACA,eACA,aACA,gBACA,gBACA,aACA,aACA,eACA,iBACA,iBACA,iBACA,iBACA,aACA,YACA,gBACA,aACA,eACA,kBACA,eACA,gBACA,gBACA,eACA,cACA,cACA,cACA,aACA,aACA,eACA,aACA,mBACA,gBACA,aACA,aACA,kBACA,gBACA,aACA,gBACA,aACA,aACA,kBACA,eACA,eACA,cACA,iBAwHAC,QA/GY,CACZC,OAAQ,CAAC,MAAO,MAAO,OACvBC,OAAQ,CAAC,GAAI,GAAI,KA8GjBC,UA5Gc,CACdC,MAAO,CAAC,OAAQ,SAAU,eAC1BC,MAAO,CAAC,OAAQ,SAAU,YA2G1BC,UAvGc,CACdL,OAAQ,CA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","file":"static/js/main.d728af6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/orbitBanner3000.3c0e7c7f.png\";","//\n// //\n// // // For notifications\n// //\n//\nvar defaultWidth =\n  window.screen.width > 768 ? window.screen.width * 1 / 3 : window.screen.width;\n\nvar style = {\n  Wrapper: {},\n  Containers: {\n    DefaultStyle: {\n      position: \"fixed\",\n      width: defaultWidth,\n      padding: \"10px 10px 10px 20px\",\n      zIndex: 9998,\n      WebkitBoxSizing: \"\",\n      MozBoxSizing: \"\",\n      boxSizing: \"\",\n      height: \"auto\",\n      display: \"inline-block\",\n      border: \"0\",\n      fontSize: \"14px\",\n      WebkitFontSmoothing: \"antialiased\",\n      fontFamily: '\"Roboto\",\"Helvetica Neue\",Arial,sans-serif',\n      fontWeight: \"400\",\n      color: \"#FFFFFF\"\n    },\n\n    tl: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    tr: {\n      top: \"0px\",\n      bottom: \"auto\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    tc: {\n      top: \"0px\",\n      bottom: \"auto\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    },\n\n    bl: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"0px\",\n      right: \"auto\"\n    },\n\n    br: {\n      top: \"auto\",\n      bottom: \"0px\",\n      left: \"auto\",\n      right: \"0px\"\n    },\n\n    bc: {\n      top: \"auto\",\n      bottom: \"0px\",\n      margin: \"0 auto\",\n      left: \"50%\",\n      marginLeft: -(defaultWidth / 2)\n    }\n  },\n\n  NotificationItem: {\n    DefaultStyle: {\n      position: \"relative\",\n      width: \"100%\",\n      cursor: \"pointer\",\n      borderRadius: \"4px\",\n      fontSize: \"14px\",\n      margin: \"10px 0 0\",\n      padding: \"10px\",\n      display: \"block\",\n      WebkitBoxSizing: \"border-box\",\n      MozBoxSizing: \"border-box\",\n      boxSizing: \"border-box\",\n      opacity: 0,\n      transition: \"all 0.5s ease-in-out\",\n      WebkitTransform: \"translate3d(0, 0, 0)\",\n      transform: \"translate3d(0, 0, 0)\",\n      willChange: \"transform, opacity\",\n\n      isHidden: {\n        opacity: 0\n      },\n\n      isVisible: {\n        opacity: 1\n      }\n    },\n\n    success: {\n      borderTop: 0,\n      backgroundColor: \"#a1e82c\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    error: {\n      borderTop: 0,\n      backgroundColor: \"#fc727a\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    warning: {\n      borderTop: 0,\n      backgroundColor: \"#ffbc67\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    },\n\n    info: {\n      borderTop: 0,\n      backgroundColor: \"#63d8f1\",\n      WebkitBoxShadow: 0,\n      MozBoxShadow: 0,\n      boxShadow: 0\n    }\n  },\n\n  Title: {\n    DefaultStyle: {\n      fontSize: \"30px\",\n      margin: \"0\",\n      padding: 0,\n      fontWeight: \"bold\",\n      color: \"#FFFFFF\",\n      display: \"block\",\n      left: \"15px\",\n      position: \"absolute\",\n      top: \"50%\",\n      marginTop: \"-15px\"\n    }\n  },\n\n  MessageWrapper: {\n    DefaultStyle: {\n      marginLeft: \"55px\",\n      marginRight: \"30px\",\n      padding: \"0 12px 0 0\",\n      color: \"#FFFFFF\",\n      maxWidthwidth: \"89%\"\n    }\n  },\n\n  Dismiss: {\n    DefaultStyle: {\n      fontFamily: \"inherit\",\n      fontSize: \"21px\",\n      color: \"#000\",\n      float: \"right\",\n      position: \"absolute\",\n      right: \"10px\",\n      top: \"50%\",\n      marginTop: \"-13px\",\n      backgroundColor: \"#FFFFFF\",\n      display: \"block\",\n      borderRadius: \"50%\",\n      opacity: \".4\",\n      lineHeight: \"11px\",\n      width: \"25px\",\n      height: \"25px\",\n      outline: \"0 !important\",\n      textAlign: \"center\",\n      padding: \"6px 3px 3px 3px\",\n      fontWeight: \"300\",\n      marginLeft: \"65px\"\n    },\n\n    success: {\n      // color: '#f0f5ea',\n      // backgroundColor: '#a1e82c'\n    },\n\n    error: {\n      // color: '#f4e9e9',\n      // backgroundColor: '#fc727a'\n    },\n\n    warning: {\n      // color: '#f9f6f0',\n      // backgroundColor: '#ffbc67'\n    },\n\n    info: {\n      // color: '#e8f0f4',\n      // backgroundColor: '#63d8f1'\n    }\n  },\n\n  Action: {\n    DefaultStyle: {\n      background: \"#ffffff\",\n      borderRadius: \"2px\",\n      padding: \"6px 20px\",\n      fontWeight: \"bold\",\n      margin: \"10px 0 0 0\",\n      border: 0\n    },\n\n    success: {\n      backgroundColor: \"#a1e82c\",\n      color: \"#ffffff\"\n    },\n\n    error: {\n      backgroundColor: \"#fc727a\",\n      color: \"#ffffff\"\n    },\n\n    warning: {\n      backgroundColor: \"#ffbc67\",\n      color: \"#ffffff\"\n    },\n\n    info: {\n      backgroundColor: \"#63d8f1\",\n      color: \"#ffffff\"\n    }\n  },\n\n  ActionWrapper: {\n    DefaultStyle: {\n      margin: 0,\n      padding: 0\n    }\n  }\n};\n\n//\n// //\n// // // For tables\n// //\n//\nconst thArray = [\"ID\", \"Name\", \"Salary\", \"Country\", \"City\"];\nconst tdArray = [\n  [\"1\", \"Dakota Rice\", \"$36,738\", \"Niger\", \"Oud-Turnhout\"],\n  [\"2\", \"Minerva Hooper\", \"$23,789\", \"Curaçao\", \"Sinaai-Waas\"],\n  [\"3\", \"Sage Rodriguez\", \"$56,142\", \"Netherlands\", \"Baileux\"],\n  [\"4\", \"Philip Chaney\", \"$38,735\", \"Korea, South\", \"Overland Park\"],\n  [\"5\", \"Doris Greene\", \"$63,542\", \"Malawi\", \"Feldkirchen in Kärnten\"],\n  [\"6\", \"Mason Porter\", \"$78,615\", \"Chile\", \"Gloucester\"]\n];\n\n//\n// //\n// // // For icons\n// //\n//\nconst iconsArray = [\n  \"pe-7s-album\",\n  \"pe-7s-arc\",\n  \"pe-7s-back-2\",\n  \"pe-7s-bandaid\",\n  \"pe-7s-car\",\n  \"pe-7s-diamond\",\n  \"pe-7s-door-lock\",\n  \"pe-7s-eyedropper\",\n  \"pe-7s-female\",\n  \"pe-7s-gym\",\n  \"pe-7s-hammer\",\n  \"pe-7s-headphones\",\n  \"pe-7s-helm\",\n  \"pe-7s-hourglass\",\n  \"pe-7s-leaf\",\n  \"pe-7s-magic-wand\",\n  \"pe-7s-male\",\n  \"pe-7s-map-2\",\n  \"pe-7s-next-2\",\n  \"pe-7s-paint-bucket\",\n  \"pe-7s-pendrive\",\n  \"pe-7s-photo\",\n  \"pe-7s-piggy\",\n  \"pe-7s-plugin\",\n  \"pe-7s-refresh-2\",\n  \"pe-7s-rocket\",\n  \"pe-7s-settings\",\n  \"pe-7s-shield\",\n  \"pe-7s-smile\",\n  \"pe-7s-usb\",\n  \"pe-7s-vector\",\n  \"pe-7s-wine\",\n  \"pe-7s-cloud-upload\",\n  \"pe-7s-cash\",\n  \"pe-7s-close\",\n  \"pe-7s-bluetooth\",\n  \"pe-7s-cloud-download\",\n  \"pe-7s-way\",\n  \"pe-7s-close-circle\",\n  \"pe-7s-id\",\n  \"pe-7s-angle-up\",\n  \"pe-7s-wristwatch\",\n  \"pe-7s-angle-up-circle\",\n  \"pe-7s-world\",\n  \"pe-7s-angle-right\",\n  \"pe-7s-volume\",\n  \"pe-7s-angle-right-circle\",\n  \"pe-7s-users\",\n  \"pe-7s-angle-left\",\n  \"pe-7s-user-female\",\n  \"pe-7s-angle-left-circle\",\n  \"pe-7s-up-arrow\",\n  \"pe-7s-angle-down\",\n  \"pe-7s-switch\",\n  \"pe-7s-angle-down-circle\",\n  \"pe-7s-scissors\",\n  \"pe-7s-wallet\",\n  \"pe-7s-safe\",\n  \"pe-7s-volume2\",\n  \"pe-7s-volume1\",\n  \"pe-7s-voicemail\",\n  \"pe-7s-video\",\n  \"pe-7s-user\",\n  \"pe-7s-upload\",\n  \"pe-7s-unlock\",\n  \"pe-7s-umbrella\",\n  \"pe-7s-trash\",\n  \"pe-7s-tools\",\n  \"pe-7s-timer\",\n  \"pe-7s-ticket\",\n  \"pe-7s-target\",\n  \"pe-7s-sun\",\n  \"pe-7s-study\",\n  \"pe-7s-stopwatch\",\n  \"pe-7s-star\",\n  \"pe-7s-speaker\",\n  \"pe-7s-signal\",\n  \"pe-7s-shuffle\",\n  \"pe-7s-shopbag\",\n  \"pe-7s-share\",\n  \"pe-7s-server\",\n  \"pe-7s-search\",\n  \"pe-7s-film\",\n  \"pe-7s-science\",\n  \"pe-7s-disk\",\n  \"pe-7s-ribbon\",\n  \"pe-7s-repeat\",\n  \"pe-7s-refresh\",\n  \"pe-7s-add-user\",\n  \"pe-7s-refresh-cloud\",\n  \"pe-7s-paperclip\",\n  \"pe-7s-radio\",\n  \"pe-7s-note2\",\n  \"pe-7s-print\",\n  \"pe-7s-network\",\n  \"pe-7s-prev\",\n  \"pe-7s-mute\",\n  \"pe-7s-power\",\n  \"pe-7s-medal\",\n  \"pe-7s-portfolio\",\n  \"pe-7s-like2\",\n  \"pe-7s-plus\",\n  \"pe-7s-left-arrow\",\n  \"pe-7s-play\",\n  \"pe-7s-key\",\n  \"pe-7s-plane\",\n  \"pe-7s-joy\",\n  \"pe-7s-photo-gallery\",\n  \"pe-7s-pin\",\n  \"pe-7s-phone\",\n  \"pe-7s-plug\",\n  \"pe-7s-pen\",\n  \"pe-7s-right-arrow\",\n  \"pe-7s-paper-plane\",\n  \"pe-7s-delete-user\",\n  \"pe-7s-paint\",\n  \"pe-7s-bottom-arrow\",\n  \"pe-7s-notebook\",\n  \"pe-7s-note\",\n  \"pe-7s-next\",\n  \"pe-7s-news-paper\",\n  \"pe-7s-musiclist\",\n  \"pe-7s-music\",\n  \"pe-7s-mouse\",\n  \"pe-7s-more\",\n  \"pe-7s-moon\",\n  \"pe-7s-monitor\",\n  \"pe-7s-micro\",\n  \"pe-7s-menu\",\n  \"pe-7s-map\",\n  \"pe-7s-map-marker\",\n  \"pe-7s-mail\",\n  \"pe-7s-mail-open\",\n  \"pe-7s-mail-open-file\",\n  \"pe-7s-magnet\",\n  \"pe-7s-loop\",\n  \"pe-7s-look\",\n  \"pe-7s-lock\",\n  \"pe-7s-lintern\",\n  \"pe-7s-link\",\n  \"pe-7s-like\",\n  \"pe-7s-light\",\n  \"pe-7s-less\",\n  \"pe-7s-keypad\",\n  \"pe-7s-junk\",\n  \"pe-7s-info\",\n  \"pe-7s-home\",\n  \"pe-7s-help2\",\n  \"pe-7s-help1\",\n  \"pe-7s-graph3\",\n  \"pe-7s-graph2\",\n  \"pe-7s-graph1\",\n  \"pe-7s-graph\",\n  \"pe-7s-global\",\n  \"pe-7s-gleam\",\n  \"pe-7s-glasses\",\n  \"pe-7s-gift\",\n  \"pe-7s-folder\",\n  \"pe-7s-flag\",\n  \"pe-7s-filter\",\n  \"pe-7s-file\",\n  \"pe-7s-expand1\",\n  \"pe-7s-exapnd2\",\n  \"pe-7s-edit\",\n  \"pe-7s-drop\",\n  \"pe-7s-drawer\",\n  \"pe-7s-download\",\n  \"pe-7s-display2\",\n  \"pe-7s-display1\",\n  \"pe-7s-diskette\",\n  \"pe-7s-date\",\n  \"pe-7s-cup\",\n  \"pe-7s-culture\",\n  \"pe-7s-crop\",\n  \"pe-7s-credit\",\n  \"pe-7s-copy-file\",\n  \"pe-7s-config\",\n  \"pe-7s-compass\",\n  \"pe-7s-comment\",\n  \"pe-7s-coffee\",\n  \"pe-7s-cloud\",\n  \"pe-7s-clock\",\n  \"pe-7s-check\",\n  \"pe-7s-chat\",\n  \"pe-7s-cart\",\n  \"pe-7s-camera\",\n  \"pe-7s-call\",\n  \"pe-7s-calculator\",\n  \"pe-7s-browser\",\n  \"pe-7s-box2\",\n  \"pe-7s-box1\",\n  \"pe-7s-bookmarks\",\n  \"pe-7s-bicycle\",\n  \"pe-7s-bell\",\n  \"pe-7s-battery\",\n  \"pe-7s-ball\",\n  \"pe-7s-back\",\n  \"pe-7s-attention\",\n  \"pe-7s-anchor\",\n  \"pe-7s-albums\",\n  \"pe-7s-alarm\",\n  \"pe-7s-airplay\"\n];\n\n//\n// //\n// // // // For dashboard's charts\n// //\n//\n// Data for Pie Chart\nvar dataPie = {\n  labels: [\"40%\", \"20%\", \"40%\"],\n  series: [40, 20, 40]\n};\nvar legendPie = {\n  names: [\"Open\", \"Bounce\", \"Unsubscribe\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Line Chart\nvar dataSales = {\n  labels: [\n    \"9:00AM\",\n    \"12:00AM\",\n    \"3:00PM\",\n    \"6:00PM\",\n    \"9:00PM\",\n    \"12:00PM\",\n    \"3:00AM\",\n    \"6:00AM\"\n  ],\n  series: [\n    [80, 90, 100, 22, 33, 44, 88, 80],\n    [80, 88, 44, 33, 0, 99, 90, 80],\n    [22, 100, 80, 90, 44, 88, 80, 90]\n  ]\n};\nvar optionsSales = {\n  low: 0,\n  high: 100,\n  showArea: false,\n  height: \"245px\",\n  axisX: {\n    showGrid: false\n  },\n  lineSmooth: true,\n  showLine: true,\n  showPoint: true,\n  fullWidth: true,\n  chartPadding: {\n    right: 50\n  }\n};\nvar responsiveSales = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendSales = {\n  names: [\"Tank1\", \"Tank2\", \"Tank3\"],\n  types: [\"info\", \"danger\", \"warning\"]\n};\n\n// Data for Bar Chart\nvar dataBar = {\n  labels: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"Mai\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\"\n  ],\n  series: [\n    [542, 443, 320, 780, 553, 453, 326, 434, 568, 610, 756, 895],\n    [412, 243, 280, 580, 453, 353, 300, 364, 368, 410, 636, 695]\n  ]\n};\nvar optionsBar = {\n  seriesBarDistance: 10,\n  axisX: {\n    showGrid: false\n  },\n  height: \"245px\"\n};\nvar responsiveBar = [\n  [\n    \"screen and (max-width: 640px)\",\n    {\n      seriesBarDistance: 5,\n      axisX: {\n        labelInterpolationFnc: function(value) {\n          return value[0];\n        }\n      }\n    }\n  ]\n];\nvar legendBar = {\n  names: [\"Tesla Model S\", \"BMW 5 Series\"],\n  types: [\"info\", \"danger\"]\n};\n\nmodule.exports = {\n  style, // For notifications (App container and Notifications view)\n  thArray,\n  tdArray, // For tables (TableList view)\n  iconsArray, // For icons (Icons view)\n  dataPie,\n  legendPie,\n  dataSales,\n  optionsSales,\n  responsiveSales,\n  legendSales,\n  dataBar,\n  optionsBar,\n  responsiveBar,\n  legendBar // For charts (Dashboard view)\n};\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor\":\"white\",\"primaryTextColor\":\"#165B7D\",\"primarySideColor\":\"#165B7D\",\"secondaryColor\":\"#e9f5ff\",\"menuTextColor\":\"#e3e2e2\",\"backgroundColor\":\"#e2e3e4\"};","const positionMonitoring = \"/positionMonitoring\";\n//const tanksSettings = \"/tanksSettings\";\nconst customers = \"/customers\";\nconst users = \"/users\";\nconst levelMonitoring = \"/tanklevels\";\n\nfunction getServer(){\n    let debug = false;\n\n    return debug === false ? \n        'https://euhpo9j3yi.execute-api.us-west-2.amazonaws.com/api/tanks' : \n        'http://localhost:3000';\n}\n\nfunction getNewServer(){\n    return 'https://jx7ltqwdt6.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://wv6wvd40zb.execute-api.us-east-1.amazonaws.com/prod';\n    //return 'https://x98na0g8vl.execute-api.us-east-1.amazonaws.com/dev'\n}\n\nexport function getTankReadingUri(tankId,isLast){\n    if (tankId){\n        if (isLast){\n            return getNewServer() + levelMonitoring + \"/\" + tankId + \"?last=true\";\n        }\n        else{\n            return getNewServer() + levelMonitoring + \"/\" + tankId;\n        }\n    }\n    else\n        return getNewServer() + levelMonitoring;\n}\n\nexport function getTankReadingStartEndUri(tankId,from,to){\n    return getNewServer() + levelMonitoring + \"/\" + tankId + \"?from=\"+from + \"&to=\"+to;\n}\n\nexport function getCustomersUri(){\n    return getNewServer() + customers;\n}\n\nexport function getUsersUri(){\n    return getNewServer() + users;\n}\n\nexport function getCustomerUri(customer){\n    return getNewServer() + \"/customers/\" + customer;\n}\n\nexport function getPositionMonitoringUri(tankId){\n    return getServer() + positionMonitoring + \"/\" + tankId;\n}\n\nexport function getTankSettingsUri(){\n    return getNewServer() + \"/tanks\";\n}","let logList=[];\n\nexport const AppLogger = (msg) => {\n    var d = new Date();\n    d = ('0' + d.getHours()).slice(-2) + \":\" + ('0' + d.getMinutes()).slice(-2) + \":\" + ('0' + d.getSeconds()).slice(-2);\n    var log = d + \": \" + msg;\n    logList.unshift(log);\n    if (logList.length>500){\n        logList.splice(logList.length-1-20,20);\n    }\n    return (log);\n }\n\n export const AppLogerMessages = () => {\n    return logList;\n }\n","import axios from \"axios\";\nimport { getUsersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"../Logger\";\n\nlet usersList = [];\n\nexport default class UsersTable {\n    //static myInstance = null;\n\n    //static getInstance() {\n    //    if (UsersTable.myInstance == null) {\n    //        UsersTable.myInstance = new UsersTable();\n    //    }\n\n    //    return UsersTable.myInstance;\n    //}\n\n    //constructor() {\n    //    this.users = [];\n    //}\n\n    clearUsers() {\n        while (usersList.length > 0) {\n            usersList.pop();\n        }\n    }\n\n    readUsers(callBack) {\n        this.clearUsers();\n        let uri = getUsersUri();\n        axios\n            .get(uri)\n            .then(response => {\n                console.log(AppLogger( \"Got users list - \" + response.data.length + \" \" + usersList.length));\n                for (let index = 0; index < response.data.length; index++) {\n                    usersList.push(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    getUser(userName) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                return usersList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getUsers() {\n        return usersList.sort((a,b)=>a.customer>b.customer?1:0);\n    }\n\n    add(userName, pass, customer, role, callback) {\n        //check if the user already exist\n        for (let index in usersList) {\n            if (usersList[index].name === userName) {\n                callback && callback(\"user name already exist in the system\");\n                return;\n            }\n        }\n\n        let user = { \"name\": userName, \"passwd\": pass, \"customer_id\": customer, \"role\": role };\n        let uri = getUsersUri();\n        axios\n            .post(uri, user)\n            .then(response => {\n                console.log(AppLogger( \"User added successfully\"));\n                //                this.readUsers(null);\n                callback && callback(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callback && callback(\"Failed to add user\");\n            }\n            );\n    }\n\n    remove(userName, callback) {\n        let uri = getUsersUri() + '/' + userName;\n        axios\n            .delete(uri)\n            .then(response => {\n                console.log(AppLogger( \"deleting user successfully\"));\n                this.readUsers(callback);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callback && callback();\n            }\n            );\n    }\n\n    update(userName, pass) {\n        for (let index in usersList) {\n            if (usersList[index].name === userName.name) {\n                usersList[index].password = pass;\n                return;\n            }\n        }\n    }\n\n    start(callBack, forceRead) {\n        console.log(AppLogger( \"start\"));\n\n        if (forceRead || usersList.length === 0) {\n            this.readUsers(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import { Cookies } from 'react-cookie';\nimport UsersTable from './db/UsersTable';\n\nexport class LogInHelper {\n\n    constructor() {\n        this.logOutStr = 'logedOut';\n        this.userKey = 'user';\n    }\n\n    isAdmin() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user && user.role === 'admin') {\n            return true;\n        }\n\n        return false;\n    }\n\n    getLogedInUser() {\n        let user = \"\";\n        try{\n            // test local storage\n            window.localStorage.setItem(\"just\",\"just\");\n            user = window.localStorage.getItem(this.userKey);\n        }\n        catch(e){\n            let cookie = new Cookies();\n            user = cookie.get(this.userKey);\n        }\n\n\n        if (user && user !== this.logOutStr) {\n            return user;\n        }\n        return \"\";\n    }\n\n    isLogIn() {\n        let user = \"\";\n        try {\n            // test local storage\n            window.localStorage.setItem(\"just\",\"just\");\n            console.log(\"isLogIn getting user from local storage\");\n            user = window.localStorage.getItem(this.userKey);\n        }\n        catch (e){\n            console.log(\"isLogIn getting user from cookies\");\n            let cookie = new Cookies();\n            user = cookie.get(this.userKey);\n        }\n        console.log(\"isLogIn user is \" + user);\n\n        if (user && user !== this.logOutStr) {\n            return true;\n        }\n        return false;\n    }\n\n    logOut() {\n        try {\n            window.localStorage.setItem(this.userKey, this.logOutStr);\n        }\n        catch (e){\n            let cookie = new Cookies();\n            cookie.set(this.userKey, this.logOutStr);\n        }\n    }\n\n    getLoggedInCustomerId() {\n        let usersTable = new UsersTable();\n\n        let user = usersTable.getUser(this.getLogedInUser());\n\n        if (user) {\n            return user.customer_id;\n        }\n        else if (this.isLogIn()) {\n            return \"admin\";\n        }\n        else {\n            return \"\";\n        }\n    }\n}\n\nexport default LogInHelper;","export const industries = ['Residential buildings', 'Commercial buildings', 'Hospitals', 'Hotels', 'Agriculture', 'Food and drinks', 'Oils and fuels', 'Emergency services', 'Utility service provider'];\nexport const liquids = ['water', 'diesel', 'fertilizer'];\nexport const sensors = [3, 4, 5, 6, 7, 8, 9, 10];\n\nexport const dictionary = {\n    'en': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last Update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'Sensor',\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n        // Tank properties\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n\n        'selectEn': 'en - English',\n        'selectEs': 'es - Spanish',\n        'logOut': 'Log Out',\n        'customerName': 'Customer Name',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Add New Customer',\n        'add': 'Add',\n        'cancel': 'Cancel',\n        'update': 'Update',\n        'delete': 'Delete',\n        'addingNewUser': 'Adding New User',\n        // industries\n        'industry': 'Industry',\n        'Residential buildings': 'Residential buildings',\n        'Commercial buildings': 'Commercial buildings',\n        'Hospitals': 'Hospitals',\n        'Hotels': 'Hotels',\n        'Agriculture': 'Agriculture',\n        'Food and drinks': 'Food and drinks',\n        'Oils and fuels': 'Oils and fuels',\n        'Emergency services': 'Emergency services',\n        'Utility service provider': 'Utility service provider',\n        // liquid types\n        'water': 'Water',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizer',\n\n        // alerts and heartbeat\n        \"levelAlert\" : \"Level Alert\",\n        \"heartbeat\" : \"Device Health\",\n        \"Level OK\" : \"Level OK\",\n        \"Level Below\" : \"Level Below\",\n        \"Connected\" : \"Connected\",\n        \"Not Connected\" : \"Not Connected\",\n    },\n    'es': {\n        // Tank properties\n        'tankName': 'Tank Name',\n        'buildingName': 'Building Name',\n        'customer': 'Customer',\n        'volume': 'Volume',\n        'leftInTank': 'Left In Tank',\n        'lastUpdate': 'Last update',\n        'capacity': 'Capacity',\n        'liquid': 'Liquid',\n        'sensorLength': 'Sensor Length',\n        'sensor': 'La Sensora',\n        // Tank properties\n\n        'tankLocation': 'Tank Location',\n        'tanksLocations': 'Tanks Locations',\n        'volumeHistory': 'Volume History',\n\n        // ranges\n        'Last 6H': 'Last 6H',\n        'Last 12H': 'Last 12H',\n        'Last 24H': 'Last 24H',\n        'Last 2 Days': 'Last 2 Days',\n        'Last Week': 'Last Week',\n        'Select Range': 'Select Range',\n        'Custom Range': 'Custom Range',\n        'latestData': 'Latest Data',\n        // ranges\n\n        'selectEn': 'en - Inglés',\n        'selectEs': 'es - Español',\n        'logOut': 'Cerrar sesión',\n        'customerName': 'Nombre del cliente',\n        'mailAddress': 'Mail Address',\n        'addNewCustomer': 'Agregar nuevo cliente',\n        'add': 'Añadir',\n        'cancel': 'Cancelar',\n        'update': 'Actualización',\n        'delete': 'Borrar',\n        'addingNewUser': 'Agregando nuevo usuario',\n        // industries\n        'industry': 'Industria',\n        'Residential buildings': 'Edificios residenciales',\n        'Commercial buildings': 'Edificios comerciales',\n        'Hospitals': 'Hospitales',\n        'Hotels': 'Hoteles',\n        'Agriculture': 'Agricultura',\n        'Food and drinks': 'Alimentos y bebidas',\n        'Oils and fuels': 'Aceites y combustibles',\n        'Emergency services': 'Servicios de emergencia',\n        'Utility service provider': 'Proveedor de servicios públicos',\n        // liquid\n        'water': 'Agua',\n        'diesel': 'Diesel',\n        'fertilizer': 'Fertilizante',\n\n    }\n}\n\n","import { Cookies } from 'react-cookie';\nimport { dictionary } from 'app/lang/dic.js';\n\nconst langKey = 'lang';\n\nexport const getLang = () => {\n    let lang = null;\n    try {\n        // test local storage\n        window.localStorage.setItem(\"just\", \"just\");\n        window.localStorage.getItem(langKey);\n    }\n    catch (e) {\n        let cookie = new Cookies();\n        lang = cookie.get(langKey);\n    }\n\n    if (lang && (lang !== 'en' || lang !== 'es')) {\n        return lang;\n    }\n    return 'en';\n}\n\nexport const setLang = (lang) => {\n    try {\n        window.localStorage.setItem(langKey, lang);\n    }\n    catch (e) {\n        let cookie = new Cookies();\n        cookie.set(langKey, lang);\n    }\n}\n\nexport const translate = (text) => {\n    let translated = dictionary[getLang()][text];\n    if (translated) {\n        return translated\n    }\n    else {\n        return text + ' not fond in dic';\n    }\n}\n","import React, { Component } from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { getLang, setLang } from '../../app/lang/lang.js'\nclass HeaderLinks extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lang: getLang() };\n  }\n\n  handleLogOut = () => {\n    let logIn = new LogInHelper();\n    logIn.logOut();\n    window.location.reload();\n  }\n\n  selectLang = (lang) => {\n    setLang(lang);\n    this.setState({ lang: lang });\n  }\n\n  render() {\n/*\n    let notificationList = new NotificationHelper().get();\n    const notification = (\n      <div style={{color:'with'}}>\n        <i className=\"fa fa-globe\" />\n        <b className=\"caret\" />\n        <span className=\"notification\">{notificationList.length !== 0 ? notificationList.length:\"\"}</span>\n        <p>Notification</p>\n      </div>\n    );\n*/\n    return (\n      <div>\n        <Nav>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            <i className=\"fa fa-dashboard\" />\n            <p className=\"hidden-lg hidden-md\">Dashboard</p>\n          </NavItem>\n          \n          \n          <NavDropdown\n            eventKey={2}\n            title={notification}\n            noCaret\n            id=\"basic-nav-dropdown\"\n          >\n            <MenuItem eventKey={2.1}>Notification 1</MenuItem>\n            <MenuItem eventKey={2.2}>Notification 2</MenuItem>\n            <MenuItem eventKey={2.3}>Notification 3</MenuItem>\n            <MenuItem eventKey={2.4}>Notification 4</MenuItem>\n            <MenuItem eventKey={2.5}>Another notifications</MenuItem>\n          </NavDropdown>\n          */\n          /*\n          <NavItem eventKey={3} href=\"#\">\n            <i className=\"fa fa-search\" />\n            <p className=\"hidden-lg hidden-md\">Search</p>\n          </NavItem>\n          */}\n        </Nav>\n        <Nav pullRight>\n          {/*\n          <NavItem eventKey={1} href=\"#\">\n            Account\n          </NavItem>\n          \n            <NavDropdown\n              eventKey={2}\n              title={<div style={{color:'white'}}>{this.state.lang}</div>}\n              id=\"basic-nav-dropdown-right\"\n            >\n              <MenuItem eventKey={2.1} onClick={() => this.selectLang('en')}>{translate('selectEn')}</MenuItem>\n              <MenuItem eventKey={2.2} onClick={() => this.selectLang('es')}>{translate('selectEs')}</MenuItem>\n            </NavDropdown>*/\n          }\n          {/* \n          <NavItem eventKey={2} href=\"#\">\n            <div style={{color:'white'}}>{getVersion()}</div>\n          </NavItem>          \n          <NavItem eventKey={3} href=\"#\" onClick={() => this.handleLogOut()}>\n            <div style={{color:'white'}}>{translate('logOut')}</div>\n          </NavItem>\n          */}\n        </Nav>\n      </div>\n    );\n  }\n}\n\nexport default HeaderLinks;\n","import moment from 'moment'\nimport variables from '../assets/sass/lbd/_variables.scss'\nlet appIsready = false;\n\nexport function getVersion(){\n    return 'SW Version 2.567';\n}\n\nexport function appIsReady(ready){\n    appIsready = ready;\n}\n\nexport function isAppReady(){\n    return appIsready;\n}\n\nexport function getPrimaryColor() {\n    return variables.primaryColor;\n}\n\nexport function getPrimaryTextColor(){\n    return variables.primaryTextColor;\n}\n\nexport function getMenuTextColor(){\n    return variables.menuTextColor;\n}\n\nexport function getBackgroundColor(){\n    return variables.backgroundColor;\n}\n\nexport function getPrimarySideColor(){\n    return variables.primarySideColor;\n}\n\nexport function getPrimaryColorStyle() {\n    return { color: getPrimaryColor() };\n}\n\nexport function getFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('MM/DD-HH:mm');\n}\nexport function getDetailedFormattedTime(time) {\n    return moment.utc(time - 5 * 60 * 60 * 1000).format('hh:mm a Do of MMMM YYYY');\n}\n\nexport function isMobile() { \n    if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {\n        return true;\n    }\n    else{\n        return false;\n    }\n}\n\nexport function isIos(){\n    if( /iPhone|iPad|iPod/i.test(navigator.userAgent) ) {\n        return true;\n    }\n    else{\n        return false;\n    }}","import React, { Component } from \"react\";\n\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nexport class Card extends Component {\n  render() {\n    let colorStyle = {color:getPrimaryTextColor()};\n    if (this.props.color){\n      colorStyle = {color:this.props.color};\n    }\n    return (\n      <div className={\"card\" + (this.props.plain ? \" card-plain\" : \"\")}>\n        <div className={\"header\" + (this.props.hCenter ? \" text-center\" : \"\")} >\n          <h4 className=\"title\" style={colorStyle}><u><b>{this.props.title}</b></u></h4>\n          <p className=\"category\" style={colorStyle}>{this.props.category}</p>\n        </div>\n        <div\n          className={\n            \"content\" +\n            (this.props.ctAllIcons ? \" all-icons\" : \"\") +\n            (this.props.ctTableFullWidth ? \" table-full-width\" : \"\") +\n            (this.props.ctTableResponsive ? \" table-responsive\" : \"\") +\n            (this.props.ctTableUpgrade ? \" table-upgrade\" : \"\")\n          }\n        >\n          {this.props.content}\n\n          {/*<div className=\"footer\">*/}\n          <div>\n            {this.props.legend}\n            {/*this.props.stats != null ? <hr /> : \"\"*/}\n            <div className=\"stats\">\n              <i className={this.props.statsIcon} style={colorStyle}/> \n                <div style={colorStyle}>&nbsp;{this.props.stats}</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Card;\n","import axios from \"axios\";\nimport { getTankSettingsUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n\nlet tankList = [];\n\nexport default class TanksTable {\n\n    getTanks() {\n        return tankList;\n    }\n\n    getCustomerTanks(customersId) {\n        let debug = false;\n        let tanks = [];\n        for (let index in tankList) {\n            if (tankList[index].customer === customersId ||\n                customersId === \"admin\") {\n                tanks.push(tankList[index]);\n                if (debug === true) {\n                    break;\n                }\n            }\n        }\n\n        return tanks;\n    }\n\n    getTank(imei) {\n        for (let index in tankList) {\n            if (tankList[index].imei === imei) {\n                return tankList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getImeiFromUrl = (str) => {\n        for (let index in tankList) {\n            if (str.search(tankList[index].imei) !== -1) {\n                return tankList[index].imei;\n            }\n        }\n\n        return null;\n    }\n\n    getTankName(imei) {\n        return this.getTank(imei).name;\n    }\n\n    getCustomerId(imei) {\n        return this.getTank(imei).customer;\n    }\n\n    getCapacity(imei) {\n        return this.getTank(imei).capacity;\n    }\n\n    getLiquidType(imei){\n        return this.getTank(imei).liquid_type;\n    }\n\n\n    hasTanks(customerId) {\n        for (let index in tankList) {\n            if (tankList[index].customer === customerId) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    addTank = (callBack, formState, customerId) => {\n        let postJson = {\n            'imei': formState.imei,\n            'customer': customerId,\n            'iccid': formState.iccid,\n            'liquid_type': formState.liquid_type,\n            'capacity': formState.capacity,\n            'high': formState.high,\n            'sensor_type':formState.sensor_type,\n            'heartbeat_timeout': formState.heartbeat_timeout,\n            'sampling_interval': formState.sampling_interval,\n            'phone': formState.phone,\n            'name': formState.name + '--building--' + formState.building,\n            'level_alerts': formState.level_alerts\n        };\n\n        axios.post(getTankSettingsUri(), postJson).then(response => {\n            console.log(AppLogger( \"adding new tank succedded\"));\n            callBack && callBack(true);\n        }).catch(error => {\n            console.log(AppLogger( error));\n            callBack && callBack(false);\n        });\n    }\n\n    updateTank = (callBack, tank, customerId) => {\n        let postJson = {\n            'imei': tank.imei,\n            'customer': customerId,\n            'iccid': tank.iccid,\n            'liquid_type': tank.liquid_type,\n            'capacity': tank.capacity,\n            'high': tank.high,\n            'sensor_type':tank.sensor_type,\n            'heartbeat_timeout': tank.heartbeat_timeout,\n            'sampling_interval': tank.sampling_interval,\n            'phone': tank.phone,\n            'name': tank.name + '--building--' + tank.building,\n            'level_alerts': tank.level_alerts\n        };\n\n        axios.put(getTankSettingsUri() + \"/\" + tank.imei, postJson).then(response => {\n            console.log(AppLogger(\"updating tank succedded\"));\n            callBack && callBack(true);\n        }).catch(error => {\n            console.log(AppLogger( error));\n            callBack && callBack(false);\n        }\n        );\n    }\n\n    deleteTank = (imei, callBack) => {\n        let url = getTankSettingsUri() + \"/\" + imei;\n        console.log(AppLogger( \"deleteTank \" + url));\n\n        axios\n            .delete(url)\n            .then(response => {\n                console.log(AppLogger(\"deleting tank succedded\"));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    readTanks(callBack) {\n        let uri = getTankSettingsUri();\n        console.log(AppLogger( \"readTanks \" + uri));\n        axios.get(uri)\n            .then(response => {\n                tankList = response.data;\n                //update building\n                for (let index in tankList){\n                    let names = tankList[index].name.split(\"--building--\");\n                    if (names.length === 1){\n                        tankList[index].building = '';\n                    }\n                    else{\n                        tankList[index].name = names[0];\n                        tankList[index].building = names[1];\n                    }\n                }\n                console.log(AppLogger( \"Got tanks list - \" + tankList.length));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    start(callBack, forceRead) {\n        console.log(AppLogger( \"start \" + forceRead));\n\n        if (forceRead || tankList.length === 0) {\n            tankList = [];\n            this.readTanks(callBack);\n        }\n        else {\n            callBack && callBack();\n        }\n    }\n}","import React, { Component } from \"react\";\nimport { Row, Col } from \"react-bootstrap\";\n\nexport class StatsCard extends Component {\n  render() {\n    return (\n      <div className=\"card card-stats\">\n        <div className=\"content\">\n          <Row>\n            <Col xs={12}>\n              <div className=\"numbers\">\n                <center>\n                  {this.props.bigIcon}\n                  {this.props.statsText}\n                </center>\n              </div>\n              <div>\n                {this.props.statsValue}\n              </div>\n\n            </Col>\n          </Row>\n          <div className=\"footer\">\n            <hr />\n            <div className=\"stats\">\n              {this.props.statsIcon} {this.props.statsIconText}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default StatsCard;\n","import TanksTable from \"./db/TanksTable\";\nimport { LogInHelper } from \"./logInHelper\";\n\nexport default class NotificationHelper {\n\n    constructor() {\n        let tt = new TanksTable();\n        tt.start(null, false);\n    }\n\n    getLevelNotifications() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getLevelNotificationsOnTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getLevelNotificationsOnTank(tank){\n        let notifications = [];\n        let lowestAlert = 100;\n        for (let alertIndex in tank.level_alerts) {\n            let level_alerts = tank.level_alerts[alertIndex];\n            if (level_alerts.status === 'on') {\n                if (lowestAlert > level_alerts.at_level){\n                    lowestAlert = level_alerts.at_level;\n                }\n                //let alertObj = { name: tank.name, level: level_alerts.at_level }\n                //notifications.push(alertObj);\n            }\n        }\n\n        if (lowestAlert !== 100){\n            let alertObj = { name: tank.name, level: lowestAlert }\n            notifications.push(alertObj);\n        }\n        \n        return notifications;\n    }\n\n    getHeartBeatNotification() {\n        let notifications = [];\n        // scan for notifications\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        let tanks = new TanksTable().getCustomerTanks(customerId);\n        for (let tankIndex in tanks) {\n            let tanksNotifications = this.getHeartBeatNotificationForTank(tanks[tankIndex]);\n            tanksNotifications.map((notification)=>notifications.push(notification));\n        }\n        return notifications;\n    }\n\n    getHeartBeatNotificationForTank(tank){\n        let notifications = [];\n        if (tank.heartbeat_ok !== true){\n            notifications.push({ name: tank.name });\n        }\n        return notifications;\n    }\n\n}","import axios from \"axios\";\nimport { getTankReadingUri, getTankReadingStartEndUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\nimport TanksTable from \"app/db/TanksTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nlet lastLevelMonitoring = [];\nlet numberOfTanks = 0;\nlet lastReadingTime = 0;\n\nexport default class TanksReading {\n\n    constructor() {\n        this.customer = null;\n        this.callBack = null;\n    }\n\n    getLastReadingTime = () => {\n        return lastReadingTime;\n    }\n\n    getSortReading(list, category) {\n        let tt = new TanksTable();\n        if (category === \"name\") {\n            return list.sort((a, b) =>\n                tt.getTankName(a.imei) > tt.getTankName(b.imei) ? 1 : -1);\n        }\n        else if (category === \"capacity\") {\n            return list.sort((a, b) =>\n                tt.getCapacity(a.imei) > tt.getCapacity(b.imei) ? 1 : -1);\n        }\n        else if (category === \"liquid_type\") {\n            return list.sort((a, b) =>\n                tt.getLiquidType(a.imei).toLowerCase() > tt.getLiquidType(b.imei).toLowerCase() ? 1 : -1);\n        }\n        else {\n            return null;\n        }\n    }\n\n    getLevelMonitoring(category) {\n        return this.getSortReading(lastLevelMonitoring, category);\n    }\n\n    getLevelMonitoringForTank(imei) {\n        let index = 0;\n        for (index in lastLevelMonitoring) {\n            if (lastLevelMonitoring[index].imei === imei) {\n                return lastLevelMonitoring[index];\n            }\n        }\n        return null;\n    }\n\n    updateTankReadings = (data) => {\n        if (data !== null) {\n            if (this.from === null) {\n                let tt = new TanksTable();\n                console.log(AppLogger( \"Readings from \" + tt.getTankName(data.data.imei)));\n                console.log(AppLogger( \"Sample \" + data.data.sample_level + \" Actual \" + data.data.actual_level +\n                    \" IMEI \" + data.data.imei + \" server time \" + data.data.server_time + \" tank time \" + data.data.tank_time));\n                lastLevelMonitoring.push(data.data);\n                if (lastReadingTime < data.data.server_time) {\n                    lastReadingTime = data.data.server_time;\n                }\n            }\n            else {\n                let range = data.data;\n                range['imei'] = new TanksTable().getImeiFromUrl(data.request.responseURL);\n                this.fromToLevelMonitoring.push(range);\n            }\n        }\n        this.numberOfreadings += 1;\n        // call after all reading done\n        if (numberOfTanks === this.numberOfreadings) {\n            //console.log(AppLogger( \"calling callback\");\n            if (this.from === null) {\n                this.callBack && this.callBack();\n            }\n            else {\n                let sorted = this.fromToLevelMonitoring.sort((a, b) => parseInt(a.imei, 16) - parseInt(b.imei, 16));\n                this.callBack && this.callBack(sorted);\n            }\n        }\n    }\n\n    tanksInfoReady = () => {\n        let tanks = new TanksTable().getCustomerTanks(this.customer);\n        numberOfTanks = tanks.length;\n        this.numberOfreadings = 0;\n\n        for (let index in tanks) {\n            let uri = getTankReadingUri(tanks[index].imei, true);\n            if (this.from != null && this.to != null && this.tank != null) {\n                numberOfTanks=1;\n                if (this.tank.imei === tanks[index].imei) { // get the readings only for the selected tank\n                    uri = getTankReadingStartEndUri(tanks[index].imei, this.from, this.to);\n                }\n                else{\n                    continue;\n                }\n            }\n            console.log(AppLogger( \"level monitoring uri = \" + uri));\n            axios\n                .get(uri)\n                .then(response => this.updateTankReadings(response))\n                .catch(error => {\n                    console.log(AppLogger( \"TanksReadings \" + error));\n                    this.updateTankReadings(null);\n                });\n        }\n    }\n\n    setClassParams(callBack, from, to, tank) {\n        this.callBack = callBack;\n        this.from = from;\n        this.to = to;\n        this.customer = new LogInHelper().getLoggedInCustomerId();\n        this.tank = tank\n        let tt = new TanksTable();\n        tt.start(this.tanksInfoReady, false);\n    }\n\n    getLastReading(callBack) {\n        console.log(AppLogger( \"Asking for last readings\"));\n        lastLevelMonitoring = [];\n        this.setClassParams(callBack, null, null, null);\n    }\n\n    getReadingFromTo(callBack, from, to, tank) {\n        console.log(AppLogger( \"Asking for from to readings\"));\n        this.fromToLevelMonitoring = [];\n        this.setClassParams(callBack, from, to, tank);\n    }\n}","import React from 'react';\nimport { Alert } from \"react-bootstrap\";\n\nexport function levelAlertView(alerts) {\n    if (alerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {alerts.map((alert, index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Level is below {alert.level}% on Tank: <q>{alert.name}</q></span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>\n    )\n}\n\nexport function heartBeatView(hearBeatAlerts) {\n    if (hearBeatAlerts.length === 0){\n        return null;\n    }\n\n    return (\n        <div>\n            {hearBeatAlerts.map((heartBeatAlert,index) => {\n                return (\n                    <Alert bsStyle=\"danger\" className=\"alert-with-icon\" key={index}>\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">Tank: <q>{heartBeatAlert.name}</q> is not responding</span>\n                        </center>\n                    </Alert>);\n            })}\n        </div>)\n}\n","import axios from \"axios\";\nimport { getCustomersUri } from \"app/restHelper.jsx\";\nimport { AppLogger } from \"app/Logger\";\n//import { LogInHelper } from \"app/logInHelper\";\n\nlet customerList = [];\n\nexport default class CustomersTable {\n\n    getCustomers() {\n        return customerList.sort((a, b) =>\n            a.name.toLowerCase() > b.name.toLowerCase() ? 1 : 0);\n    }\n/*\n    getCustomersIds() {\n        let customersNames = [];\n        let customer = new LogInHelper().getLoggedInCustomer();\n        if (customer === 'admin') { // get all customers\n            for (let index in customerList) {\n                customersNames.push(customerList[index].id);\n            }\n        }\n        else {\n            for (let index in customerList) {\n                if (customerList[index].name === customer) {\n                    customersNames.push(customerList[index].id);\n                    break;\n                }\n            }\n        }\n\n        return customersNames;\n    }\n*/\n    getCustomer(customerId) {\n        for (let index in customerList) {\n            if (customerList[index].id === customerId) {\n                return customerList[index];\n            }\n        }\n\n        return null;\n    }\n\n    getCustomerName(customerId) {\n        let customer = this.getCustomer(customerId);\n        if (customer !== null){\n            return customer.name;\n        }\n        else{\n            return \"\";\n        }\n    }\n\n    addCustomerToCustomers = (customer) =>{\n        // check if the customer is in the table\n        for (let index in customerList){\n            if (customerList[index].name === customer.name){\n                return;\n            }\n        }\n        \n        customerList.push(customer);\n\n    }\n\n    readCustomers(callBack) {\n        let uri = getCustomersUri();\n        console.log(AppLogger( \"Customers \" + uri));\n        axios\n            .get(uri)\n            .then(response => {\n                console.log(AppLogger( \"Got customers list \" + response.data.length));\n                for (let index = 0; index < response.data.length; index++) {\n                    this.addCustomerToCustomers(response.data[index]);\n                }\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    addNewCustomer(name, industry, mailingList, callBack) {\n        console.log(AppLogger( \"add new customer \" + name));\n\n        // check if name is in the list\n        for (let index in customerList) {\n            if (customerList[index].name.toLowerCase() === name.toLowerCase()) {\n                callBack && callBack(\"Customer \" + name + \" already exist\");\n                return;\n            }\n        }\n\n        axios.post(getCustomersUri(),\n            { \"name\": name, \"industry\": industry, \"mailing_list\": mailingList })\n            .then(response => {\n                console.log(AppLogger(\"adding new customer succedded\"));\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callBack && callBack(\"failed to create new customer\");\n            });\n    }\n\n    updateCustomer(customer,callBack) {\n        let url = getCustomersUri() + \"/\" + customer.id;\n        console.log(AppLogger( \"updating customer \" + url));\n\n        let json = { \"name\": customer.name, \"industry\": customer.industry, \"mailing_list\": customer.mailing_list };\n\n        axios\n            .put(url,json)\n            .then(response => {\n                console.log(AppLogger( \"updating customer succedded\"));\n                callBack && callBack(null);\n            })\n            .catch(error => {\n                console.log(AppLogger( error));\n                callBack && callBack(\"failed to create update customer\");\n            });\n    }\n\n    deleteCustomer(id, callBack) {\n        let url = getCustomersUri() + \"/\" + id;\n        console.log(AppLogger( \"deleteCustomer \" + url));\n\n        axios\n            .delete(url)\n            .then(response => {\n                console.log(AppLogger( \"deleting customer succedded\"));\n                callBack && callBack();\n            })\n            .catch(error => console.log(AppLogger( error)));\n    }\n\n    start(callBack, forceRead) {\n        console.log(AppLogger(\"start \" + forceRead));\n        if (forceRead || customerList.length === 0) {\n            customerList = [];\n            this.readCustomers(callBack);\n        }\n        else {\n            callBack && callBack(); \n        }\n    }\n}","import React, { Component } from \"react\";\nimport { interpolateRgb } from 'd3-interpolate';\nimport LiquidFillGauge from 'react-liquid-gauge';\nimport { color } from 'd3-color';\n\nconst timeout = 5;\nexport class TankCard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n\n    if (this.props.asAlerts===false){\n\n      let tankColor = '#00A4D5';\n      this.startColor = tankColor;\n      this.endColor =tankColor;\n      this.textColor = tankColor;\n    }\n    else{\n      this.startColor = 'red';\n      this.endColor = 'red';\n      this.textColor = 'red';\n    }\n\n    this.tick = this.tick.bind(this);\n\n    this.timeout = timeout;\n  }\n\n  componentDidMount() {\n    this.timer = setInterval(this.tick, 2000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timer);\n  }\n\n  tick() {\n    this.timeout -= 1;\n    if (this.timeout === 0) {\n      this.setState({ value: 0 });\n    }\n\n    if (this.timeout === -1) {\n      this.timeout = timeout;\n      this.setState({ value: this.props.value });\n    }\n  }\n\n  getTankName() {\n    if (this.props.tank) {\n      return this.props.tank.name;\n    }\n\n    return null;\n  }\n\n  getRadiusFromHeight1() {\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    let factor = 3.5;\n    if (window.screen.width <= 330) {\n      factor = 2.2;\n    }\n    else if (window.screen.width <= 360) {\n      factor = 2.8;\n    }\n    else if (window.screen.width <= 375) {\n      factor = 2.7;\n    }\n\n    let retVal = parseFloat(height, 10) * factor\n    //console.log(AppLogger('retVal =' + retVal);\n    return retVal;\n  }\n\n  getRadiusFromHeight() {\n    //console.log(AppLogger('width  = ' + window.innerWidth);\n    //console.log(AppLogger('Height = ' + window.innerHeight);\n    let height = this.props.height.substring(0, this.props.height.length - 1);\n    //console.log(AppLogger('height ' + height);\n    //console.log(AppLogger('innerHeight ' + window.innerHeight);\n    return window.innerHeight * height / 350;\n\n    //if (window.innerWidth <= 375){\n    //  return 100;\n    // }\n    // else{\n    //   return 140;\n    // }\n  }\n\n  renderTank() {\n    const radius = this.getRadiusFromHeight();\n    //const radius = 150;\n    const interpolate = interpolateRgb(this.startColor, this.endColor);\n    const fillColor = interpolate(this.state.value / 100);\n    const gradientStops = [\n      {\n        key: '0%',\n        stopColor: color(fillColor).darker(0.5).toString(),\n        stopOpacity: 1,\n        offset: '0%'\n      },\n      {\n        key: '50%',\n        stopColor: fillColor,\n        stopOpacity: 0.75,\n        offset: '50%'\n      },\n      {\n        key: '100%',\n        stopColor: color(fillColor).brighter(0.5).toString(),\n        stopOpacity: 0.5,\n        offset: '100%'\n      }\n    ];\n\n    return (\n      <div>\n        <LiquidFillGauge\n          style={{ margin: '0 auto'/*,height:this.props.height*/ }}\n          width={radius * 2}\n          height={radius * 2}\n          value={this.state.value}\n          percent=\"%\"\n          textSize={1}\n          textOffsetX={0}\n          textOffsetY={0}\n          textRenderer={(props) => {\n            const value = Math.round(props.value);\n            const radius = Math.min(props.height / 2, props.width / 2);\n            const textPixels = (props.textSize * radius / 2);\n            const valueStyle = {\n              fontSize: textPixels\n            };\n            const percentStyle = {\n              fontSize: textPixels * 0.6\n            };\n\n            return (\n              <tspan>\n                <tspan className=\"value\" style={valueStyle}>{value}</tspan>\n                <tspan style={percentStyle}>{props.percent}</tspan>\n              </tspan>\n            );\n          }}\n          riseAnimation\n          waveAnimation\n          waveFrequency={1}\n          waveAmplitude={4}\n          gradient\n          gradientStops={gradientStops}\n          circleStyle={{\n            fill: fillColor\n          }}\n          waveStyle={{\n            fill: fillColor\n          }}\n          textStyle={{\n            fill: this.textColor,\n            fontFamily: 'Arial'\n          }}\n          waveTextStyle={{\n            fill: color('#fff').toString(),\n            fontFamily: 'Arial'\n          }}\n          onClick={() => {\n            //this.setState({ value: Math.random() * 100 });\n          }}\n        />\n        <center><h3 style={{color:this.startColor}}><b>{this.props.volume}</b></h3></center>\n      </div>);\n  }\n\n  render() {\n    return (\n      <div>\n        {this.renderTank()}\n      </div>\n    );\n  }\n};\n\nexport default TankCard;\n","import React from 'react';\n\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport CustomersTable from \"../../app/db/CustomersTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { translate } from \"../../app/lang/lang\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport { getDetailedFormattedTime } from \"app/adminHelper.jsx\"\nimport { Col, FormControl, Table } from \"react-bootstrap\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { getPrimaryTextColor } from '../../app/adminHelper.jsx';\n\nexport function renderTanks(readings) {\n    let width = 6;\n    if (readings.length === 1){\n        width = 12;\n    }\n    return (\n        readings.map((reading, index) => {\n\n            let tt = new TanksTable();\n            let tank = tt.getTank(reading.imei);\n            if (tank === null) {\n                return null;\n            }\n            let tankName = tank.name;\n\n            let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n\n            let nh = new NotificationHelper();\n\n            let levelAlerts = nh.getLevelNotificationsOnTank(tank);\n            //let hearBeatAlerts = nh.getHeartBeatNotificationForTank(tank);\n            //let asAlert = (levelAlerts.length !==0 || hearBeatAlerts.length !==0)?true:false\n            let asAlert = (levelAlerts.length !== 0) ?true:false\n            let titleColor = getPrimaryTextColor();\n            if (asAlert){\n                titleColor = 'red'\n            }\n            return (\n                <Col xs={12} sm={width} key={index} >\n                    <Card \n                        hCenter={true}\n                        id=\"chartHours\"\n                        title={tankName} color={titleColor}\n                        stats={renderTanksParams(tank, reading)}\n                        content={<TankCard\n                            value={reading.actual_level}\n                            height={\"40%\"}\n                            volume={volume}\n                            asAlerts={asAlert}\n                        />\n                        }\n                    />\n                </Col>\n            );\n        }\n        ));\n}\n\nexport function isTankFiltered(tank, filterStr) {\n    if (filterStr !== \"\") {\n        let tt = new TanksTable();\n        let customer = tt.getCustomerId(tank.imei);\n        let customerName = new CustomersTable().getCustomerName(customer);\n\n        if (tank.imei.search(filterStr) === -1 &&\n            tank.name.search(filterStr) === -1 &&\n            customerName.search(filterStr) === -1 &&\n            tank.capacity.toString().search(filterStr) === -1 &&\n            tank.liquid_type.search(filterStr) === -1)\n            return true;\n    }\n    return false;\n}\n\nfunction getCustomer(tank) {\n    if (new LogInHelper().isAdmin()) {\n        return new CustomersTable().getCustomerName(tank.customer);\n    }\n    else {\n        return null;\n    }\n}\n\nfunction renderTableRow(t1, t2) {\n    return (\n        <tr>\n            <td><center>{t1}</center></td>\n            <td><center>{t2}</center></td>\n        </tr>\n    )\n}\nfunction renderTableRowForAlert(t1, t2, color) {\n    return (\n        <tr>\n            <td style={{color:color}}><center>{t1}</center></td>\n            <td style={{color:color}}><center>{t2}</center></td>\n        </tr>\n    )\n}\n\nexport function renderTanksParams(tank, readings) {\n\n    let isAdmin = new LogInHelper().isAdmin();\n\n    let nh = new NotificationHelper();\n\n    let levelAlerts = nh.getLevelNotificationsOnTank(tank);\n    let hearBeatAlerts = nh.getHeartBeatNotificationForTank(tank);\n    return (\n        <div>\n            <Table striped bordered condensed hover>\n                <tbody>\n                    {renderTableRow(translate(\"tankName\"), tank.name)}\n                    {renderTableRow(translate(\"buildingName\"), tank.building)}\n                    {getCustomer(tank) !== null &&\n                        renderTableRow(\"Customer\", getCustomer(tank))\n                    }\n                    {renderTableRow(translate(\"capacity\"), tank.capacity + \" L\")}\n                    {readings !== null &&\n                        renderTableRow(translate(\"volume\"), parseInt(tank.capacity * readings.actual_level / 100, 10) + \" L\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"leftInTank\"), readings.actual_level + \"%\")\n                    }\n                    {readings !== null &&\n                        renderTableRow(translate(\"lastUpdate\"), getDetailedFormattedTime(readings.server_time))\n                    }\n                    {renderTableRow(translate(\"liquid\"), translate(tank.liquid_type))}\n                    {isAdmin && renderTableRow(translate(\"sensorLength\"), tank.sensor_type + \"M\")}\n                    {renderTableRowForAlert(translate(\"levelAlert\"), levelAlerts.length > 0 ? translate(\"Level Below\") + \" \" + levelAlerts[0].level + \"%\" : translate(\"Level OK\"), levelAlerts.length>0?'red':'black')}\n                    {isAdmin && renderTableRowForAlert(translate(\"heartbeat\"), hearBeatAlerts.length > 0 ? translate(\"Not Connected\") : translate(\"Connected\"), levelAlerts.length>0?'red':'black')}\n                </tbody>\n            </Table>\n        </div>\n    )\n}\n\nexport function renderFilterTanksCard(caller) {\n    //let logInHelper = new LogInHelper();\n    ///if (logInHelper.isAdmin() === false) {\n    //    return null\n    //}\n\n    return (\n        <Col md={4}>\n            <Card\n                id={\"filterTanks\"}\n                title=\"Filter Tanks\"\n                hCenter={true}\n                content={\n                    <FormControl\n                        type=\"text\"\n                        value={caller.state.value}\n                        placeholder=\"Tank / Customer / Capacity / IMEI\"\n                        onChange={(e) => caller.setState({ filterStr: e.target.value })}\n                    />\n                }\n            />\n        </Col>\n    );\n}","import { translate } from \"../../app/lang/lang\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport { AppLogger } from \"../../app/Logger\";\n\nexport default class RangeHelper {\n    constructor() {\n        this.ranges = ['Last 6H','Last 12H', 'Last 24H', 'Last 2 Days', 'Select Range'];\n        this.rangesValues = [6, 12, 24, 24 * 2, null];\n    }\n\n    getFirstRangeInHours = () =>{\n        return this.rangesValues[0];\n    }\n\n    getRanges = () => {\n        return this.ranges;\n    }\n\n    getRangeInHour = (index) => {\n        return this.rangesValues[index];\n    }\n\n    getSelectedString = (index) => {\n        if (index === this.ranges.length - 1) {\n            return translate(\"Custom Range\");\n        }\n        else {\n            return translate(this.ranges[index]);\n        }\n    }\n\n    getRangeForHourse = (timeInHours, callback, forClass) => {\n        let tr = new TanksReading();\n        let from = tr.getLastReadingTime() - (timeInHours * 60 * 60 * 1000);\n        let to = tr.getLastReadingTime();\n        console.log(AppLogger( from + \" \" + to));\n        this.callback = callback;\n        tr.getReadingFromTo(this.rangeReady, from, to, forClass);\n    }\n\n    getRangeFromTo = (from, to, callback, tank) => {\n        this.callback = callback;\n        new TanksReading().getReadingFromTo(this.rangeReady, from, to, tank);\n    }\n\n    rangeReady = (range) => {\n        if (range.length !== 0) {\n            this.callback && this.callback(range);\n        }\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport momentPropTypes from 'react-moment-proptypes';\nimport moment from 'moment';\nimport omit from 'lodash/omit';\nimport { DateRangePickerShape, DateRangePickerPhrases, DateRangePicker, START_DATE, END_DATE, VERTIVAL_ORIENTATION, ANCHOR_LEFT } from 'react-dates';\nimport 'react-dates/initialize';\nimport 'react-dates/lib/css/_datepicker.css';\n//import { AppLogger } from '../../app/Logger';\nconst propTypes = {\n  // example props for the demo\n  autoFocus: PropTypes.bool,\n  autoFocusEndDate: PropTypes.bool,\n  stateDateWrapper: PropTypes.func,\n  initialStartDate: momentPropTypes.momentObj,\n  initialEndDate: momentPropTypes.momentObj,\n\n  ...omit(DateRangePickerShape, [\n    'startDate',\n    'endDate',\n    'onDatesChange',\n    'focusedInput',\n    'onFocusChange',\n  ]),\n};\n\nconst defaultProps = {\n  // app props\n  onHide: null,\n  // example props for the demo\n  autoFocus: false,\n  autoFocusEndDate: false,\n  initialStartDate: new moment(),\n  initialEndDate: new moment(),\n\n  // input related props\n  startDateId: START_DATE,\n  startDatePlaceholderText: 'Start Date',\n  endDateId: null,\n  endDatePlaceholderText: 'End Date',\n  disabled: false,\n  required: false,\n  screenReaderInputMessage: '',\n  showClearDates: false,\n  showDefaultInputIcon: false,\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  block: false,\n  small: false,\n  regular: false,\n\n  // calendar presentation and interaction related props\n  renderMonthText: null,\n  orientation: VERTIVAL_ORIENTATION,\n  anchorDirection: ANCHOR_LEFT,\n  horizontalMargin: 0,\n  withPortal: false,\n  withFullScreenPortal: false,\n  initialVisibleMonth: null,\n  numberOfMonths: 2,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  isRTL: false,\n\n  // navigation related props\n  navPrev: null,\n  navNext: null,\n  onPrevMonthClick() { },\n  onNextMonthClick() { },\n  onClose() { },\n\n  // day presentation and interaction related props\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  minimumNights: 0,\n  enableOutsideDays: false,\n  isDayBlocked: () => false,\n  isOutsideRange: () => false,\n  //isOutsideRange: day => !isInclusivelyAfterDay(day, moment()),\n  isDayHighlighted: () => false,\n\n  // internationalization\n  displayFormat: () => moment.localeData().longDateFormat('L'),\n  monthFormat: 'MMMM YYYY',\n  phrases: DateRangePickerPhrases,\n\n  stateDateWrapper: date => date,\n};\n\nclass DateRangePickerWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n\n    let focusedInput = null;\n    if (props.autoFocus) {\n      focusedInput = START_DATE;\n    } else if (props.autoFocusEndDate) {\n      focusedInput = END_DATE;\n    }\n\n    this.state = {\n      focusedInput,\n      startDate: props.initialStartDate,\n      endDate: props.initialEndDate,\n      startDateId: 0\n    };\n\n    this.onDatesChange = this.onDatesChange.bind(this);\n    this.onFocusChange = this.onFocusChange.bind(this);\n  }\n\n  onDatesChange({ startDate, endDate }) {\n    const { stateDateWrapper } = this.props;\n    this.setState({\n      startDate: startDate && stateDateWrapper(startDate),\n      endDate: endDate && stateDateWrapper(endDate),\n    });\n  }\n\n  onFocusChange(focusedInput) {\n    this.setState({ focusedInput });\n  }\n\n  getNumberOfMonth = () => {\n    if (window.innerWidth <= 994) {\n      return 1;\n    }\n    else {\n      return 2;\n    }\n  }\n\n  handelClose = (startDate) => {\n    if (startDate) {\n      this.props.onHide(this.state.startDate.toDate(), startDate.endDate.toDate());\n    }\n  }\n\n  render() {\n    const { focusedInput, startDate, endDate } = this.state;\n\n    // autoFocus, autoFocusEndDate, initialStartDate and initialEndDate are helper props for the\n    // example wrapper but are not props on the SingleDatePicker itself and\n    // thus, have to be omitted.\n    const props = omit(this.props, [\n      'autoFocus',\n      'autoFocusEndDate',\n      'initialStartDate',\n      'initialEndDate',\n      'stateDateWrapper',\n    ]);\n\n    return (\n      <div>\n        <DateRangePicker\n          {...props}\n          numberOfMonths={this.getNumberOfMonth()}\n          onDatesChange={this.onDatesChange}\n          onFocusChange={this.onFocusChange}\n          focusedInput={focusedInput}\n          startDate={startDate}\n          endDate={endDate}\n          onClose={(startDate) => this.handelClose(startDate)}\n        />\n      </div>\n    );\n  }\n}\n\nDateRangePickerWrapper.propTypes = propTypes;\nDateRangePickerWrapper.defaultProps = defaultProps;\n\nexport default DateRangePickerWrapper;","\nimport React from \"react\";\nimport { Modal, Button } from 'react-bootstrap'\nimport DateRangePickerWrapper from \"components/App/DateAndTime.jsx\";\nimport { MenuItem, DropdownButton } from 'react-bootstrap';\n\n\nclass DateAndTimeModal extends React.Component {\n\n    constructor(props) {\n        super(props);\n        // create time array\n        this.timeArray = this.createTimeArray();\n\n        this.state = { startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() }\n    }\n\n    createTimeArray = () => {\n        let timeArray = [];\n        for (let hour = 0; hour < 24; hour++) {\n            let hourStr = \"\" + hour;\n            if (hour < 10) {\n                hourStr = \"0\" + hour;\n            }\n\n            timeArray.push(hourStr + \":00\");\n            timeArray.push(hourStr + \":30\");\n        }\n\n        return timeArray;\n\n    }\n    dateSelected = (start, end) => {\n        this.setState({ startDate: start, endDate: end });\n    }\n\n    closeModal = () => {\n        this.props.onHide(\n            this.state.startDate, this.state.endDate,\n            this.state.startTime, this.state.endTime);\n        this.setState({ startTime: \"00:00 AM\", endTime: \"24:00 PM\", startDate: new Date(), endDate: new Date() });\n    }\n\n    quickSelection = (time) => {\n        this.props.onHide(null, null, time, null);\n    }\n\n    render() {\n        return (\n            <Modal\n                {...this.props}\n                bsSize=\"small\"\n                aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">Date Range Selection</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <DateRangePickerWrapper onHide={this.dateSelected}\n                        startDateId={\"2\"} endDateId={\"2\"} />\n                </Modal.Body>\n                <div>\n                    <center>\n                        Select Start & End Time\n                    </center>\n                    <p />\n                </div>\n                <div><center>\n                    <DropdownButton title={this.state.startTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ startTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>&nbsp;&nbsp;\n                    <DropdownButton title={this.state.endTime} id=\"dropdown-size-medium\"\n                        onSelect={(e) => this.setState({ endTime: this.timeArray[e] })}>\n                        {this.timeArray.map((str, index) => {\n                            return <MenuItem key={index} eventKey={index}><strong>{str}</strong></MenuItem>;\n                        })}\n                    </DropdownButton>\n                </center></div>\n                <p />\n                <Modal.Footer>\n                    <Button onClick={this.closeModal}>Select</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default DateAndTimeModal;\n\n","import React from \"react\";\nimport {\n    DropdownButton, MenuItem, ButtonGroup\n} from \"react-bootstrap\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nexport default class TanksSelection extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedTankName: null\n        };\n\n        let customerId = new LogInHelper().getLoggedInCustomerId();\n        this.tanks = new TanksTable().getCustomerTanks(customerId);\n    }\n\n    tankSelected = (index) => {\n\n        this.setState({ selectedTankName: this.tanks[index].name });\n        this.props.tankSelected && this.props.tankSelected(this.tanks[index]);\n    }\n\n    getTankName = () => {\n        if (this.state.selectedTankName === null) { // not set yet\n            return this.props.getSelectedTank().name\n        }\n        else {\n            return this.state.selectedTankName\n        }\n    }\n\n    render() {\n        let tankName = this.getTankName()\n        return (\n            <ButtonGroup>\n                <DropdownButton title={\"Select Tank - \" + tankName} bsStyle=\"primary\" \n                style={{ margin: '3px' ,color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}} \n                id=\"bg-nested-dropdown\">\n                    {\n                        this.tanks.map((tank, index) => {\n                            return (\n                                <MenuItem eventKey={index} key={index} onClick={() => this.tankSelected(index)}>{tank.name}</MenuItem>\n                            )\n                        })\n                    }\n                </DropdownButton>\n            </ButtonGroup >\n        )\n    }\n}","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport DateAndTimeModal from \"./DateAndTimeModal\";\nimport { ButtonToolbar, ButtonGroup, Button } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksSelection from \"./../../views/Admin/TanksSelection\"\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nclass RangeView extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { showDateAndTimeModal: false };\n    }\n\n    rangeSelected = (value) => {\n        console.log(AppLogger( \"rangeSelected \" + value));\n\n        let rangeInHour = new RangeHelper().getRangeInHour(value);\n        if (rangeInHour === null) {\n            this.setState({ showDateAndTimeModal: true });\n        }\n        else {\n            this.props.hoursSelected(rangeInHour, value);\n        }\n    }\n    getDate = (date, time) => {\n        let hour = parseInt(time.substring(0, 2), 10);\n        let minutes = parseInt(time.substring(3, 5), 10);\n        date.setHours(hour);\n        date.setMinutes(minutes);\n        return date;\n    }\n\n    dateAndTimeModalClose = (startDate = null, endDate = null, startTime = null, endTime = null) => {\n        if (startDate !== null && endDate !== null &&\n            startTime !== null && endTime !== null) {\n            let start = this.getDate(startDate, startTime);\n            let end = this.getDate(endDate, endTime);\n            this.props.rangeSelected(start.getTime(), end.getTime());\n        }\n        else {\n            this.props.hoursSelected(6, 0);\n        }\n\n        this.setState({ showDateAndTimeModal: false });\n    }\n\n    render() {\n        let ranges = new RangeHelper().getRanges();\n        return (\n            <div>\n                <ButtonToolbar>\n                    <ButtonGroup>\n\n                        <TanksSelection tankSelected={this.props.tankSelected}\n                            getSelectedTank={this.props.getSelectedTank} />\n                        <Button\n                            style={{ opacity: '0' }}>\n                            {\"spacer it\"}\n                        </Button>\n                    </ButtonGroup>\n                    <ButtonGroup>\n                        {\n                            ranges.map((range, index) => {\n                                return (\n                                    <Button\n                                        bsStyle=\"primary\"\n                                        value={index}\n                                        style={{ margin: '3px',color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}}\n                                        key={index}\n                                        onClick={() => this.rangeSelected(index)}\n                                        >\n                                        {range}\n                                    </Button>\n                                )\n                            })\n                        }\n                    </ButtonGroup>\n                </ButtonToolbar>\n                <DateAndTimeModal show={this.state.showDateAndTimeModal} onHide={this.dateAndTimeModalClose} />\n            </div>);\n    }\n}\n\nexport default RangeView;\n","import React from 'react';\n//import { curveCatmullRom } from 'd3-shape';\nimport \"../../../node_modules/react-vis/dist/style.css\"\nimport { getFormattedTime } from \"app/adminHelper.jsx\"\nimport {\n    XAxis,\n    YAxis,\n    HorizontalGridLines,\n    VerticalGridLines,\n    FlexibleWidthXYPlot,\n    AreaSeries,\n    DiscreteColorLegend\n} from 'react-vis';\n\nexport default class VisGraph extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            crosshairValues: []\n        };\n        this.colors = ['87cefa', 'white', 'green', 'black', 'orange', 'grey'];\n    }\n\n    getData = (data) => {\n        if (this.props.maxPoints === undefined || this.props.maxPoints === null) {\n            return data;\n        }\n        else {\n            if (this.props.maxPoints > data.length) {\n                return data;\n            }\n            let stayIndex = parseInt(data.length / this.props.maxPoints, 10);\n            for (var i = data.length - 2; i > 0; i--) {\n                if (i % stayIndex !== 0) {\n                    data.splice(i, 1);\n                }\n            }\n            return data;\n        }\n    }\n\n    myFormatter = (t, i) => {\n        let formatedTime = getFormattedTime(t);\n        let splitted = formatedTime.split('-');\n\n        return (<tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[0]}</tspan>\n            <tspan x=\"0\" dy=\"1em\">{splitted[1]}</tspan>\n        </tspan>);\n    }\n\n    yFormatter = (t,i) =>{\n\n        return (\n            <div>\n                 (t/1000).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\") + \"K L\"}\n\n            </div>\n        )\n\n    }\n\n    getLegendItems = () => {\n        let items = [];\n        for (let index in this.props.data) {\n            let data = this.props.data[index];\n            if (data.length !== 0) {\n                if (data[0].tankName !== \"\") { // not a real tank, helper points\n                    let obj = { title: data[0].tankName, color: this.colors[index % this.colors.length] };\n                    items.push(obj);\n                }\n            }\n        }\n        return items;\n    }\n\n    getxValues = (tickTotal) => {\n        // get the data array\n        for (let index in this.props.data) {\n            let dataLen = this.props.data[index].length;\n            if (dataLen > 2) {\n                let ret = [];\n                let data = this.props.data[index];\n                let firstX = data[0].x - (data[0].x % 3600000) + 3600000;\n                let hours = parseInt((data[dataLen - 1].x - data[0].x - 1000 * 60) / 1000 / 60 / 60, 10);\n                let hoursJump = parseInt(hours / 6, 10);\n                let jumps = 3600000 * (hoursJump + 1);\n                if (tickTotal > 5) {\n                    jumps /= 2;\n                    if (data[0].x < firstX - jumps) {\n                        firstX -= jumps;\n                    }\n                }\n                else {\n                    if (hours > 12) {\n                        tickTotal += 1;\n                    }\n                }\n                for (let index = 0; index < tickTotal; index++) {\n                    ret.push(firstX + index * jumps);\n                }\n                return ret;\n            }\n        }\n        return null\n    }\n\n    render() {\n        let tickTotal = (window.innerWidth <= 994) ? 5 : 12;\n        let legenItems = this.getLegendItems();\n        let xValues = this.getxValues(tickTotal);\n        //const configuredCurve = curveCatmullRom.alpha(0.5);\n        return (\n            <div>\n                <FlexibleWidthXYPlot\n                    height={360}\n                    margin={{ left: 50 }}>\n                    <DiscreteColorLegend\n                        items={legenItems}\n                        orientation=\"horizontal\" />\n                    <HorizontalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <VerticalGridLines style={{ stroke: '#B7E9ED' }} />\n                    <XAxis title=\"\" tickValues={xValues} tickFormat={this.myFormatter}\n                        style={{\n                            line: { stroke: '#ADDDE1' },\n                            ticks: { stroke: '#ADDDE1' },\n                            text: { stroke: 'none', fill: '#6b6b76', fontWeight: 600 }\n                        }} />\n                    <YAxis title=\"\" tickTotal={15} style={{ size: 10 }} tickFormat={(v) => \n                    {\n                        if (v>1000){\n                            return (v/1000) + \"K L\";\n                            //return (v/1000).toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, \"$1,\") + \"K L\";\n                        }\n                        else{\n                            return v + \" L\";\n                        }\n                    }}/>\n\n                    {this.props.data.map((data, index) => {\n                        let strokeColor = 'blue';\n                        if (index !== 0) {\n                            strokeColor = 'white';\n                        }\n                        return (\n                            <AreaSeries\n                                key={index}\n                                xType={'time'}\n                                className={\"series\" + { index }}\n                                color={this.colors[index % this.colors.length]}\n                                data={this.getData(data)}\n                                curve={\"curveNatural\"}\n                                stroke={strokeColor}\n                                size={0} />)\n                    })}\n                </FlexibleWidthXYPlot>\n            </div>\n        );\n    }\n}","    \n    import { isTankFiltered } from \"../views/Tanks/Tanks\"\n    import TanksTable from \"../app/db/TanksTable\"\n\n    let graphFilteredTank = null;\n    let dataFilteredTank = null;\n\n    export function setGraphFilteredTank(tank){\n      graphFilteredTank = tank;\n    }    \n    export function getGraphFilteredTank(){\n      return graphFilteredTank;\n    }    \n    \n    export function setDataFilteredTank(tank){\n      dataFilteredTank = tank;\n    }    \n    \n    export function getDataFilteredTank(){\n      return dataFilteredTank;\n    }\n\n    /// filter \n    export function isFiltered(imei,filterStr) {\n\n        if (filterStr !== \"\") {\n          let tanks = new TanksTable().getTanks();\n          for (let index in tanks) {\n            if (tanks[index].imei === imei) {\n              return isTankFiltered(tanks[index], filterStr)\n            }\n          }\n        }\n    \n        return false;\n      }\n    \n\n    export function getFilteredReadings(readingsData, filterStr){\n        if (filterStr !== \"\" && readingsData.length !== 0) {\n          let readings = [...readingsData];\n          for (let index = readings.length - 1; index >= 0; index--) {\n            if (isFiltered(readings[index].imei,filterStr)) {\n              readings.splice(index, 1);\n            }\n          }\n          return readings;\n        }\n        else {\n          return readingsData;\n        }\n      }\n    ","import React from \"react\";\nimport Loader from 'react-loader-spinner'\n\nexport default class Spinner extends React.Component {\n //other logic\n   render() {\n    return(\n     <Loader \n        type=\"Oval\"\n        color=\"#00BFFF\"\n        height=\"100\"\t\n        width=\"100\"\n     />   \n    );\n   }\n}","import React, { Component } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport RangeView from \"./../Dashboard/RangeView\";\nimport Card from \"components/Card/Card\";\nimport VisGraph from \"components/App/VisGraph.jsx\"\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport { setGraphFilteredTank, getGraphFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\n\nclass Graph extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = { graphReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"graph\");\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n            clearInterval(this.timer);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            graphReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeReady = (range) => {\n        this.setState({ graphReadings: range, rangeReady: true });\n    }\n\n    rangeReadingToGraphData() {\n        let retArray = [];\n        let maxX = 0;\n        let readings = getFilteredReadings(this.state.graphReadings, \"\");\n        let tt = new TanksTable();\n        let maxCapacity = 0;\n        for (let index in readings) {\n            let current = readings[index];\n            let tmpData = [];\n            let tank = tt.getTank(readings[index].imei);\n            if (tank === null || tank.capacity === null) {\n                continue;\n            }\n            for (let currentIndex in current.levels) {\n                let obj = {\n                    x: current.times[currentIndex],\n                    y: current.levels[currentIndex] * tank.capacity / 100,\n                    tankName: tank.name\n                };\n                tmpData.push(obj);\n                if (current.times[currentIndex] > maxX) {\n                    maxX = current.times[currentIndex];\n                }\n\n                if (tank.capacity > maxCapacity) {\n                    maxCapacity = tank.capacity;\n                }\n            }\n            retArray.push(tmpData);\n        }\n\n        // add the max object - TODO fix\n        let tmpData = [];\n        tmpData.push({ x: maxX, y: maxCapacity * 1.2, tankName: \"\" }); // add 20% to the graph\n        retArray.push(tmpData);\n        tmpData = [];\n        tmpData.push({ x: maxX, y: 0, tankName: \"\" });\n        retArray.push(tmpData);\n\n        return retArray;\n    }\n\n    tankSelected = (tank) => {\n        setGraphFilteredTank(tank);\n        if (this.state.start === null) {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n        else {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getGraphFilteredTank();\n    }\n\n    render() {\n\n        let height = this.props.fromDashboard === true ? '' : '120%';\n        if (this.state.rangeReady === false) {\n            return (\n                <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                    <Card\n                        hCenter={true}\n                        title=\"Loading Graph...\"\n                        content={<center><Spinner /></center>}\n                    />\n                </div>\n            )\n        }\n\n        let cardId = \"visGraph\"\n        let data = this.rangeReadingToGraphData();\n        let rangeHelper = new RangeHelper();\n        let selectedRange = rangeHelper.getSelectedString(this.state.rangeIndex) + \" for tank: \" + this.getSelectedTank().name;\n\n        return (\n            <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                <Col md={12}>\n                    <Card\n                        id={cardId}\n                        title={translate(\"volumeHistory\")}\n                        category={selectedRange}\n                        hCenter={true}\n                        stats={<RangeView\n                            hoursSelected={this.hoursSelected}\n                            rangeSelected={this.rangeSelected}\n                            tankSelected={this.tankSelected}\n                            getSelectedTank={this.getSelectedTank} />}\n                        content={\n                            <div style={{ height: '380px' }}>\n                                <VisGraph\n                                    data={data}\n                                    maxPoints={40}\n                                />\n                            </div>\n                        }\n                    />\n                </Col>\n            </div>\n        );\n    }\n}\n\nexport default Graph;\n","import React, { Component } from \"react\";\nimport { Col, Table, Button } from \"react-bootstrap\";\nimport Card from \"components/Card/Card.jsx\";\nimport TanksTable from \"../../app/db/TanksTable\"\nimport { getFormattedTime, isIos } from \"app/adminHelper.jsx\"\nimport { makePdf } from \"./PdfMaker\"\nimport {getPrimaryTextColor} from '../../app/adminHelper'\n\nclass TableList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.arrayForTable = [];\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.tanksNames = [];\n    this.state = { excelTableReady: false };\n  }\n\n  componentDidMount = () => {\n    import('./ExcelTable').then(ExcelTable => {\n      this.ExcelTable = ExcelTable;\n      this.setState({ excelTableReady: true });\n      console.log(\"excelTable Ready\");\n    })\n  }\n\n  getHeader = () => {\n    return [\"ID\", \"Tank\", \"Left in Tank (%)\", \"Volume\", \"Time\"];\n  }\n\n  createData = () => {\n    this.arrayForExcel = [[]];\n    this.arrayForPdf = [[]];\n    this.arrayForTable = [];\n    this.tanksNames = [];\n    let tt = new TanksTable();\n    let count = 1;\n    for (let index in this.props.rangeReadings) {\n      let tank = tt.getTank(this.props.rangeReadings[index].imei);\n      let tankName = tank.name;\n      this.tanksNames.push(tankName);\n      this.arrayForExcel[index] = [];\n      this.arrayForPdf[index] = [];\n      this.arrayForPdf[index].push([tankName, 'Time', 'Left In Tank', 'Volume']);\n      for (let readings in this.props.rangeReadings[index].levels) {\n        let time = getFormattedTime(this.props.rangeReadings[index].times[readings]);\n        let level = this.props.rangeReadings[index].levels[readings];\n        let sample = this.props.rangeReadings[index].samples[readings];\n        let vol = level * tank.capacity / 100;\n        let row = [\n          count++,\n          tankName,\n          level + \" %\",\n          vol + \" L\",\n          time];\n        this.arrayForTable.push(row);\n        let rowForExcel = { time: time, level: level + \" %\", vol: vol + \" L\", samples: sample };\n        this.arrayForExcel[index].push(rowForExcel);\n        this.arrayForPdf[index].push(['', time, level + \" %\", vol + \" L\"]);\n      }\n      if (this.props.rangeReadings[index].levels.length === 0) {\n        // tank without readings history\n        let row = [\n          \"!!!!!!!\",\n          tankName,\n          \"No History For This Tank\",\n          \"!!!!!!!\",\n          \"!!!!!!!\"];\n        this.arrayForTable.push(row);\n      }\n    }\n  }\n\n  creatPdfDocDefinition = () => {\n    let array = [];\n    for (let index in this.arrayForPdf) {\n      let pb = { text: '', pageBreak: 'after', style: 'subheader' };\n\n      let obj = {\n        style: 'tableExample',\n        table: {\n          headerRows: 1,\n          widths: ['*', '*', '*', '*'],\n          body: this.arrayForPdf[index]\n        }\n      };\n      array.push(obj);\n      array.push(pb);\n    }\n\n    return array;\n  }\n\n  exportToPdf = (exportOrPrint) => {\n    makePdf(exportOrPrint, this.creatPdfDocDefinition());\n  }\n\n  renderExport = () => {\n    console.log(\"renderExport\");\n    return (\n      <div>\n        <div>\n          {this.props.rangeButtons}\n        </div>\n        {isIos() === false &&\n          <div>\n            <this.ExcelTable.default button={<Button bsStyle=\"primary\" style={{ margin: '3px' ,color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}} >Export To Excel</Button>} data={this.arrayForExcel} tanksNames={this.tanksNames} />\n            <Button bsStyle=\"primary\" style={{ margin: '3px' ,color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}} onClick={() => this.exportToPdf('export')}>Export To PDF</Button>\n            <Button bsStyle=\"primary\" style={{ margin: '3px' ,color:getPrimaryTextColor(), borderColor:getPrimaryTextColor()}} onClick={() => this.exportToPdf('print')}>Print</Button>\n        </div>\n        }\n      </div>\n    );\n  }\n\n  render() {\n\n    if (this.state.excelTableReady === false) {\n      return null;\n    }\n    console.log(\"render TableList \");\n\n    this.createData();\n    let header = this.getHeader();\n    return (\n      <Col md={12}>\n        <Card\n          title={this.props.title}\n          category={this.props.category}\n          hCenter={true}\n          ctTableFullWidth\n          stats={this.renderExport()}\n          content={\n            <div style={{ height: '50%', overflowY: 'auto' }}>\n              <Table striped hover >\n                <thead >\n                  <tr>\n                    {header.map((prop, key) => {\n                      return <th key={key}>{prop}</th>;\n                    })}\n                  </tr>\n                </thead>\n                <tbody style={{ overflow: 'auto' }}>\n                  {this.arrayForTable.map((prop, key) => {\n                    return (\n                      <tr key={key}>\n                        {prop.map((prop, key) => {\n                          return <td key={key}>{prop}</td>;\n                        })}\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </Table>\n            </div>\n          }\n        />\n      </Col>\n    );\n  }\n}\n\nexport default TableList;\n","\n\nexport function makePdf(exportOrPrint, pdfDocDefinition) {\n\n    import('pdfmake/build/pdfmake.js')\n        .then((pdfMake) => {\n            // pdfMake was loded\n            console.log(\"pdfMake loded\");\n            var docDefinition = {\n                compress: true,\n                content: pdfDocDefinition\n            };\n\n            import('pdfmake/build/vfs_fonts.js')\n                .then((pdfFonts) => {\n                    pdfMake.vfs = pdfFonts.pdfMake.vfs;\n                    pdfMake.tableLayouts = {\n                        exampleLayout: {\n                            hLineWidth: function (i, node) {\n                                if (i === 0 || i === node.table.body.length) {\n                                    return 0;\n                                }\n                                return (i === node.table.headerRows) ? 2 : 1;\n                            },\n                            vLineWidth: function (i) {\n                                return 0;\n                            },\n                            hLineColor: function (i) {\n                                return i === 1 ? 'black' : '#aaa';\n                            },\n                            paddingLeft: function (i) {\n                                return i === 0 ? 0 : 8;\n                            },\n                            paddingRight: function (i, node) {\n                                return (i === node.table.widths.length - 1) ? 0 : 8;\n                            }\n                        }\n                    };\n\n                    // download the PDF\n                    if (exportOrPrint === 'export') {\n                        pdfMake.createPdf(docDefinition).download('NTCL-MonitoringData.pdf');\n                    }\n                    if (exportOrPrint === 'print') {\n                        pdfMake.createPdf(docDefinition).print();\n                    }\n                })\n                .catch(err => {\n                    console.log(err + \"Error importing pdfFonts\");\n                });\n        })\n        .catch(err => {\n            // Handle failure\n            console.log(err + \"Error importing pdfMake\");\n        });\n};","import React, { Component } from \"react\";\nimport RangeHelper from \"./../Dashboard/RangeHelper\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport TableList from \"../TableList/TableList\"\nimport RangeView from \"./../Dashboard/RangeView\";\nimport { setDataFilteredTank, getDataFilteredTank } from \"../../app/readingsHelper\"\nimport Spinner from \"../App/Spinner\"\nimport Card from \"components/Card/Card\";\nimport { Col } from \"react-bootstrap\";\n\nclass Data extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { tableReadings: [], rangeIndex: 0, rangeReady: false }\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            let rh = new RangeHelper();\n            //rh.getRangeForHourse(rh.getFirstRangeInHours(), this.rangeReady, \"data\");\n            clearInterval(this.timer);\n            this.hoursSelected(rh.getFirstRangeInHours(), 0);\n        }\n    }\n\n    hoursSelected = (hours, index) => {\n        this.setState({\n            tableReadings: [], rangeIndex: index,\n            index: index, hours: hours, start: null, end: null\n        });\n        new RangeHelper().getRangeForHourse(hours, this.rangeReady, this.getSelectedTank());\n    }\n\n    rangeSelected = (start, end) => {\n        let rh = new RangeHelper();\n        this.setState({\n            rangeIndex: new RangeHelper().getRanges().length - 1,\n            index: null, hours: null, start: start, end: end\n        })\n        rh.getRangeFromTo(start, end, this.rangeReady, this.getSelectedTank());\n    }\n\n    tankSelected = (tank) => {\n        setDataFilteredTank(tank);\n        // update the data according to the last selection\n        if (this.state.start !== null) {\n            this.rangeSelected(this.state.start, this.state.end);\n        }\n        else {\n            this.hoursSelected(this.state.hours, this.state.index);\n        }\n    }\n\n    getSelectedTank = () => {\n        return getDataFilteredTank();\n    }\n\n    rangeReady = (range) => {\n        this.setState({ tableReadings: range, rangeReady: true });\n    }\n\n    render() {\n        let height = this.props.fromDashboard === true ? '' : '120%';\n\n        if (this.state.rangeReady === false) {\n\n            return (\n                <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                    <Col md={12}>\n                        <Card\n                            hCenter={true}\n                            title=\"Loading Data...\"\n                            content={<center><Spinner /></center>}\n                        /></Col>\n                </div>\n            )\n        }\n\n        return (\n\n            <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: height }}>\n\n                <TableList\n                    rangeReadings={getFilteredReadings(this.state.tableReadings, \"\")}\n                    title={translate(\"latestData\")}\n                    rangeButtons={<RangeView\n                        hoursSelected={this.hoursSelected}\n                        rangeSelected={this.rangeSelected}\n                        tankSelected={this.tankSelected}\n                        getSelectedTank={this.getSelectedTank} />}\n                    category={new RangeHelper().getSelectedString(this.state.rangeIndex)} />\n            </div>\n        )\n    }\n}\n\nexport default Data;\n","import React, { Component } from 'react'\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from 'google-maps-react';\n\nexport class MapContainer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n        };\n\n        this.activeMarkerTitle = \"\";\n    }\n\n\n    onMarkerClick = (props, marker, e) => {\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMouseOver = (props, marker, e) => {\n        if (this.activeMarkerTitle === marker.title) {\n            return;\n        }\n        else {\n            this.activeMarkerTitle = marker.title;\n        }\n        this.setState({\n            selectedPlace: props,\n            activeMarker: marker,\n            showingInfoWindow: true\n        });\n    }\n\n    onMapClicked = (props) => {\n        if (this.state.showingInfoWindow) {\n            this.setState({\n                showingInfoWindow: false,\n                activeMarker: null\n            })\n        }\n\n        this.activeMarkerTitle = \"\";\n    };\n\n    renderMarkers = (markers) => {\n        return (\n            markers.map((marker, index) => {\n                return <Marker\n                    onClick={this.onMarkerClick}\n                    onMouseover={this.onMouseOver}\n                    title={\"\" + index}\n                    info={marker.info} key={index}\n                    position={{ lat: marker.lat, lng: marker.lng }} />\n            }\n            ));\n    }\n\n    getCenter = (markers) => {\n        let lat = 0;\n        let lng = 0;\n        let ignore = 0;\n        for (let index in markers) {\n            if (markers[index].lat === 0 || markers[index].lng === 0){\n                ignore+=1;\n            }\n            lat += markers[index].lat;\n            lng += markers[index].lng;\n        }\n\n        // make sure we not dividing by 0\n        let div = (markers.length-ignore)!==0?(markers.length-ignore):1\n\n        return { lat: lat / div, lng: lng / div };\n    }\n\n    convertGpsPosition = (pos) => {\n        let lat = parseFloat(pos.lat.substring(0, 9), 10);\n        let lng = parseFloat(pos.lng.substring(0, 10), 10);\n\n        let latSign = (pos.lat[9] === \"N\") ? 1 : -1;\n        let lngSign = (pos.lng[10] === \"E\") ? 1 : -1;\n\n        return {\n            info: pos.info,\n            lat: (Math.floor(lat / 100) + ((lat % 100) / 60))*latSign,\n            lng: (Math.floor(lng / 100) + ((lng % 100) / 60))*lngSign\n        };\n    }\n\n    render() {\n        const style1 = {\n            height: this.props.height,\n            position: 'relative'\n        }\n        const style2 = {\n            width: '90%',\n            height: '90%',\n            position: 'relative'\n\n        }\n\n        let markers = [];\n        for (let index in this.props.markers) {\n            markers.push(this.convertGpsPosition(this.props.markers[index]));\n        }\n\n        return (\n            <div style={style1}>\n                <center><Map google={window.google}\n                    zoom={this.props.zoom} style={style2}\n                    onClick={this.onMapClicked}\n                    onReady={this.mapIsReady}\n                    initialCenter={this.getCenter(markers)}>\n\n                    {this.renderMarkers(markers)}\n\n                    <InfoWindow\n                        marker={this.state.activeMarker}\n                        visible={this.state.showingInfoWindow}>\n                        <div>\n                            {this.state.selectedPlace.info}\n                        </div>\n                    </InfoWindow>\n                </Map></center>\n            </div>\n        );\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: ('AIzaSyAugb6uKPRiLYNHII5GEgQxHVSTL73IUVk')\n})(MapContainer)","import React, { Component } from \"react\";\nimport { translate } from \"../../app/lang/lang\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport MapContainer from \"../../components/App/Map\"\nimport { Card } from \"../../components/Card/Card\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\";\nimport { Col, Table } from \"react-bootstrap\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport Spinner from \"../App/Spinner\"\n\nclass Locations extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = { lastTanksReadings: [] };\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  tick = () => {\n    if (isAppReady()) {\n      this.setState({ lastTanksReadings: new TanksReading().getLevelMonitoring(\"name\") });\n      clearInterval(this.timer);\n    }\n  }\n\n  renderInfo = (reading) => {\n    let tt = new TanksTable();\n    let tank = tt.getTank(reading.imei);\n\n    return (\n      <Table striped bordered condensed hover>\n        <tbody>\n          <tr>\n            <td><center>Tank Name</center></td>\n            <td><center>{tank.name}</center></td>\n          </tr>\n          <tr>\n            <td><center>Building</center></td>\n            <td><center>{tank.building}</center></td>\n          </tr>\n        </tbody>\n      </Table>\n    )\n  }\n\n  getMarkers = () => {\n    let filterStr = this.props.filterStr;\n    if (filterStr === null || filterStr === undefined) {\n      filterStr = \"\";\n    }\n    let markers = [];\n    let readings = getFilteredReadings(this.state.lastTanksReadings, filterStr);\n    for (let index in readings) {\n      let info = this.renderInfo(readings[index]);\n      markers.push({\n        info: info,\n        lat: readings[index].gps.lat,\n        lng: readings[index].gps.long\n      })\n    }\n\n    return markers;\n  }\n\n  render() {\n\n    let markers = this.getMarkers();\n    let contentHeight = this.props.fromDashboard === true ? '' : '120%';\n\n    if (markers.length === 0) {\n      return (\n        <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: contentHeight }}>\n\n          <Col md={12}>\n            <Card\n              hCenter={true}\n              title=\"Loading Location...\"\n              content={<center><Spinner /></center>}\n            /></Col>\n        </div>\n      )\n    }\n\n    let title = translate(\"tankLocation\");\n    if (markers.length > 1) {\n      title = translate(\"tanksLocations\")\n    }\n\n    let height = this.props.fromDashboard === true ? '40%' : '70%';\n    contentHeight = this.props.fromDashboard === true ? '' : '110%';\n\n    return (\n      <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: contentHeight }}>\n        <Col xs={12}>\n          <Card\n            hCenter={true}\n            statsIcon=\"fa fa-history\"\n            id=\"chartHours\"\n            title={title}\n            stats=\"Updated\"\n            content={<MapContainer height={height} markers={markers} zoom={13} />}\n          />\n        </Col>\n      </div>\n    );\n  }\n}\n\nexport default Locations;\n","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { StatsCard } from \"components/StatsCard/StatsCard.jsx\"\nimport TanksTable from \"../../app/db/TanksTable.jsx\"\nimport { LogInHelper } from \"app/logInHelper\";\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport { renderTanks, renderFilterTanksCard } from \"../Tanks/Tanks.jsx\"\nimport Graph from \"../Graph/Graph\";\nimport Data from \"../Data/Data\";\nimport Locations from \"../Location/Locations\";\nimport { getFilteredReadings } from \"../../app/readingsHelper\"\nimport { isAppReady, getBackgroundColor } from \"../../app/adminHelper\"\nimport Spinner from \"../App/Spinner\"\n//import logo from \"assets/img/orbitBanner.png\";\n\nclass Dashboard extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tanks: [],\n      lastTanksReadings: [],\n      filterStr: \"\"\n    }\n    this.getRangeReadingOnce = true;\n    this.tickToggle = true;\n  }\n\n  componentDidMount() {\n    //update reading timer\n    this.timer = setInterval(this.tick, 35000);\n    this.fastTimer = setInterval(this.fastTick, 250);\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n    clearInterval(this.fastTimer);\n  }\n\n  tick = () => {\n    if (this.tickToggle) {\n      // update the last readings\n      new TanksReading().getLastReading(this.tanksReadingReady);\n    }\n    else {\n      // read the tanks table for alers\n      new TanksTable().start(this.dataIsReady, true);\n    }\n    this.tickToggle = this.tickToggle ? false : true;\n  }\n\n  fastTick = () => {\n    if (isAppReady()) {\n      this.dataIsReady();\n      clearInterval(this.fastTimer);\n    }\n  }\n\n  dataIsReady = () => {\n    // check is this is admin user or regulare\n    let tt = new TanksTable();\n    let logInHelper = new LogInHelper();\n    let customerId = logInHelper.getLoggedInCustomerId();\n    if (logInHelper.isAdmin()) {\n      this.setState({ tanks: tt.getTanks() });\n    }\n    else {\n      this.setState({ tanks: tt.getCustomerTanks(customerId) });\n    }\n\n    this.tanksReadingReady();\n\n  }\n\n  tanksReadingReady = () => {\n    let lm = new TanksReading().getLevelMonitoring(\"name\");\n    if (lm) {\n      this.setState({ lastTanksReadings: lm });\n    }\n  }\n\n  createLegend(json) {\n    var legend = [];\n    for (var i = 0; i < json[\"names\"].length; i++) {\n      var type = \"fa fa-circle text-\" + json[\"types\"][i];\n      legend.push(<i className={type} key={i} />);\n      legend.push(\" \");\n      legend.push(json[\"names\"][i]);\n    }\n    return legend;\n  }\n\n  renderTanks() {\n\n    let readings = getFilteredReadings(this.state.lastTanksReadings, this.state.filterStr);\n\n    return renderTanks(readings, false);\n  }\n\n\n  renderAlerts = () => {\n\n    // disabled for now\n    if (true){\n      return null;\n    }\n    let nh = new NotificationHelper();\n\n    let levelAlerts = nh.getLevelNotifications();\n    let hearBeatAlerts = nh.getHeartBeatNotification();\n\n    if (levelAlerts.length === 0 && hearBeatAlerts.length === 0) {\n      return null;\n    }\n\n    return (\n      <Col xs={12} onClick={() => this.props.history.push(`alerts`)}>\n        <StatsCard\n          statsText={\n            <div style={{ animation: 'scale 0.5s linear infinite alternate', color: 'red' }}>\n              <i className=\"pe-7s-gleam text-danger\">Alerts</i>\n            </div>}\n          statsValue={<div>\n            <br />\n            {levelAlertView(levelAlerts)}\n            {heartBeatView(hearBeatAlerts)}\n          </div>}\n          statsIcon={<i className=\"fa fa-clock-o\" />}\n          statsIconText=\"Click for more info\"\n        />\n      </Col>\n    );\n  }\n\n  render() {\n    if (this.state.tanks.length === 0) {\n      return (\n        <div className=\"content\" style={{ backgroundColor: getBackgroundColor(), height: '120%' }}>\n\n          <Card\n            hCenter={true}\n            title=\"Loading ...\"\n            content={<center><Spinner /></center>}\n          />\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"content\" style={{ backgroundColor: getBackgroundColor() }}>\n        {/*<center><img src={logo} alt=\"logo_image\" style={{ height: '8.5%' }} /></center>\n        <p />*/}\n        <Grid fluid >\n          {new LogInHelper().isAdmin() &&\n            <Row>\n              {renderFilterTanksCard(this)}\n            </Row>\n          }\n          <Row>\n            {this.renderAlerts()}\n          </Row>\n          <Row>\n            {this.renderTanks()}\n          </Row>\n          <Row>\n            <Graph fromDashboard={true} />\n          </Row>\n          <Row>\n            <Locations filterStr={this.state.filterStr} fromDashboard={true} />\n          </Row>\n          <Row>\n            <Data fromDashboard={true} />\n          </Row>\n          {/*\n          <Row>\n            <Col md={12}>\n              <Card\n                hCenter={true}\n                title=\"Monitoring Tanks Is Active\"\n                content={<center><Spinner /></center>}\n              />\n            </Col>\n          </Row>\n */}\n          {/*<Row>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-server text-warning\" />}\n                statsText=\"Capacity\"\n                statsValue=\"105GB\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-wallet text-success\" />}\n                statsText=\"Revenue\"\n                statsValue=\"$1,345\"\n                statsIcon={<i className=\"fa fa-calendar-o\" />}\n                statsIconText=\"Last day\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"pe-7s-graph1 text-danger\" />}\n                statsText=\"Errors\"\n                statsValue=\"23\"\n                statsIcon={<i className=\"fa fa-clock-o\" />}\n                statsIconText=\"In the last hour\"\n              />\n            </Col>\n            <Col xs={12} sm={6}>\n              <StatsCard\n                bigIcon={<i className=\"fa fa-twitter text-info\" />}\n                statsText=\"Followers\"\n                statsValue=\"+45\"\n                statsIcon={<i className=\"fa fa-refresh\" />}\n                statsIconText=\"Updated now\"\n              />\n            </Col>\n            \n            <Col md={4}>\n              <Card\n                statsIcon=\"fa fa-clock-o\"\n                title=\"Email Statistics\"\n                category=\"Last Campaign Performance\"\n                stats=\"Campaign sent 2 days ago\"\n                content={\n                  <div\n                    id=\"chartPreferences\"\n                    className=\"ct-chart ct-perfect-fourth\"\n                  >\n                    <ChartistGraph data={dataPie} type=\"Pie\" />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendPie)}</div>\n                }\n              />\n            </Col>\n          </Row>\n\n          <Row>\n            <Col md={6}>\n              <Card\n                id=\"chartActivity\"\n                title=\"2014 Sales\"\n                category=\"All products including Taxes\"\n                stats=\"Data information certified\"\n                statsIcon=\"fa fa-check\"\n                content={\n                  <div className=\"ct-chart\">\n                    <ChartistGraph\n                      data={dataBar}\n                      type=\"Bar\"\n                      options={optionsBar}\n                      responsiveOptions={responsiveBar}\n                    />\n                  </div>\n                }\n                legend={\n                  <div className=\"legend\">{this.createLegend(legendBar)}</div>\n                }\n              />\n            </Col>\n\n            <Col md={6}>\n              <Card\n                title=\"Tasks\"\n                category=\"Backend development\"\n                stats=\"Updated 3 minutes ago\"\n                statsIcon=\"fa fa-history\"\n                content={\n                  <div className=\"table-full-width\">\n                    <table className=\"table\">\n                      <Tasks />\n                    </table>\n                  </div>\n                }\n              />\n            </Col>\n          </Row>\n              \n          </Row>*/}\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from 'app/lang/lang.js'\nimport { industries } from 'app/lang/dic.js'\n\nexport class CustomerForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customerName: \"\", hideButtons: false, formMessage: null,\n            mailingList: [],\n            industry: industries[0]\n        };\n\n        this.style = { 'color': getPrimaryTextColor() };\n\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, formMessage: message });\n        }\n        else {\n            this.props.onHide();\n            this.setState({ hideButtons: false, formMessage: '' });\n        }\n    }\n\n    addNewCustomer() {\n        if (this.validatCustomer() === 'error'){\n            this.setState({ formMessage: 'Invalid customer name' });\n            return;\n        }\n        this.setState({ hideButtons: true, formMessage: 'Adding New Customer...' });\n        let customrtTable = new CustomersTable();\n        customrtTable.addNewCustomer(\n            this.state.customerName,\n            this.state.industry,\n            this.state.mailingList,\n            this.restCallBack);\n    }\n\n    updateCustomer() {\n        console.log(AppLogger( \"updating \" + this.props.customer.name));\n        let customrtTable = new CustomersTable();\n        customrtTable.updateCustomer(this.props.customer, this.restCallBack);\n    }\n\n    validateMail(mail) {\n        var re = /\\S+@\\S+\\.\\S+/;\n        if (mail && mail.length !== 0 && re.test(mail) === false) {\n            return 'error';\n        }\n\n        return 'success';\n    }\n\n    validatCustomer() {\n        if (this.state.customerName.length > 2) {\n            return 'success'\n        }\n        return 'error'\n    }\n\n    deleteMail = (index) => {\n        let tmpMailingList = this.state.mailingList;\n        if (this.props.customer) {\n            tmpMailingList = this.props.customer.mailing_list;\n        }\n        tmpMailingList.splice(index, 1);\n        this.setState({ mailingList: tmpMailingList });\n        if (this.props.customer) {\n            this.props.customer.mailing_list = tmpMailingList;\n        }\n    }\n\n    addMail = () => {\n        if (this.validateMail(this.state.mailAddrees) === 'error') {\n            this.setState({ formMessage: \"Mail is not valid\" });\n        }\n        else {\n            let tmpMailingList = this.state.mailingList;\n            tmpMailingList.push(this.state.mailAddrees);\n            this.setState({ mailingList: tmpMailingList, formMessage: null });\n            if (this.props.customer) {\n                this.props.customer.mailing_list = tmpMailingList;\n            }\n        }\n    }\n\n    createMailForm = (mail, index) => {\n\n        return (\n            <div align=\"left\" key={index}>\n                <Button style={{ margin: '3px' }} value={index}\n                    onClick={(e) => this.deleteMail(e.target.value)}>\n                    Remove\n                </Button>\n                &nbsp; {mail}\n            </div>\n        );\n    }\n\n    renderFormCustomerFiled() {\n\n        let mailingList = this.state.mailingList;\n        if (this.props.customer) {\n            mailingList = [...this.props.customer.mailing_list];\n        }\n\n        return (\n            <div>\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\"\n                        validationState={this.validatCustomer()}>\n                        <center><ControlLabel style={this.style}>{translate('customerName')}</ControlLabel></center>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={translate('customerName')}\n                            onChange={(e) => { this.setState({ customerName: e.target.value, formMessage: null }) }}\n                        />\n                    </FormGroup>\n                }\n                {this.props.customer === null &&\n                    <FormGroup controlId=\"formBasicText\">\n                        <center><ControlLabel style={this.style}>{translate('industry')}</ControlLabel></center>\n                        <FormControl componentClass=\"select\" onChange={(e) => this.setState({ industry: e.target.value })}>\n                            {industries.map(function (name, index) {\n                                return <option key={index} value={name}>\n                                    {translate(name)}\n                                </option>\n                            })}\n                        </FormControl>\n                    </FormGroup>\n                }\n                {\n                    mailingList.length > 0 && <center><ControlLabel style={this.style}>Alerts Mails</ControlLabel></center>\n                }\n                {\n                    mailingList.map((mail, index) => this.createMailForm(mail, index))\n                }\n                <hr/>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validateMail()}>\n                    <center><ControlLabel style={this.style}>{translate('mailAddress')}</ControlLabel></center>\n                    <FormControl\n                        type=\"email\"\n                        placeholder={translate('mailAddress')}\n                        onChange={(e) => { this.setState({ mailAddrees: e.target.value, formMessage: null }) }}\n                    />\n                </FormGroup>\n                <center><Button\n                    onClick={(index) => this.addMail(index)}>{\"Add Alerts Mail\"}\n                </Button></center>\n            </div>\n        )\n    }\n\n    createForm() {\n\n        return (\n            <form>\n                {this.renderFormCustomerFiled()}\n                <center><div>{this.state.formMessage}</div></center>\n            </form>\n        );\n    }\n\n    deleteCustomer() {\n        console.log(AppLogger( \"deleteCustomer \" + this.props.customer.id));\n\n        let customrtTable = new CustomersTable();\n        customrtTable.deleteCustomer(this.props.customer.id);\n        this.props.onHide();\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>{translate('cancel')}</Button>\n                {this.props.customer == null ?\n                    <Button onClick={() => this.addNewCustomer()}>{translate('add')}</Button> :\n                    <Button onClick={() => this.updateCustomer()}>{translate('update')}</Button>}\n            </div>\n        );\n    }\n\n    render() {\n        let addnewCustomerText = translate('addNewCustomer');\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        {this.props.customer ?\n                            \"Manage Customer - \" + this.props.customer.name :\n                            addnewCustomerText}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default CustomerForm;","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport UsersTable from \"../../app/db/UsersTable\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\n\nexport class UsersForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { userName: \"\",password:\"\", hideButtons: false, settingMessage: null };\n\n        this.style = { 'color': getPrimaryTextColor() };\n    }\n\n    restCallBack = (message) => {\n        if (message) {\n            this.setState({ hideButtons: false, settingMessage: message });\n        }\n        else {\n            this.setState({ hideButtons: false, settingMessage: \"done\" });\n            this.props.onHide();\n        }\n    }\n\n    addNewUser() {\n        this.setState({ hideButtons: true, settingMessage: translate('addingNewUser') });\n        let usersTable = new UsersTable();\n        usersTable.add(\n            this.state.userName,\n            this.state.password,\n            this.props.customer.id,\n            this.props.customer.name,\n            this.restCallBack);\n    }\n\n    validate = (str) => {\n        if ((str.length > 2) && (str.indexOf(' ')) === -1) {\n            return 'success'\n        }\n        else{\n            return 'error';\n        }\n    }\n\n    validatUser() {\n        return this.validate(this.state.userName);\n    }\n\n    validatPass = () => {\n        return this.validate(this.state.password);\n    }\n\n    renderFormUsersFiled() {\n\n        return (\n            <div>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatUser()}>\n                    <center><ControlLabel style={this.style}>User Name</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"User Name\"\n                        onChange={(e) => { this.setState({ userName: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n                <FormGroup controlId=\"formBasicText\"\n                    validationState={this.validatPass()}>\n                    <center><ControlLabel style={this.style}>Password</ControlLabel></center>\n                    <FormControl\n                        type=\"text\"\n                        placeholder=\"Password\"\n                        onChange={(e) => { this.setState({ password: e.target.value, settingMessage: null }) }}\n                    />\n                </FormGroup>\n            </div>\n        )\n    }\n\n    createForm() {\n        return (\n            <form>\n                {this.renderFormUsersFiled()}\n                <center><div>{this.state.settingMessage}</div></center>\n            </form>\n        );\n    }\n\n    renderButtons() {\n        if (this.state.hideButtons === true) {\n            return null;\n        }\n        return (\n            <div>\n                <Button onClick={this.props.onHide}>Cancel</Button>\n                {this.validatUser() === 'success' && this.validatPass() === 'success' &&\n                    <Button onClick={() => this.addNewUser()}>Add</Button>\n                }\n            </div>\n        );\n    } \n\n    render() {\n        console.log(AppLogger( \"render\"));\n        return (\n            <Modal {...this.props} bsSize=\"small\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\" style={this.style}>\n                        Add New User\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Footer>\n                    {this.createForm()}\n                </Modal.Footer>\n                <Modal.Footer>\n                    {this.renderButtons()}\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default UsersForm;","import React from \"react\";\nimport {\n    Modal, Button, FormGroup, FormControl, ControlLabel,\n    DropdownButton, MenuItem\n} from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { AppLogger } from \"../../app/Logger\";\nimport { liquids, sensors } from 'app/lang/dic.js'\nimport { translate } from \"../../app/lang/lang\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nclass SettingsModal extends React.Component {\n\n    render() {\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.props.title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.props.text.map((text, index) =>\n                        <div key={index}>{text}</div>\n                    )}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n\nexport class TankForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            imei: \"\",\n            phone: '0000',\n            name: \"\",\n            building: \"\",\n            liquid_type: liquids[0],\n            sensor_type: sensors[0],\n            capacity: 0,\n            high: 0,\n            iccid: '12345', //default\n            sampling_interval: 0,\n            heartbeat_timeout: (60 * 60000),\n\n            // settings modal\n            showSettingsModal: false,\n            settingsModalText: [],\n            level_alerts: [],\n\n            simConfigurationIndex: 0 // 0 for local sim 1 for monogoto\n        };\n\n        this.message = null;\n\n        // form place holders\n        this.imeiPh = \"Tank ID (IMEI)\";\n        this.iccidPh = \"Thing ICCID\";\n        this.phoneNumberPh = \"Tank Phone number\";\n        this.namePh = \"Tank Name\";\n        this.buildingPh = \"Building Name\"\n        this.capacityPh = \"Capacity\";\n        this.highPh = \"Hight\";\n        this.sampleIntervalPh = \"Sample Interval\";\n\n        this.runTimer = true;\n\n        // sim config\n        this.simConfigurationTitle = [\n            \"Configuring Local SIM \",\n            \"Configuring Monogoto SIM \"];\n    }\n\n    validateForm() {\n        if (this.state.imei.length !== 15 && this.state.imei.length !== 16) {\n            return \"Invalid IMEI - length must be 15 or 16 current length is \" + this.state.imei.length;\n        }\n\n        if (this.state.simConfigurationIndex === 1 && this.state.iccid.length < 5) {\n            return \"Invalid iccid length, current length \" + this.state.iccid.length;\n        }\n\n        if (this.state.sampling_interval < 60) {\n            return \"Invalid Sampling Interval - value is less the 60 seconds\";\n        }\n\n        if (this.state.name === \"\") {\n            return \"Invalid tank name - name can't be empty\";\n        }\n\n        if (this.state.capacity === 0) {\n            return \"Invalid tank capacity - capacity can't be 0\";\n        }\n\n        if (this.state.high === 0) {\n            return \"Invalid tank high - high can't be 0\";\n        }\n\n        return null;\n    }\n\n    updateSettingsTimeOut = () => {\n        this.setState({ showSettingsModal: false, settingsModalText: [] });\n        this.props.onHide();\n        clearInterval(this.timer);\n    }\n\n    updateSettingsModal = (show, text) => {\n        console.log(AppLogger( \"updateSettingsModal \" + show));\n        console.log(AppLogger( \"updateSettingsModal \" + this.state.settingsModalText));\n        console.log(AppLogger( \"updateSettingsModal \" + text));\n        let textArray = this.state.settingsModalText.slice(0, this.state.settingsModalText.length);\n        textArray.push(text);\n        if (!show) { // close the modal after 2 seconds\n            this.setState({ settingsModalText: textArray });\n            this.timer = setInterval(this.updateSettingsTimeOut, 5000);\n        }\n        else {\n            this.setState({ showSettingsModal: show, settingsModalText: textArray });\n        }\n    }\n\n    addTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"done.\");\n            if (this.state.simConfigurationIndex === 0) {\n                this.configureThingDone();\n            }\n            else {\n                this.configureThing(this.setServerIp);\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Failed to add tank\");\n        }\n    }\n\n    addNewTank() {\n        console.log(AppLogger( \"addNewTank\"));\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.addTank(this.addTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Adding Tank to DB...\");\n    }\n\n    updateTankCallBack = (succedded) => {\n        if (succedded) {\n            this.updateSettingsModal(true, \"Updating Tank DB...Done\");\n            if (this.samplingIntervalChanged) { // update if interval changed\n                this.configureThing(this.setInterval);// update the thing\n            }\n            else {\n                this.updateSettingsModal(false, \"Setting thing done.\");\n            }\n        }\n        else {\n            this.updateSettingsModal(false, \"Fail to update tank\");\n        }\n    }\n\n    updateTank() {\n        console.log(AppLogger( \"updateTank \"));\n\n        // check if this is \n        let validateString = this.validateForm();\n\n        if (validateString) {\n            alert(validateString);\n            return;\n        }\n\n        let tt = new TanksTable();\n        tt.updateTank(this.updateTankCallBack, this.state, this.props.customer.id);\n\n        this.updateSettingsModal(true, \"Updating Tank DB...\");\n    }\n\n    liquidSelected = (value) => {\n        let liquid = liquids[value]\n        this.setState({ liquid_type: liquid });\n    }\n\n    sensorSelected = (value) => {\n        let sensor = sensors[value]\n        this.setState({ sensor_type: sensor });\n    }\n\n    renderIccdAndPhone = () => {\n        if (this.state.simConfigurationIndex === 1) {\n            return (\n                <div>\n                    <ControlLabel>Tank ICCID</ControlLabel>\n                    {\n                        !this.props.tank &&\n                        <div>\n                            <FormControl\n                                type=\"text\"\n                                placeholder={this.iccidPh}\n                                onChange={(e) => this.setState({ iccid: e.target.value })}\n                            />\n                        </div>\n                    }\n                    {this.props.tank && <p> {this.props.tank.iccid}</p>}\n                    <ControlLabel>Phone number</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={this.phoneNumberPh}\n                        onChange={(e) => this.setState({ phone: e.target.value })}\n                    />\n                </div>)\n        }\n        else {\n            return null;\n        }\n    }\n\n    renderTankFileds() {\n        if (this.props.customer === null) {\n            return null;\n        }\n\n        return (\n            <FormGroup controlId=\"formBasicText\">\n                <ControlLabel>Tank ID (IMEI)</ControlLabel>\n                {!this.props.tank &&\n                    <div>\n                        <FormControl\n                            type=\"text\"\n                            placeholder={this.imeiPh}\n                            onChange={(e) => this.setState({ imei: e.target.value })}\n                        />\n                    </div>\n                }\n                {this.props.tank && <p> {this.props.tank.imei}</p>}\n                {this.renderIccdAndPhone()}\n                <ControlLabel>Tank Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.namePh}\n                    onChange={(e) => this.setState({ name: e.target.value })}\n                />\n                <ControlLabel>Building Name</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.buildingPh}\n                    onChange={(e) => this.setState({ building: e.target.value })}\n                />\n                <ControlLabel>Tank Capacity (in liters)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.capacityPh}\n                    onChange={(e) => this.setState({ capacity: parseInt(e.target.value, 10) })}\n                />\n                <ControlLabel>Tank Hight (cm)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.highPh}\n                    onChange={(e) => this.setState({ high: parseFloat(e.target.value, 10) })}\n                />\n                <ControlLabel>Sample Interval (in second, min 60)</ControlLabel>\n                <FormControl\n                    type=\"text\"\n                    placeholder={this.sampleIntervalPh}\n                    onChange={(e) => {\n                        this.setState({ sampling_interval: parseInt(e.target.value, 10) });\n                        this.samplingIntervalChanged = true;\n                    }}\n                />\n                <div></div>\n                <ControlLabel style={this.style}>{translate('liquid')}</ControlLabel>\n                <br />\n                <DropdownButton\n                    title={translate(this.state.liquid_type)}\n                    id=\"liquidType\">\n                    {liquids.map((liquid, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.liquidSelected}>{translate(liquid)}</MenuItem>\n                    )}\n                </DropdownButton>\n                <br/>\n                <ControlLabel style={this.style}>{translate('sensor')}</ControlLabel>\n                <br/>\n                <DropdownButton\n                    title={this.state.sensor_type + 'M'}\n                    id=\"sensorType\">\n                    {sensors.map((sensor, index) =>\n                        <MenuItem eventKey={index} key={index} onSelect={this.sensorSelected}>{sensor}M</MenuItem>\n                    )}\n                </DropdownButton>\n            </FormGroup>\n        )\n    }\n\n    switchSimConfig = () => {\n        this.setState({ simConfigurationIndex: this.state.simConfigurationIndex === 0 ? 1 : 0 })\n    }\n\n    renderFormTitle() {\n        if (this.props.customer) {\n            let title = \"Adding new tank to - \" + this.props.customer.name;\n            if (this.props.tank) {\n                return \"Updating Tank - \" + this.props.tank.name;\n            }\n\n            return (\n                <div>\n                    <div>\n                        {title}\n                    </div>\n                    <div>\n                        {this.simConfigurationTitle[this.state.simConfigurationIndex]}\n                        <Button onClick={this.switchSimConfig}>Switch</Button>\n                    </div>\n                </div>\n            )\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    getToken = (callback) => {\n        let json = {\n            \"UserName\": \"guy@orbitmonitoring.com\", \"Password\": \"mono123!\"\n        };\n\n        let uri = 'https://console.monogoto.io/Auth';\n\n        axios.post(uri, json).then(response => {\n            console.log(AppLogger( \"getToken succedded\"));\n            this.updateSettingsModal(true, \"done.\");\n            this.token = response.data.token;\n            callback && callback();\n        }).catch(error => {\n            console.log(AppLogger( error));\n            this.updateSettingsModal(false, \"Error on getting token\");\n        });\n    }\n\n    sendSemsToThing = (message, callback) => {\n        var config = {\n            headers: { 'Authorization': \"Bearer \" + this.token }\n        };\n\n        let json = {\n            \"Message\": message, \"From\": this.state.phone\n        };\n\n        let uri = \"https://console.monogoto.io/thing/ThingId_ICCID_\" + this.state.iccid + \"/sms\";\n\n        console.log(AppLogger( \"Sending thing API - \" + json.Message + \" \" + json.From));\n\n        axios.post(uri, json, config).then(response => {\n            console.log(AppLogger( \"testApi succedded\"));\n            this.updateSettingsModal(true, \"done.\");\n            callback && callback();\n        }).catch(error => {\n            console.log(AppLogger( error));\n            this.updateSettingsModal(false, \"error on configure Modem\");\n        }\n        );\n    }\n\n    configureThing = (nextFunction) => {\n        console.log(AppLogger( \"configureThing\"));\n        this.updateSettingsModal(true, \"getting token...\");\n        // first get the token\n        this.getToken(nextFunction);\n    }\n\n    setServerIp = () => {\n        console.log(AppLogger( \"setServerIp\"));\n        this.updateSettingsModal(true, \"Setting server IP...\");\n        // configure the server IP\n        this.sendSemsToThing(\"pw123456,server=18.214.154.46,5005\", this.setServerIpDone);\n    }\n\n    setServerIpDone = () => {\n        console.log(AppLogger( \"setServerIpDone\"));\n        this.nextFunction = this.setProtocol;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setProtocol = () => {\n        this.updateSettingsModal(true, \"Setting protocol...\");\n        this.sendSemsToThing(\"pw123456,protocol=udp\", this.setProtocolDone);\n    }\n\n    setProtocolDone = () => {\n        console.log(AppLogger( \"setProtocolDone\"));\n        this.nextFunction = this.setInterval;\n        this.timer = setInterval(this.smsTimeOut, 15000);\n    }\n\n    setInterval = () => {\n        console.log(AppLogger( \"setInterval\"));\n        this.updateSettingsModal(true, \"Setting interval...\");\n        this.sendSemsToThing(\"pw123456,interval=\" + this.state.sampling_interval + \"s,\" + this.state.sampling_interval + \"s,0m,0d\", this.configureThingDone);\n    }\n\n    configureThingDone = () => {\n        console.log(AppLogger( \"configureThingDone\"));\n        this.updateSettingsModal(false, \"Setting thing done.\");\n    }\n\n    smsTimeOut = () => {\n        clearInterval(this.timer);\n        this.nextFunction && this.nextFunction();\n    }\n\n\n    updateData = () => {\n        if (this.props.tank) {\n            let liquidTypeIndex = 0;\n            let sensorTypeIndex = 0;\n            if (this.props.tank) {\n                this.imeiPh = this.props.tank.imei;\n                this.iccidPh = this.props.tank.iccid;\n                this.phoneNumberPh = this.props.tank.phone;\n                this.namePh = this.props.tank.name;\n                this.buildingPh = this.props.tank.building;\n                this.capacityPh = this.props.tank.capacity;\n                this.highPh = this.props.tank.high;\n                this.sampleIntervalPh = this.props.tank.sampling_interval;\n                for (let index in liquids) {\n                    if (liquids[index] === this.props.tank.liquid_type) {\n                        liquidTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                for (let index in sensors) {\n                    if (sensors[index] === this.props.tank.sensor_type) {\n                        sensorTypeIndex = parseInt(index, 10);\n                        break;\n                    }\n                }\n\n                this.setState({\n                    imei: this.imeiPh,\n                    phone: this.phoneNumberPh,\n                    name: this.namePh,\n                    building: this.buildingPh,\n                    capacity: this.capacityPh,\n                    high: this.highPh,\n                    iccid: this.iccidPh,\n                    sampling_interval: this.sampleIntervalPh,\n                    liquid_type: liquids[liquidTypeIndex],\n                    sensor_type: sensors[sensorTypeIndex]\n                })\n            }\n        }\n        clearInterval(this.timer);\n    }\n\n    render() {\n        console.log(AppLogger( \"render\"));\n\n        if (this.props.show === true) {\n            if (this.runTimer) {\n                this.timer = setInterval(this.updateData, 1000);\n                this.runTimer = false;\n                this.samplingIntervalChanged = false;\n            }\n        }\n        else {\n            this.runTimer = true;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.renderFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <form>\n                        {this.renderTankFileds()}\n                    </form>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Cancel</Button>\n                    {this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.updateTank()}>Update</Button>}\n                    {!this.props.tank &&\n                        <Button bsStyle=\"success\" onClick={() => this.addNewTank()}>Add</Button>}\n                </Modal.Footer>\n                <SettingsModal\n                    show={this.state.showSettingsModal}\n                    title={\"Setting Tank\"}\n                    text={this.state.settingsModalText} />\n            </Modal>\n        );\n    }\n}\n\nexport default TankForm;\n","import React from \"react\";\nimport { Grid, Row, Col, Button, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { CustomerForm } from \"views/Admin/CustomerForm\"\nimport { UsersForm } from \"views/Admin/UsersForm\"\nimport { AppLogger } from \"../../app/Logger\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryTextColor } from 'app/adminHelper'\nimport { translate } from \"../../app/lang/lang\";\nimport { TankForm } from \"views/Admin/TankForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\n\nexport default class Customers extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            customers: [],\n            showCustomersModal: false,\n            showTankForm: false,\n            showUsersModal: false,\n            selectedCustomer: null,\n            filterStr: \"\"\n        };\n\n        let color = getPrimaryTextColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal', 'margin': '3px' };\n    }\n\n    componentDidMount() {\n        this.readCustomers();\n    }\n\n    customerInfoReady = () => {\n        console.log(AppLogger( \"customerInfoReady\"));\n        this.setState({ customers: new CustomersTable().getCustomers() });\n    }\n\n    readCustomers() {\n        new CustomersTable().start(this.customerInfoReady, true);\n    }\n\n    readTanks = () => {\n        new TanksTable().start(null, true);\n    }\n\n    operationCallBack = () => {\n        this.readCustomers();\n    }\n\n    closeCustomersModal() {\n        this.readCustomers();\n        this.setState({ showCustomersModal: false, selectedCustomer: null });\n    }\n\n    closeUsersModal() {\n        this.setState({ showUsersModal: false, selectedCustomer: null });\n    }\n\n    closeTankForm() {\n        this.readTanks();\n        this.setState({ showTankForm: false, selectedCustomer: null });\n    }\n\n    deleteCustomer(customer) {\n        let confirmText = 'Deleting Customrt: Are you sure you want to delete ' + customer.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            console.log(AppLogger( \"deleteCustomer \" + customer.name));\n\n            let customrtTable = new CustomersTable();\n            customrtTable.deleteCustomer(customer.id, this.operationCallBack);\n        }\n    }\n\n    addUser(customer) {\n        this.setState({ showUsersModal: true, selectedCustomer: customer });\n    }\n\n    addTank(customer) {\n        this.setState({ showTankForm: true, selectedCustomer: customer });\n    }\n\n    editCustomer = (customer) => {\n        this.setState({ showCustomersModal: true, selectedCustomer: customer })\n    }\n\n    renderManageCustomersButton(customer, index) {\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={\"Settings\"}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" style={this.buttonStyle} onClick={() => this.addUser(customer)}>Add User</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.addTank(customer)}>Add Tank</MenuItem>\n                <MenuItem eventKey=\"3\" onClick={() => this.editCustomer(customer)}>Edit Customer</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"4\" onClick={() => this.deleteCustomer(customer)}>Delete Customer</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col xs={6}>\n                <Card\n                    id={\"filterCustomers\"}\n                    title=\"Filter Customers\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"Customer Name\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n    getFilteredCustomers = () => {\n        if (this.state.customers.length === 0 || this.state.filterStr.length === 0) {\n            return this.state.customers;\n        }\n\n        let customers = [...this.state.customers];\n        for (let index = customers.length - 1; index >= 0; index--) {\n            //console.log(AppLogger(\"getFilteredCustomers index \" + index);\n            let name = customers[index].name;\n            //console.log(AppLogger(\"getFilteredCustomers name \" + name);\n            //console.log(AppLogger(\"getFilteredCustomers filter \" + this.state.filterStr);\n            if (name.search(this.state.filterStr) === -1) {\n                customers.splice(index, 1);\n            }\n        }\n\n        return customers;\n    }\n\n    renderCustomers() {\n        //console.log(AppLogger( \"rendring customers\");\n\n        let filteredCustomers = this.getFilteredCustomers();\n\n        return (\n            filteredCustomers.map((item, index) =>\n                <Col xs={6} md={3} key={index}>\n                    <Card\n                        hCenter={true}\n                        statsIcon=\"fa\"\n                        id=\"ManageCustomer\"\n                        title={\n                            <div>\n                                <div>{item.name}</div>\n                            </div>}\n                        category={\n                            <object>\n                                {translate('industry')}\n                                <br />\n                                {item.industry}\n                            </object>\n                        }\n                        stats={null}\n                        content={<center>{this.renderManageCustomersButton(item, index)}</center>}\n                    />\n                </Col>\n            )\n        );\n    }\n\n    renderAddCustomrtButton() {\n        return (\n            <center>\n                <Button bsSize=\"large\" bsStyle=\"primary\" style={this.buttonStyle} className=\"pe-7s-add-user\"\n                    onClick={() => this.setState({ showCustomersModal: true, customer: null })}>\n                    {\" \"}Add New Customer\n                </Button>\n            </center>\n        );\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        <Col xs={12}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"addCustomer\"\n                                title=\"New Customer\"\n                                category=\"\"\n                                stats={null}\n                                content={this.renderAddCustomrtButton()}\n                            />\n                        </Col>\n                    </Row>\n                    <Row>\n                        {this.renderCustomers()}\n                    </Row>\n                </Grid>\n                <CustomerForm show={this.state.showCustomersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeCustomersModal()} />\n                <UsersForm show={this.state.showUsersModal}\n                    customer={this.state.selectedCustomer}\n                    onHide={() => this.closeUsersModal()} />\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    customer={this.state.selectedCustomer} />\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Modal, Button, FormGroup, FormControl, ControlLabel } from \"react-bootstrap\";\nimport { AppLogger } from \"../../app/Logger\";\nimport TanksTable from \"../../app/db/TanksTable\";\n//import { translate } from \"../../app/lang/lang\";\n\nexport class AlertsForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            at_level: -1,\n            alert: 0,\n            subject: \"\",\n            body: \"\",\n\n            numberOfAlerts: 0,\n            statusMessage: \"\"\n        };\n    }\n\n    createForm() {\n        return (\n            <form>\n                <FormGroup controlId=\"formBasicText\">\n                    <ControlLabel>Alert Level</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Alert Level in %\"}\n                        onChange={(e) => this.setState({ at_level: parseInt(e.target.value, 10), statusMessage:\"\" })}\n                    />\n                    <ControlLabel>Mail Subject</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Subject\"}\n                        onChange={(e) => this.setState({ subject: e.target.value , statusMessage:\"\"})}\n                    />\n                    <ControlLabel>Mail Body</ControlLabel>\n                    <FormControl\n                        type=\"text\"\n                        placeholder={\"Mail Body\"}\n                        onChange={(e) => this.setState({ body: e.target.value, statusMessage:\"\" })}\n                    />\n                </FormGroup>\n                <Button bsStyle=\"success\" style={{ margin: '3px' }} onClick={() => this.addAlert()}>Add New Alert</Button>\n                {this.state.statusMessage}\n            </form>\n        );\n    }\n\n    addAlert = () => {\n        let validate = this.validate()\n        if (validate !== 'ok') {\n            this.setState({ statusMessage: validate });\n            return;\n        }\n        else {\n            this.setState({ statusMessage: \"\" });\n        }\n\n        // find empty alert id\n        let alertId = 0;\n        for (let index = 1; index < 2000; index++) {\n            for (let alertIndex in this.props.level_alerts) {\n                if (this.props.level_alerts[alertIndex].alert === index){\n                    break;\n                }\n            }\n            alertId = index;\n        }\n\n        let alert = {\n            \"alert\": alertId,\n            \"at_level\": this.state.at_level,\n            \"mail\": {\n                \"subject\": this.state.subject,\n                \"body\": this.state.body\n            }\n        }\n        this.props.tank.level_alerts.push(alert);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n\n    getFormTitle() {\n        if (this.props.tank) {\n            return \"Tanks Alerts - \" + this.props.tank.name;\n        }\n        else {\n            return \"\";\n        }\n    }\n\n    delete = (index) => {\n        this.props.tank.level_alerts.splice(index, 1);\n        this.setState({ numberOfAlerts: this.props.tank.level_alerts.length });\n        this.updateAlerts();\n    }\n\n    renderAlerts = () => {\n        return (\n            <div>\n                {this.props.tank.level_alerts.length > 0 && <ControlLabel>Alerts</ControlLabel>}\n                {this.props.tank.level_alerts.map((alert, index) =>\n                    <div>\n                        Level - {alert.at_level}% Subject - {alert.mail.subject} Body - {alert.mail.body}\n                        <Button bsStyle=\"warning\" style={{ margin: '3px' }} value={index}\n                            onClick={(e) => this.delete(e.target.value)}>Delete</Button>\n                    </div>\n                )}\n                {this.props.tank.level_alerts.length > 0 && <hr />}\n            </div>\n        );\n    }\n\n    validate = () => {\n        if (this.state.at_level < 0 || this.state.at_level > 100) {\n            return 'invalid level - must be a number 0-100';\n        }\n        // check if this we have alert with the same level\n        for (let index in this.props.tank.level_alerts){\n            if (this.props.tank.level_alerts[index].at_level === this.state.at_level){\n                return \"invalid level - tank allready has alert in level \" + this.state.at_level + \"%\";\n            }\n        }\n\n        if (this.state.body.length === 0) {\n            return \"invalid body - body is empty\";\n        }\n        if (this.state.subject.length < 2) {\n            return \"invalid subject - subject is empty\";\n        }\n        return 'ok';\n    }\n\n    updateAlerts = () => {\n        let tt = new TanksTable();\n        let customer = this.props.tank.customer;\n        tt.updateTank(this.updateAlertsCallBack, this.props.tank, customer);\n    }\n\n    updateAlertsCallBack = (success) => {\n        if (success){\n            this.setState({statusMessage:\"Updating alerts succedded\"});\n        }\n        else{\n            this.setState({statusMessage:\"Updating alerts failed\"});\n        }\n        //this.props.onHide && this.props.onHide();\n    }\n\n    render() {\n        console.log(AppLogger( \"render\"));\n        if (this.props.tank === null) {\n            return null;\n        }\n\n        return (\n            <Modal {...this.props} bsSize=\"lg\" aria-labelledby=\"contained-modal-title-sm\">\n                <Modal.Header closeButton>\n                    <Modal.Title id=\"contained-modal-title-sm\">\n                        {this.getFormTitle()}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderAlerts()}\n                    {this.createForm()}\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button bsStyle=\"warning\" onClick={this.props.onHide}>Done</Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n\nexport default AlertsForm;","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport { getPrimaryTextColor, isAppReady } from 'app/adminHelper'\nimport TanksTable from \"../../app/db/TanksTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { TankForm } from \"views/Admin/TankForm\";\nimport { renderTanksParams } from \"views/Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\n\nexport default class Tanks extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showTankForm: false,\n            showAlerstForm: false,\n            filterStr: \"\",\n            tank: null,\n            customer: null,\n            tanks: []\n        };\n        let color = getPrimaryTextColor();\n        this.buttonStyle = { 'borderColor': color, 'color': color, 'whiteSpace': 'normal' };\n    }\n\n    componentDidMount() {\n        //update reading timer\n        this.timer = setInterval(this.tick, 250);\n    }\n\n    componentWillUnmount = () => {\n        clearInterval(this.timer);\n    }\n\n    tick = () => {\n        if (isAppReady()) {\n            this.tanksReady();\n            clearInterval(this.timer);\n        }\n    }\n\n    readTanks = () => {\n        let forceRead = true;\n        if (this.state.tanks.length === 0) {\n            forceRead = false;\n        }\n        let tt = new TanksTable();\n        tt.start(this.tanksReady, forceRead);\n    }\n\n    tanksReady = () => {\n        let tt = new TanksTable();\n        this.setState({ tanks: tt.getTanks().sort((a,b)=>a.name>b.name?1:-1) });\n    }\n\n    closeTankForm() {\n        this.setState({ showTankForm: false, tank: null, customer: null, tanks: [] });\n        let tt = new TanksTable();\n        tt.start(this.tanksReady, true);\n    }\n\n    editTank(tank) {\n        let ct = new CustomersTable();\n        let customer = ct.getCustomer(tank.customer);\n        this.setState({ showTankForm: true, tank: tank, customer: customer });\n    }\n\n    editAlert = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    deleteTank = (tank) => {\n        let confirmText = 'Deleting Tank: Are you sure you want to delete this tanks?';\n        if (window.confirm(confirmText)) {\n            let tt = new TanksTable();\n            tt.deleteTank(tank.imei, this.readTanks);\n        }\n    }\n\n    renderManageTankButton(tank, index) {\n        let title =\n            <div>\n                <div>{\"Settings\"}</div>\n            </div>;\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                style={this.buttonStyle}\n                bsSize=\"large\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.editTank(tank)}>Edit Tank</MenuItem>\n                <MenuItem eventKey=\"2\" onClick={() => this.editAlert(tank)}>Edit Alerts</MenuItem>\n                <MenuItem divider />\n                <MenuItem eventKey=\"3\" onClick={() => this.deleteTank(tank)}>Delete Tank</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    renderTanks = () => {\n        return (\n            this.state.tanks.map((tank, index) => {\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={renderTanksParams(tank, null, false)}\n                                content={<center>{this.renderManageTankButton(tank, index)}</center>}\n                            />\n                        </Col >\n                    )\n                }\n            }\n            )\n        )\n    }\n\n    render() {\n        let isAdmin = new LogInHelper().isAdmin();\n\n        if (!isAdmin) {\n            return null;\n        }\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <TankForm show={this.state.showTankForm}\n                    onHide={() => this.closeTankForm()}\n                    tank={this.state.tank}\n                    customer={this.state.customer} />\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()}/>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport { Grid, Row, Col, MenuItem, DropdownButton, FormGroup, FormControl } from \"react-bootstrap\";\nimport { Card } from \"components/Card/Card.jsx\";\nimport UsersTable from \"../../app/db/UsersTable\"\nimport CustomersTable from \"../../app/db/CustomersTable\"\nimport { LogInHelper } from \"app/logInHelper\";\n\nexport default class Users extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { users: [], filterStr: \"\" };\n    }\n\n    componentDidMount() {\n        let usersTable = new UsersTable();\n        usersTable.start(this.usersReadyCallBack, true);\n    }\n\n    usersReadyCallBack = () => {\n        let usersTable = new UsersTable();\n        this.setState({ users: usersTable.getUsers() });\n    }\n\n    deleteUser(user) {\n        let confirmText = 'Deleting User: Are you sure you want to delete ' + user.name + \" ?\"\n        if (window.confirm(confirmText)) {\n            let usersTable = new UsersTable();\n            usersTable.remove(user.name, this.usersReadyCallBack);\n        }\n    }\n\n    renderActions = (user, index) => {\n        let title = \" User Settings \";\n        return (\n            <DropdownButton\n                bsStyle=\"primary\"\n                bsSize=\"large\"\n                className=\"pe-7s-settings\"\n                title={title}\n                key={index}\n                id={`dropdown-basic-${index}`}\n            >\n                <MenuItem eventKey=\"1\" onClick={() => this.deleteUser(user)}>Delete User</MenuItem>\n            </DropdownButton>\n        );\n    }\n\n    isFiltered = (user, custeomrName) => {\n        if (this.state.filterStr.length !== 0 &&\n            user.name.search(this.state.filterStr) === -1 &&\n            custeomrName.search(this.state.filterStr) === -1\n        ) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n    renderUsers() {\n        return (\n            this.state.users.map((user, index) => {\n                let custeomrName = new CustomersTable().getCustomerName(user.customer_id);\n                if (this.isFiltered(user, custeomrName)) {\n                    return null;\n                }\n                else if (user.role.toLowerCase() !== 'admin') {\n                    return (\n                        <Col xs={12} sm={6} key={index}>\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"ManageUser\"\n                                title={\n                                    <div>{user.name}</div>\n                                }\n                                category=\"\"\n                                stats={\"Customer - \" + custeomrName}\n                                content={<center>{this.renderActions(user, index)}</center>}\n                            />\n                        </Col>\n                    )\n                }\n                else {\n                    return null;\n                }\n            }\n            ));\n    }\n\n    renderFilterCard() {\n        let logInHelper = new LogInHelper();\n        if (logInHelper.isAdmin() === false) {\n            return null\n        }\n\n        return (\n            <Col md={4}>\n                <Card\n                    id={\"filterUsers\"}\n                    title=\"Filter Users\"\n                    hCenter={true}\n                    content={\n                        <form>\n                            <FormGroup controlId=\"formBasicText\">\n                                <FormControl\n                                    type=\"text\"\n                                    value={this.state.value}\n                                    placeholder=\"User / Customer\"\n                                    onChange={(e) => this.setState({ filterStr: e.target.value })}\n                                />\n                            </FormGroup>\n                        </form>\n                    }\n                />\n            </Col>\n        );\n    }\n\n\n    render() {\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {this.renderFilterCard()}\n                    </Row>\n                    <Row>\n                        {this.renderUsers()}\n                    </Row>\n                </Grid>\n            </div>)\n    }\n}\n\n","import React from \"react\";\nimport { Grid, Row, Col, Button, Alert } from \"react-bootstrap\";\nimport { renderTanks } from \"../Tanks/Tanks.jsx\"\nimport TanksReading from \"../../app/db/TankReadings.jsx\";\nimport { isAppReady, getPrimaryTextColor } from 'app/adminHelper'\nimport { Card } from \"../../components/Card/Card\"\nimport { isTankFiltered, renderFilterTanksCard } from \"../Tanks/Tanks\";\nimport { AlertsForm } from \"./AlerstForm\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport TankCard from \"components/App/TankCard.jsx\"\nimport NotificationHelper from \"../../app/notificationHelper\"\nimport { levelAlertView, heartBeatView } from \"../Notifications/TanksNotifications\"\nimport Spinner from \"../App/Spinner\";\n\nexport default class Alerts extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { appIsredy: false , showAlerstForm: false, tank: null };\n        this.counter = 1;\n    }\n\n    componentDidMount() {\n        this.timer = setInterval(this.isAppReady, 1000);\n        this.isAppReady();\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timer);\n    }\n\n    isAppReady = () => {\n        if (isAppReady()) {\n            this.setState({ appIsredy: true });\n        }\n        \n        if (this.state.showAlerstForm === false && this.counter++ % 60 === 0) { // refresh view to show new alerts\n            this.setState({ appIsredy: false });\n        }\n    }\n\n    renderAlertsTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        return renderTanks(readings, true);\n    }\n\n    showAlertsForm = (tank) => {\n        this.setState({ showAlerstForm: true, tank: tank });\n    }\n\n    closeAlertsForm = () => {\n        this.setState({ showAlerstForm: false, tank: null, customer: null });\n    }\n\n    renderAlertsAndEdit = (tank) => {\n        let nh = new NotificationHelper();\n        let levelNotification = nh.getLevelNotificationsOnTank(tank);\n        let hearBeatNotification = nh.getHeartBeatNotificationForTank(tank);\n        let editAlert = <center><Button bsStyle=\"danger\" style={{ margin: '3px', color:getPrimaryTextColor() }} onClick={() => this.showAlertsForm(tank)}>Edit Alerts</Button></center>;\n        if (levelNotification.length === 0 && hearBeatNotification.length === 0) {\n            return (\n                <div>\n                    <Alert bsStyle=\"info\" className=\"alert-with-icon\">\n                        <center>\n                            <span data-notify=\"icon\" className=\"pe-7s-bell\" />\n                            <span data-notify=\"message\">No Alerts On This Tank<q>{alert.name}</q></span>\n                        </center>\n                    </Alert>\n                    {editAlert}\n                </div>\n            );\n        }\n        else {\n            return (\n                <div>\n                    {levelAlertView(levelNotification)}\n                    {heartBeatView(hearBeatNotification)}\n                    {editAlert}\n                </div>\n            )\n        }\n    }\n    \n\n    renderTanks = () => {\n        let readings = new TanksReading().getLevelMonitoring(\"name\");\n        return (\n            readings.map((reading, index) => {\n                let tt = new TanksTable();\n                let tank = tt.getTank(reading.imei);\n                if (tank === null) {\n                    return null;\n                }\n                let nh = new NotificationHelper();\n                let asAlerts = nh.getLevelNotificationsOnTank(tank).length!==0?true:false\n\n                if (isTankFiltered(tank, this.state.filterStr)) {\n                    return null;\n                }\n                else {\n                    let volume = parseInt(tank.capacity * reading.actual_level / 100, 10) + \" L\";\n                    return (\n                        < Col xs={12} md={4} key={index} >\n                            <Card\n                                hCenter={true}\n                                statsIcon=\"fa\"\n                                id=\"EditTank\"\n                                title={\n                                    <div>\n                                        <div>{tank.name}</div>\n                                    </div>}\n                                category=\"\"\n                                stats={this.renderAlertsAndEdit(tank)}\n                                content={<TankCard\n                                    value={reading.actual_level}\n                                    height={\"40%\"}\n                                    volume={volume}\n                                    asAlerts={asAlerts} />}\n                            />\n                        </Col>\n                    )\n                }\n            }\n            )\n        )\n    }\n\n\n    render() {\n        if (this.state.appIsredy === false) {\n            return (\n                <Card\n                    hCenter={true}\n                    title=\"Loading ...\"\n                    content={<center><Spinner/></center>}\n                />\n            );\n        }\n\n        return (\n            <div className=\"content\">\n                <Grid fluid>\n                    <Row>\n                        {renderFilterTanksCard(this)}\n                    </Row>\n                    <Row>\n                        {this.renderTanks()}\n                    </Row>\n                </Grid>\n                <AlertsForm show={this.state.showAlerstForm}\n                    tank={this.state.tank}\n                    onHide={() => this.closeAlertsForm()} />\n            </div>\n        );\n        /*\n                return (\n                    <div className=\"content\">\n                        <Grid fluid>\n                            <Row>\n                                {this.renderAlertsTanks()}\n                            </Row>\n                        </Grid>\n                    </div>) */\n    }\n\n}\n\n","import React from \"react\";\nimport {AppLogerMessages} from \"app/Logger\"\n\nexport default class Logger extends React.Component{\n    \n    render(){\n        return (\n            <div>\n                {AppLogerMessages().map((msg, index) => \n                    <div key={index}>\n                        { msg }\n                    </div>)\n                }\n            </div>\n        )\n    }\n}","import React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\n\nimport Card from \"components/Card/Card\";\nimport { iconsArray } from \"variables/Variables.jsx\";\n\nclass Icons extends Component {\n  render() {\n    return (\n      <div className=\"content\">\n        <Grid fluid>\n          <Row>\n            <Col md={12}>\n              <Card\n                title=\"202 Awesome Stroke Icons\"\n                ctAllIcons\n                category={\n                  <span>\n                    Handcrafted by our friends from{\" \"}\n                    <a\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      href=\"http://themes-pixeden.com/font-demos/7-stroke/index.html\"\n                    >\n                      Pixeden\n                    </a>\n                  </span>\n                }\n                content={\n                  <Row>\n                    {iconsArray.map((prop, key) => {\n                      return (\n                        <Col\n                          lg={2}\n                          md={3}\n                          sm={4}\n                          xs={6}\n                          className=\"font-icon-list\"\n                          key={key}\n                        >\n                          <div className=\"font-icon-detail\">\n                            <i className={prop} />\n                            <input type=\"text\" defaultValue={prop} />\n                          </div>\n                        </Col>\n                      );\n                    })}\n                  </Row>\n                }\n              />\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Icons;\n","\nimport React from \"react\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport { Redirect } from 'react-router-dom'\n\nexport default class LogOut extends React.Component {\n\n    componentDidMount() {\n        let logIn = new LogInHelper();\n        logIn.logOut();\n        window.location.reload();\n    }\n\n    render() {\n        return (\n            <div>\n                <Redirect to='/dashboard' />\n            </div>\n        );\n    }\n}","import Dashboard from \"views/Dashboard/Dashboard\";\nimport Customers from \"views/Admin/Customers\"\nimport Tanks from \"views/Admin/Tanks\"\nimport Users from \"views/Admin/Users\"\nimport Alerst from \"views/Admin/Alerts\"\nimport Logger from \"../views/Admin/Logger\";\nimport Icons from \"../views/Icons/Icons\"\nimport Graph from \"../views/Graph/Graph\"\nimport Data from \"../views/Data/Data\"\nimport Locations from \"../views/Location/Locations\"\nimport LogOut from \"./../views/App/LogOut\"\n\nconst dashboardRoutes = [\n  {\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"pe-7s-graph\",\n    component: Dashboard\n  },\n  {\n    path: \"/graph\",\n    name: \"Graph\",\n    icon: \"pe-7s-graph1\",\n    component: Graph\n  },\n  {\n    path: \"/data\",\n    name: \"Data\",\n    icon: \"pe-7s-note2\",\n    component: Data\n  },\n  {\n    path: \"/locations\",\n    name: \"Locations\",\n    icon: \"pe-7s-map-2\",\n    component: Locations\n  },\n  {\n    path: \"/logout\",\n    name: \"Log Out\",\n    icon: \"pe-7s-power\",\n    component: LogOut\n  },\n  //{\n  //  path: \"/user\",\n  //  name: \"User Profile\",\n  //  icon: \"pe-7s-user\",\n  //  component: UserProfile\n  //},\n  //{\n  //  path: \"/table\",\n  //  name: \"Table List\",\n  //  icon: \"pe-7s-note2\",\n  //  component: TableList\n  //},\n  //{\n  //  path: \"/typography\",\n  //  name: \"Typography\",\n  //  icon: \"pe-7s-news-paper\",\n  //  component: Typography\n  //},\n\n\n\n  {\n    path: \"/customers\",\n    name: \"Admin - Customers\",\n    icon: \"pe-7s-users\",\n    component: Customers,\n    show: \"admin\"\n  },\n  {\n    path: \"/tanks\",\n    name: \"Admin - Tanks\",\n    icon: \"pe-7s-server\",\n    component: Tanks,\n    show: \"admin\"\n  },\n  {\n    path: \"/users\",\n    name: \"Admin - Users\",\n    icon: \"pe-7s-users\",\n    component: Users,\n    show: \"admin\"\n  },\n  {\n    path: \"/alerts\",\n    name: \"Admin - Alerts\",\n    icon: \"pe-7s-gleam\",\n    component: Alerst,\n    show: 'admin'\n  },\n  {\n    path: \"/logger\",\n    name: \"Admin - logs\",\n    icon: \"pe-7s-rocket\",\n    component: Logger,\n    show: \"admin\"\n  },\n  { \n   path: \"/icons\", \n    name: \"Icons\", \n    icon: \"pe-7s-science\", \n    component: Icons,\n    show:\"admin\" \n   },\n  //{ path: \"/maps\", name: \"Maps\", icon: \"pe-7s-map-marker\", component: Maps },\n  //{\n  //  path: \"/notifications\",\n  //  name: \"Notifications\",\n  //  icon: \"pe-7s-bell\",\n  //  component: Notifications\n  //},\n  //{\n  //  upgrade: true,\n  ///  path: \"/upgrade\",\n  //  name: \"Upgrade to PRO\",\n  //  icon: \"pe-7s-rocket\",\n  //  component: Upgrade\n  //},\n  { redirect: true, path: \"/\", to: \"/dashboard\", name: \"Dashboard\" }\n];\n\nexport default dashboardRoutes;\n","import React, { Component } from \"react\";\nimport { Navbar } from \"react-bootstrap\";\n\nimport HeaderLinks from \"./HeaderLinks.jsx\";\nimport { getPrimaryColor, getPrimarySideColor } from \"../../app/adminHelper\"\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport logo from \"assets/img/orbitBanner3000.png\";\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n    this.mobileSidebarToggle = this.mobileSidebarToggle.bind(this);\n    this.state = {\n      sidebarExists: false\n    };\n  }\n  mobileSidebarToggle(e) {\n    if (this.state.sidebarExists === false) {\n      this.setState({\n        sidebarExists: true\n      });\n    }\n    e.preventDefault();\n    document.documentElement.classList.toggle(\"nav-open\");\n    //    var node = document.createElement(\"div\");\n    //    node.id = \"bodyClick\";\n    //    node.onclick = function() {\n    //      this.parentElement.removeChild(this);\n    //      document.documentElement.classList.toggle(\"nav-open\");\n    //    };\n    //    document.body.appendChild(node);\n  }\n  getBrand() {\n    var name;\n    dashboardRoutes.map((prop, key) => {\n      if (prop.collapse) {\n        prop.views.map((prop, key) => {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n          return null;\n        });\n      } else {\n        if (prop.redirect) {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        } else {\n          if (prop.path === this.props.location.pathname) {\n            name = prop.name;\n          }\n        }\n      }\n      return null;\n    });\n    return name;\n  }\n  render() {\n    let width = window.innerWidth;\n    let headerHeigth = '11.2%';\n    let showLogo = false;\n    let imageHeigth = '80%';\n    if (width < 991) {\n      showLogo = true;\n    }\n\n    if (true) {\n      return (\n        <Navbar fluid style={{ backgroundColor: getPrimaryColor() }} >\n          <Navbar.Toggle onClick={this.mobileSidebarToggle} />\n          {showLogo === true &&\n            <center style={{height: headerHeigth}}>\n              <a href=\"#pablo\">\n                <img src={logo} alt=\"logo_image\" style={{ height: imageHeigth, marginLeft:'10%', marginTop:'2%' }} />\n              </a>\n            </center>\n          }\n          {showLogo === false &&\n            <center style={{height: headerHeigth}}>\n              <a href=\"#pablo\" style={{ color: getPrimarySideColor() }}><b>{this.getBrand()}</b></a>\n            </center>\n          }\n        </Navbar>\n      );\n    }\n\n    return (\n      <Navbar fluid style={{ backgroundColor: getPrimaryColor() }} >\n        <Navbar.Header style={{ textAlign: 'center', width: '100%', float: 'none', display: 'inlineBlock' }}>\n          <Navbar.Brand>\n            <div >&nbsp;&nbsp;&nbsp;&nbsp;</div>\n          </Navbar.Brand>\n          <Navbar.Brand>\n            <a href=\"#pablo\" style={{ color: getPrimarySideColor(), height: headerHeigth }}><b>{this.getBrand()}</b></a>\n          </Navbar.Brand>\n          <Navbar.Brand style={{ position: 'absolute', width: '100%', left: '0', textAlign: 'center', margin: '0 auto' }}>\n            {showLogo === true && <img src={logo} alt=\"logo_image\" style={{ height: '10%' }} />}\n          </Navbar.Brand>\n          <Navbar.Toggle onClick={this.mobileSidebarToggle} />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <HeaderLinks />\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport logo from \"assets/img/orbitBanner3000.png\";\nimport { LogInHelper } from \"app/logInHelper\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { isAppReady } from 'app/adminHelper'\nimport { getMenuTextColor } from 'app/adminHelper'\nimport { getVersion } from '../../app/adminHelper'\n\n\nclass Sidebar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: window.innerWidth,\n      appIsReady: false\n    };\n  }\n  componentDidMount = () => {\n    this.timer = setInterval(this.checkIfAppIsReady, 1000);\n    this.checkIfAppIsReady();\n  }\n\n  componentWillUnmount = () => {\n    clearInterval(this.timer);\n  }\n\n  checkIfAppIsReady = () => {\n    if (isAppReady()) {\n      this.setState({ appIsReady: true });\n      clearInterval(this.timer);\n    }\n  }\n\n  activeRoute(routeName) {\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n  }\n  updateDimensions() {\n    this.setState({ width: window.innerWidth });\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n    //const sidebarBackground = {\n    //  backgroundImage: \"url(\" + imagine + \")\"\n    //};\n    let logInHelper = new LogInHelper();\n    let isAdmin = logInHelper.isAdmin();\n    let logInUser = logInHelper.getLogedInUser();\n\n    return (\n      <div\n        id=\"sidebar\"\n        className=\"sidebar\"\n        data-color={'primarySide'}\n      >\n        <div className=\"sidebar-background\" />\n        <div className=\"logo\" style={{ backgroundColor: 'white' }}>\n          <img src={logo} alt=\"logo_image\" style={{ height: '8.4%' }} />\n        </div>\n        <div className=\"sidebar-wrapper\">\n          <ul className=\"nav\">\n            {dashboardRoutes.map((prop, key) => {\n              let show = true;\n              if ((prop.show && prop.show === 'admin' && !isAdmin) ||\n                (prop.redirect && prop.redirect === true)) {\n                show = false;\n              }\n              if (show)\n                return (\n                  <li\n                    className={\n                      prop.upgrade\n                        ? \"active active-pro\"\n                        : this.activeRoute(prop.path)\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                    >\n                      <i className={prop.icon} style={{\n                        display: 'block',\n                        marginLeft: 'auto',\n                        marginRight: 'auto',\n                        width: '100%',\n                        color: getMenuTextColor()\n                      }} />\n                      <div>\n                        <center><h4 style={{ color: getMenuTextColor() }}><b>{prop.name}</b></h4></center>\n                      </div>\n                    </NavLink>\n                  </li>\n                );\n              return null;\n            })}\n            <center>\n              <hr />\n              <div style={{ color: getMenuTextColor() }}><b>{getVersion()}</b></div>\n              <br />\n              <div style={{ color: getMenuTextColor() }}><b>User Name - {logInUser}</b></div>\n              <hr />\n            </center>\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sidebar;\n","import { AppLogger } from \"app/Logger\";\nimport UsersTable from '../../app/db/UsersTable'\nimport { Cookies } from 'react-cookie';\nimport React from \"react\";\nimport { Modal, FormControl, Button } from 'react-bootstrap';\nimport { LogInHelper } from '../../app/logInHelper.jsx'\n\nexport default class LogIn extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = { isLogIn: false, showAlert: false, showButton: false, debugMessage: \"start\" }\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    componentDidMount() {\n        if (new LogInHelper().isLogIn()) {\n            this.setState({ isLogIn: true });\n        }\n\n        let ut = new UsersTable();\n        ut.start(this.usersTableReady, true);\n    }\n\n    usersTableReady = () => {\n        this.setState({ showButton: true });\n    }\n\n    handleLogIn() {\n        console.log(AppLogger(\"handleLogIn\"));\n        console.log(AppLogger(this.state.userName));\n        console.log(AppLogger(this.state.password));\n\n        let ut = new UsersTable();\n        let user = ut.getUser(this.state.userName);\n\n        let loginAlert = null;\n        if (user) {\n            if (user.passwd === this.state.password) {\n                console.log(AppLogger(\"handleLogIn 1111\"));\n                try {\n                    console.log(AppLogger(\"handleLogIn22222\"));\n                    window.localStorage.setItem('user', this.state.userName);\n                    console.log(AppLogger(\"handleLogIn33333\"));\n                }\n                catch (e){\n                    console.log(AppLogger(\"handleLogIn4444\"));\n                    let cookie = new Cookies();\n                    cookie.set('user', this.state.userName);\n                }\n\n                this.setState({ isLogIn: true, logInAlert: null });\n                window.location.reload();\n                return;\n            }\n            else {\n                loginAlert = \"the password for \" + this.state.userName + \" is incorrect\";\n            }\n        }\n        else {\n            loginAlert = this.state.userName + \" not found\";\n        }\n        this.setState({ isLogIn: false, logInAlert: loginAlert });\n    }\n\n    handleChange(e) {\n        const target = e.target;\n\n        this.setState({\n            [target.name]: target.value,\n            logInAlert: null\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.isLogIn === false &&\n                    <Modal\n                        show={true}\n                        bsSize='lg'\n                        onHide={this.handleHide}\n                        container={this}\n                        aria-labelledby=\"contained-modal-title\"\n                    >\n                        <Modal.Header closeButton>\n                            <Modal.Title id=\"contained-modal-title\">\n                                LogIn test2\n                            </Modal.Title>\n                        </Modal.Header>\n                        <Modal.Body>\n                            User Name:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"user name\"\n                                onChange={this.handleChange}\n                                name=\"userName\"\n                            />\n                            Password:\n                            <FormControl\n                                type=\"text\"\n                                placeholder=\"password\"\n                                onChange={this.handleChange}\n                                name=\"password\"\n                            />\n                        </Modal.Body>\n                        <Modal.Footer>\n                            {this.state.logInAlert &&\n                                <center>\n                                    Failed to Login: {this.state.logInAlert}\n                                </center>\n                            }\n                            {\n                                this.state.showButton &&\n                                <Button onClick={() => this.handleLogIn()}>LogIn</Button>\n                            }\n                        </Modal.Footer>\n                    </Modal>\n                }\n            </div>\n        );\n    }\n\n}","import Dashboard from \"layouts/Dashboard/Dashboard.jsx\";\n\nvar indexRoutes = [{ path: \"/\", name: \"Home\", component: Dashboard }];\n\nexport default indexRoutes;\n","import React, { Component } from \"react\";\nimport { Route, Switch, Redirect } from \"react-router-dom\";\n\nimport Header from \"components/Header/Header\";\nimport Sidebar from \"components/Sidebar/Sidebar\";\nimport dashboardRoutes from \"routes/dashboard.jsx\";\nimport { LogInHelper } from \"../../app/logInHelper\";\nimport LogIn from \"../../views/App/login.jsx\"\nimport UsersTable from \"../../app/db/UsersTable\";\nimport TanksTable from \"../../app/db/TanksTable\";\nimport CustomersTable from \"../../app/db/CustomersTable\";\nimport TanksReading from \"../../app/db/TankReadings\";\nimport {appIsReady} from \"../../app/adminHelper\"\nimport {setGraphFilteredTank, setDataFilteredTank} from \"../../app/readingsHelper\"\n\nclass Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      _notificationSystem: null,\n      appDbReady: 0\n    };\n  }\n\n  componentDidMount = () => {\n    // read mandatory tables \n    new UsersTable().start(this.userTableReady,false);\n  }\n\n  userTableReady = () => {\n    new TanksTable().start(this.tanksTableReady,false);\n  }\n\n  tanksTableReady = () => {\n    new CustomersTable().start(this.customersTableReady,false);\n  }\n\n  customersTableReady = () => {\n    new TanksReading().getLastReading(this.allIsReady);\n  }\n\n  allIsReady = () => {\n    let tanks = new TanksTable().getCustomerTanks(new LogInHelper().getLoggedInCustomerId());\n\n    if (tanks.length > 0){\n      setGraphFilteredTank(tanks[0]);\n      setDataFilteredTank(tanks[0]);\n    }\n\n    appIsReady(true);\n  }\n\n  dbReady = () => {\n    this.setState({appDbReady:this.state.appDbReady+1});\n  }\n\n  /*\nhandleNotificationClick(position) {\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  this.state._notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: position,\n    autoDismiss: 15\n  });\n}\n\ncomponentDidMount() {\n  this.setState({ _notificationSystem: this.refs.notificationSystem });\n  var _notificationSystem = this.refs.notificationSystem;\n  var color = Math.floor(Math.random() * 4 + 1);\n  var level;\n  switch (color) {\n    case 1:\n      level = \"success\";\n      break;\n    case 2:\n      level = \"warning\";\n      break;\n    case 3:\n      level = \"error\";\n      break;\n    case 4:\n      level = \"info\";\n      break;\n    default:\n      break;\n  }\n  _notificationSystem.addNotification({\n    title: <span data-notify=\"icon\" className=\"pe-7s-gift\" />,\n    message: (\n      <div>\n        Welcome to <b>Light Bootstrap Dashboard</b> - a beautiful freebie for\n        every web developer.\n      </div>\n    ),\n    level: level,\n    position: \"tr\",\n    autoDismiss: 15\n  });\n}\n*/\n  componentDidUpdate(e) {\n    if (\n      window.innerWidth < 993 &&\n      e.history.location.pathname !== e.location.pathname &&\n      document.documentElement.className.indexOf(\"nav-open\") !== -1\n    ) {\n      document.documentElement.classList.toggle(\"nav-open\");\n    }\n    if (e.history.action === \"PUSH\") {\n      document.documentElement.scrollTop = 0;\n      document.scrollingElement.scrollTop = 0;\n      this.refs.mainPanel.scrollTop = 0;\n    }\n  }\n  render() {\n    let logInHelper = new LogInHelper();\n    if (!logInHelper.isLogIn()) {\n      return (<LogIn />);\n    }\n    else {\n      return (\n        <div className=\"wrapper\">\n          {/*<NotificationSystem ref=\"notificationSystem\" style={style} />*/}\n          <Sidebar {...this.props} />\n          <div id=\"main-panel\" className=\"main-panel\" ref=\"mainPanel\">\n            <Header {...this.props} />\n            <Switch>\n              {dashboardRoutes.map((prop, key) => {\n                if (prop.name === \"Notifications\")\n                  return (\n                    <Route\n                      path={prop.path}\n                      key={key}\n                      render={routeProps => (\n                        <prop.component\n                          {...routeProps}\n                          handleClick={this.handleNotificationClick}\n                        />\n                      )}\n                    />\n                  );\n                if (prop.redirect)\n                  return <Redirect from={prop.path} to={prop.to} key={key} />;\n                return (\n                  <Route path={prop.path} component={prop.component} key={key} />\n                );\n              })}\n            </Switch>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default Dashboard;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport indexRoutes from \"routes/index.jsx\";\nimport \"./assets/css/animate.min.css\";\nimport \"./assets/sass/light-bootstrap-dashboard.css?v=1.2.0\"; \nimport \"./assets/css/demo.css\";\nimport \"./assets/css/pe-icon-7-stroke.css\";\nimport packageJson from '../package.json';\n\nReactDOM.render(\n  <HashRouter>\n    <Switch>\n    {console.log(\"Version - \" + packageJson.version)}\n      {indexRoutes.map((prop, key) => {\n        return <Route to={prop.path} component={prop.component} key={key} />;\n      })}\n    </Switch>\n  </HashRouter>,\n  document.getElementById(\"root\")\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"primaryColor\":\"white\",\"primaryTextColor\":\"#165B7D\",\"primarySideColor\":\"#165B7D\",\"secondaryColor\":\"#e9f5ff\",\"menuTextColor\":\"#e3e2e2\",\"backgroundColor\":\"#e2e3e4\"};"],"sourceRoot":""}